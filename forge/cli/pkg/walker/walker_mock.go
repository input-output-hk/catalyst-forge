// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package walker

import (
	"sync"
)

// Ensure, that WalkerMock does implement Walker.
// If this is not the case, regenerate this file with moq.
var _ Walker = &WalkerMock{}

// WalkerMock is a mock implementation of Walker.
//
//	func TestSomethingThatUsesWalker(t *testing.T) {
//
//		// make and configure a mocked Walker
//		mockedWalker := &WalkerMock{
//			WalkFunc: func(rootPath string, callback WalkerCallback) error {
//				panic("mock out the Walk method")
//			},
//		}
//
//		// use mockedWalker in code that requires Walker
//		// and then make assertions.
//
//	}
type WalkerMock struct {
	// WalkFunc mocks the Walk method.
	WalkFunc func(rootPath string, callback WalkerCallback) error

	// calls tracks calls to the methods.
	calls struct {
		// Walk holds details about calls to the Walk method.
		Walk []struct {
			// RootPath is the rootPath argument value.
			RootPath string
			// Callback is the callback argument value.
			Callback WalkerCallback
		}
	}
	lockWalk sync.RWMutex
}

// Walk calls WalkFunc.
func (mock *WalkerMock) Walk(rootPath string, callback WalkerCallback) error {
	if mock.WalkFunc == nil {
		panic("WalkerMock.WalkFunc: method is nil but Walker.Walk was just called")
	}
	callInfo := struct {
		RootPath string
		Callback WalkerCallback
	}{
		RootPath: rootPath,
		Callback: callback,
	}
	mock.lockWalk.Lock()
	mock.calls.Walk = append(mock.calls.Walk, callInfo)
	mock.lockWalk.Unlock()
	return mock.WalkFunc(rootPath, callback)
}

// WalkCalls gets all the calls that were made to Walk.
// Check the length with:
//
//	len(mockedWalker.WalkCalls())
func (mock *WalkerMock) WalkCalls() []struct {
	RootPath string
	Callback WalkerCallback
} {
	var calls []struct {
		RootPath string
		Callback WalkerCallback
	}
	mock.lockWalk.RLock()
	calls = mock.calls.Walk
	mock.lockWalk.RUnlock()
	return calls
}
