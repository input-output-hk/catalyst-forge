name: Setup CI
description: Sets up the CI with the configured providers
inputs:
  earthly_version:
    description: The version of Earthly to install
    default: latest
  forge_version:
    description: The version of the forge CLI to install (use 'local' for testing)
    default: latest
runs:
  using: composite
  steps:
    # If the local version of forge is requested, we try to build (and cache) it
    # locally with Earthly
    - name: Install Earthly
      uses: earthly/actions-setup@v1
      if: inputs.forge_version == 'local'
      with:
        version: ${{ inputs.earthly_version }}
    - name: Cache Forge CLI binary
      if: inputs.forge_version == 'local'
      id: cache-forge
      uses: actions/cache@v4
      with:
        path: /usr/local/bin/forge
        key: ${{ runner.os }}-forge-${{ hashFiles('forge/cli/**') }}
        restore-keys: |
          ${{ runner.os }}-forge-
    - name: Build Forge CLI
      if: steps.cache-forge.outputs.cache-hit != 'true' && inputs.forge_version == 'local'
      shell: bash
      run: |
          earthly --artifact ./forge/cli+build/forge /usr/local/bin/forge

    - name: Get provider configuration
      id: provider
      shell: bash
      run: |
        BP=$(forge blueprint dump .)

        AWS=$(echo "$BP" | jq -r .ci.providers.aws)
        if [[ "$AWS" != "null" ]]; then
          AWS_REGION=$(echo "$BP" | jq -r .ci.providers.aws.region)
          AWS_ROLE=$(echo "$BP" | jq -r .ci.providers.aws.role)
        fi

        echo "aws_region=$AWS_REGION" >> $GITHUB_OUTPUT
        echo "aws_role=$AWS_ROLE" >> $GITHUB_OUTPUT

    - name: Configure AWS
      uses: aws-actions/configure-aws-credentials@v4
      if: ${{ steps.provider.outputs.aws_region  != '' && steps.provider.outputs.aws_role != '' }}
      with:
        aws-region: ${{ steps.provider.outputs.aws_region }}
        role-to-assume: ${{ steps.provider.outputs.aws_role }}