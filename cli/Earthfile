VERSION 0.8

deps:
    FROM golang:1.23.0-alpine3.19

    WORKDIR /work

    RUN apk add git file

    RUN mkdir -p /go/cache && mkdir -p /go/modcache
    ENV GOCACHE=/go/cache
    ENV GOMODCACHE=/go/modcache
    CACHE --persist --sharing shared /go

    COPY ../lib/project+src/src /lib/project
    COPY ../lib/tools+src/src /lib/tools

    COPY go.mod go.sum .
    RUN go mod download

src:
    FROM +deps

    CACHE --persist --sharing shared /go

    COPY . .
    RUN go generate ./...

check:
    FROM +src

    RUN gofmt -l . | grep . && exit 1 || exit 0
    RUN go vet ./...

build:
    FROM +src

    ARG GOOS
    ARG GOARCH
    ARG version="0.0.0"

    ENV CGO_ENABLED=0
    RUN go build -ldflags="-extldflags=-static -X main.version=$version" -o bin/forge cmd/main.go
    RUN file bin/forge

    SAVE ARTIFACT bin/forge forge

test:
    FROM +build

    RUN go test ./...

github:
    FROM scratch

    ARG version="dev"

    ARG TARGETOS
    ARG TARGETARCH
    ARG USERPLATFORM

    COPY \
        --platform=$USERPLATFORM \
        (+build/forge \
        --GOOS=$TARGETOS \
        --GOARCH=$TARGETARCH \
        --version=$version) bin/forge

    SAVE ARTIFACT bin/forge forge

docker:
    FROM debian:bookworm-slim
    WORKDIR /workspace

    ARG container="forge"
    ARG tag="latest"
    ARG version="dev"

    ARG TARGETOS
    ARG TARGETARCH
    ARG USERPLATFORM

    COPY \
        --platform=$USERPLATFORM \
        (+build/forge \
        --GOOS=$TARGETOS \
        --GOARCH=$TARGETARCH \
        --version=$version) /usr/local/bin/forge

    ENTRYPOINT ["/usr/local/bin/forge"]
    SAVE IMAGE ${container}:${tag}