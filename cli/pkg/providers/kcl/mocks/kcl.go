// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/input-output-hk/catalyst-forge/cli/pkg/providers/kcl"
	"sync"
)

// KCLClientMock is a mock implementation of kcl.KCLClient.
//
//	func TestSomethingThatUsesKCLClient(t *testing.T) {
//
//		// make and configure a mocked kcl.KCLClient
//		mockedKCLClient := &KCLClientMock{
//			LogFunc: func() string {
//				panic("mock out the Log method")
//			},
//			RunFunc: func(kCLModuleArgs kcl.KCLModuleArgs) (string, error) {
//				panic("mock out the Run method")
//			},
//		}
//
//		// use mockedKCLClient in code that requires kcl.KCLClient
//		// and then make assertions.
//
//	}
type KCLClientMock struct {
	// LogFunc mocks the Log method.
	LogFunc func() string

	// RunFunc mocks the Run method.
	RunFunc func(kCLModuleArgs kcl.KCLModuleArgs) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// Log holds details about calls to the Log method.
		Log []struct {
		}
		// Run holds details about calls to the Run method.
		Run []struct {
			// KCLModuleArgs is the kCLModuleArgs argument value.
			KCLModuleArgs kcl.KCLModuleArgs
		}
	}
	lockLog sync.RWMutex
	lockRun sync.RWMutex
}

// Log calls LogFunc.
func (mock *KCLClientMock) Log() string {
	if mock.LogFunc == nil {
		panic("KCLClientMock.LogFunc: method is nil but KCLClient.Log was just called")
	}
	callInfo := struct {
	}{}
	mock.lockLog.Lock()
	mock.calls.Log = append(mock.calls.Log, callInfo)
	mock.lockLog.Unlock()
	return mock.LogFunc()
}

// LogCalls gets all the calls that were made to Log.
// Check the length with:
//
//	len(mockedKCLClient.LogCalls())
func (mock *KCLClientMock) LogCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockLog.RLock()
	calls = mock.calls.Log
	mock.lockLog.RUnlock()
	return calls
}

// Run calls RunFunc.
func (mock *KCLClientMock) Run(kCLModuleArgs kcl.KCLModuleArgs) (string, error) {
	if mock.RunFunc == nil {
		panic("KCLClientMock.RunFunc: method is nil but KCLClient.Run was just called")
	}
	callInfo := struct {
		KCLModuleArgs kcl.KCLModuleArgs
	}{
		KCLModuleArgs: kCLModuleArgs,
	}
	mock.lockRun.Lock()
	mock.calls.Run = append(mock.calls.Run, callInfo)
	mock.lockRun.Unlock()
	return mock.RunFunc(kCLModuleArgs)
}

// RunCalls gets all the calls that were made to Run.
// Check the length with:
//
//	len(mockedKCLClient.RunCalls())
func (mock *KCLClientMock) RunCalls() []struct {
	KCLModuleArgs kcl.KCLModuleArgs
} {
	var calls []struct {
		KCLModuleArgs kcl.KCLModuleArgs
	}
	mock.lockRun.RLock()
	calls = mock.calls.Run
	mock.lockRun.RUnlock()
	return calls
}
