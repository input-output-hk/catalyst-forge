name: Validate GHA OIDC

on:
  push:

permissions:
  id-token: write
  contents: read


env:
  API_URL: "http://localhost:5000"
  OIDC_AUDIENCE: "forge"

jobs:
  test-auth-endpoint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install Local Forge
        id: install-local
        uses: input-output-hk/catalyst-forge/actions/install-local@master
      - name: Check forge version
        id: local
        run: |
          forge version

      - name: Setup CI
        uses: input-output-hk/catalyst-forge/actions/setup@master
        with:
          skip_docker: 'true'
          skip_github: 'true'

      - name: Build image
        run: |
            forge run ./foundry/api+docker

      - name: Start API
        run: |
          docker compose -f ./foundry/api/docker-compose.yml up -d

      - name: Wait for API to be ready
        run: |
          sleep 10

      - name: Create GHA auth
        run: |
            forge -vvv --api-url "http://localhost:5050" api login "$(cat ./foundry/api/.secret/jwt.txt)"
            forge -vvv --api-url "http://localhost:5050" api auth gha create -a input-output-hk/catalyst-forge

      - name: Obtain OIDC ID token
        id: oidc
        shell: bash
        run: |
          set -euo pipefail
          TOKEN_JSON=$(curl -sSL \
            "${ACTIONS_ID_TOKEN_REQUEST_URL}&audience=${OIDC_AUDIENCE}" \
            -H "Authorization: Bearer ${ACTIONS_ID_TOKEN_REQUEST_TOKEN}")

          IDTOKEN=$(echo "$TOKEN_JSON" | jq -r .value)
          echo "::add-mask::$IDTOKEN"         # keep it out of logs
          echo "id_token=$IDTOKEN" >>"$GITHUB_OUTPUT"

      - name: Login with OIDC ID token
        id: call-api
        shell: bash
        run: |
          JWT=$(echo "$BODY" | jq -r '.token')
          forge -vvv --api-url "http://localhost:5050" api login -t "gha" "$JWT"

    #   - name: Verify returned JWT token
    #     shell: bash
    #     run: |
    #       cat > release.json << 'EOF'
    #       {
    #         "bundle": "fake",
    #         "project": "project",
    #         "project_path": "project",
    #         "source_repo": "http://gitea:3000/root/source",
    #         "source_commit": "0e28b79ca8e72079c29b575d2b994cfef92b4c32"
    #       }

    #       EOF

    #       JSON=$(cat release.json | curl -s -X POST "${API_URL}/release" \
    #         -H "Content-Type: application/json" \
    #         -H "Authorization: Bearer ${{ steps.call-api.outputs.jwt }}" \
    #         -d @-)

    #       echo "JSON: $JSON"

    #       if [ "$(echo "$JSON" | jq -r '.id')" == "null" ]; then
    #         echo "::error ::Release ID is null"
    #         exit 1
    #       fi
