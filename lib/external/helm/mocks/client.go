// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/input-output-hk/catalyst-forge/lib/external/helm"
	"sync"
)

// ClientMock is a mock implementation of helm.Client.
//
//	func TestSomethingThatUsesClient(t *testing.T) {
//
//		// make and configure a mocked helm.Client
//		mockedClient := &ClientMock{
//			TemplateFunc: func(config helm.TemplateConfig) (string, error) {
//				panic("mock out the Template method")
//			},
//		}
//
//		// use mockedClient in code that requires helm.Client
//		// and then make assertions.
//
//	}
type ClientMock struct {
	// TemplateFunc mocks the Template method.
	TemplateFunc func(config helm.TemplateConfig) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// Template holds details about calls to the Template method.
		Template []struct {
			// Config is the config argument value.
			Config helm.TemplateConfig
		}
	}
	lockTemplate sync.RWMutex
}

// Template calls TemplateFunc.
func (mock *ClientMock) Template(config helm.TemplateConfig) (string, error) {
	if mock.TemplateFunc == nil {
		panic("ClientMock.TemplateFunc: method is nil but Client.Template was just called")
	}
	callInfo := struct {
		Config helm.TemplateConfig
	}{
		Config: config,
	}
	mock.lockTemplate.Lock()
	mock.calls.Template = append(mock.calls.Template, callInfo)
	mock.lockTemplate.Unlock()
	return mock.TemplateFunc(config)
}

// TemplateCalls gets all the calls that were made to Template.
// Check the length with:
//
//	len(mockedClient.TemplateCalls())
func (mock *ClientMock) TemplateCalls() []struct {
	Config helm.TemplateConfig
} {
	var calls []struct {
		Config helm.TemplateConfig
	}
	mock.lockTemplate.RLock()
	calls = mock.calls.Template
	mock.lockTemplate.RUnlock()
	return calls
}
