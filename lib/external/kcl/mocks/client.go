// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/input-output-hk/catalyst-forge/lib/external/kcl"
	"sync"
)

// ClientMock is a mock implementation of kcl.Client.
//
//	func TestSomethingThatUsesClient(t *testing.T) {
//
//		// make and configure a mocked kcl.Client
//		mockedClient := &ClientMock{
//			RunFunc: func(s string, moduleConfig kcl.ModuleConfig) (string, error) {
//				panic("mock out the Run method")
//			},
//		}
//
//		// use mockedClient in code that requires kcl.Client
//		// and then make assertions.
//
//	}
type ClientMock struct {
	// RunFunc mocks the Run method.
	RunFunc func(s string, moduleConfig kcl.ModuleConfig) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// Run holds details about calls to the Run method.
		Run []struct {
			// S is the s argument value.
			S string
			// ModuleConfig is the moduleConfig argument value.
			ModuleConfig kcl.ModuleConfig
		}
	}
	lockRun sync.RWMutex
}

// Run calls RunFunc.
func (mock *ClientMock) Run(s string, moduleConfig kcl.ModuleConfig) (string, error) {
	if mock.RunFunc == nil {
		panic("ClientMock.RunFunc: method is nil but Client.Run was just called")
	}
	callInfo := struct {
		S            string
		ModuleConfig kcl.ModuleConfig
	}{
		S:            s,
		ModuleConfig: moduleConfig,
	}
	mock.lockRun.Lock()
	mock.calls.Run = append(mock.calls.Run, callInfo)
	mock.lockRun.Unlock()
	return mock.RunFunc(s, moduleConfig)
}

// RunCalls gets all the calls that were made to Run.
// Check the length with:
//
//	len(mockedClient.RunCalls())
func (mock *ClientMock) RunCalls() []struct {
	S            string
	ModuleConfig kcl.ModuleConfig
} {
	var calls []struct {
		S            string
		ModuleConfig kcl.ModuleConfig
	}
	mock.lockRun.RLock()
	calls = mock.calls.Run
	mock.lockRun.RUnlock()
	return calls
}
