// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/input-output-hk/catalyst-forge/lib/foundry/client/device"
	"sync"
)

// Ensure, that DeviceClientInterfaceMock does implement device.DeviceClientInterface.
// If this is not the case, regenerate this file with moq.
var _ device.DeviceClientInterface = &DeviceClientInterfaceMock{}

// DeviceClientInterfaceMock is a mock implementation of device.DeviceClientInterface.
//
//	func TestSomethingThatUsesDeviceClientInterface(t *testing.T) {
//
//		// make and configure a mocked device.DeviceClientInterface
//		mockedDeviceClientInterface := &DeviceClientInterfaceMock{
//			ApproveFunc: func(ctx context.Context, req *device.ApproveRequest) error {
//				panic("mock out the Approve method")
//			},
//			InitFunc: func(ctx context.Context, req *device.InitRequest) (*device.InitResponse, error) {
//				panic("mock out the Init method")
//			},
//			TokenFunc: func(ctx context.Context, req *device.TokenRequest) (*device.TokenResponse, error) {
//				panic("mock out the Token method")
//			},
//		}
//
//		// use mockedDeviceClientInterface in code that requires device.DeviceClientInterface
//		// and then make assertions.
//
//	}
type DeviceClientInterfaceMock struct {
	// ApproveFunc mocks the Approve method.
	ApproveFunc func(ctx context.Context, req *device.ApproveRequest) error

	// InitFunc mocks the Init method.
	InitFunc func(ctx context.Context, req *device.InitRequest) (*device.InitResponse, error)

	// TokenFunc mocks the Token method.
	TokenFunc func(ctx context.Context, req *device.TokenRequest) (*device.TokenResponse, error)

	// calls tracks calls to the methods.
	calls struct {
		// Approve holds details about calls to the Approve method.
		Approve []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req *device.ApproveRequest
		}
		// Init holds details about calls to the Init method.
		Init []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req *device.InitRequest
		}
		// Token holds details about calls to the Token method.
		Token []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req *device.TokenRequest
		}
	}
	lockApprove sync.RWMutex
	lockInit    sync.RWMutex
	lockToken   sync.RWMutex
}

// Approve calls ApproveFunc.
func (mock *DeviceClientInterfaceMock) Approve(ctx context.Context, req *device.ApproveRequest) error {
	if mock.ApproveFunc == nil {
		panic("DeviceClientInterfaceMock.ApproveFunc: method is nil but DeviceClientInterface.Approve was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req *device.ApproveRequest
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockApprove.Lock()
	mock.calls.Approve = append(mock.calls.Approve, callInfo)
	mock.lockApprove.Unlock()
	return mock.ApproveFunc(ctx, req)
}

// ApproveCalls gets all the calls that were made to Approve.
// Check the length with:
//
//	len(mockedDeviceClientInterface.ApproveCalls())
func (mock *DeviceClientInterfaceMock) ApproveCalls() []struct {
	Ctx context.Context
	Req *device.ApproveRequest
} {
	var calls []struct {
		Ctx context.Context
		Req *device.ApproveRequest
	}
	mock.lockApprove.RLock()
	calls = mock.calls.Approve
	mock.lockApprove.RUnlock()
	return calls
}

// Init calls InitFunc.
func (mock *DeviceClientInterfaceMock) Init(ctx context.Context, req *device.InitRequest) (*device.InitResponse, error) {
	if mock.InitFunc == nil {
		panic("DeviceClientInterfaceMock.InitFunc: method is nil but DeviceClientInterface.Init was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req *device.InitRequest
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockInit.Lock()
	mock.calls.Init = append(mock.calls.Init, callInfo)
	mock.lockInit.Unlock()
	return mock.InitFunc(ctx, req)
}

// InitCalls gets all the calls that were made to Init.
// Check the length with:
//
//	len(mockedDeviceClientInterface.InitCalls())
func (mock *DeviceClientInterfaceMock) InitCalls() []struct {
	Ctx context.Context
	Req *device.InitRequest
} {
	var calls []struct {
		Ctx context.Context
		Req *device.InitRequest
	}
	mock.lockInit.RLock()
	calls = mock.calls.Init
	mock.lockInit.RUnlock()
	return calls
}

// Token calls TokenFunc.
func (mock *DeviceClientInterfaceMock) Token(ctx context.Context, req *device.TokenRequest) (*device.TokenResponse, error) {
	if mock.TokenFunc == nil {
		panic("DeviceClientInterfaceMock.TokenFunc: method is nil but DeviceClientInterface.Token was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req *device.TokenRequest
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockToken.Lock()
	mock.calls.Token = append(mock.calls.Token, callInfo)
	mock.lockToken.Unlock()
	return mock.TokenFunc(ctx, req)
}

// TokenCalls gets all the calls that were made to Token.
// Check the length with:
//
//	len(mockedDeviceClientInterface.TokenCalls())
func (mock *DeviceClientInterfaceMock) TokenCalls() []struct {
	Ctx context.Context
	Req *device.TokenRequest
} {
	var calls []struct {
		Ctx context.Context
		Req *device.TokenRequest
	}
	mock.lockToken.RLock()
	calls = mock.calls.Token
	mock.lockToken.RUnlock()
	return calls
}
