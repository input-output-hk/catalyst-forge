// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/input-output-hk/catalyst-forge/lib/foundry/client/releases"
	"sync"
)

// Ensure, that AliasesClientInterfaceMock does implement releases.AliasesClientInterface.
// If this is not the case, regenerate this file with moq.
var _ releases.AliasesClientInterface = &AliasesClientInterfaceMock{}

// AliasesClientInterfaceMock is a mock implementation of releases.AliasesClientInterface.
//
//	func TestSomethingThatUsesAliasesClientInterface(t *testing.T) {
//
//		// make and configure a mocked releases.AliasesClientInterface
//		mockedAliasesClientInterface := &AliasesClientInterfaceMock{
//			CreateFunc: func(ctx context.Context, aliasName string, releaseID string) error {
//				panic("mock out the Create method")
//			},
//			DeleteFunc: func(ctx context.Context, aliasName string) error {
//				panic("mock out the Delete method")
//			},
//			ListFunc: func(ctx context.Context, releaseID string) ([]releases.ReleaseAlias, error) {
//				panic("mock out the List method")
//			},
//		}
//
//		// use mockedAliasesClientInterface in code that requires releases.AliasesClientInterface
//		// and then make assertions.
//
//	}
type AliasesClientInterfaceMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, aliasName string, releaseID string) error

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(ctx context.Context, aliasName string) error

	// ListFunc mocks the List method.
	ListFunc func(ctx context.Context, releaseID string) ([]releases.ReleaseAlias, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AliasName is the aliasName argument value.
			AliasName string
			// ReleaseID is the releaseID argument value.
			ReleaseID string
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AliasName is the aliasName argument value.
			AliasName string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ReleaseID is the releaseID argument value.
			ReleaseID string
		}
	}
	lockCreate sync.RWMutex
	lockDelete sync.RWMutex
	lockList   sync.RWMutex
}

// Create calls CreateFunc.
func (mock *AliasesClientInterfaceMock) Create(ctx context.Context, aliasName string, releaseID string) error {
	if mock.CreateFunc == nil {
		panic("AliasesClientInterfaceMock.CreateFunc: method is nil but AliasesClientInterface.Create was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		AliasName string
		ReleaseID string
	}{
		Ctx:       ctx,
		AliasName: aliasName,
		ReleaseID: releaseID,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, aliasName, releaseID)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedAliasesClientInterface.CreateCalls())
func (mock *AliasesClientInterfaceMock) CreateCalls() []struct {
	Ctx       context.Context
	AliasName string
	ReleaseID string
} {
	var calls []struct {
		Ctx       context.Context
		AliasName string
		ReleaseID string
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *AliasesClientInterfaceMock) Delete(ctx context.Context, aliasName string) error {
	if mock.DeleteFunc == nil {
		panic("AliasesClientInterfaceMock.DeleteFunc: method is nil but AliasesClientInterface.Delete was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		AliasName string
	}{
		Ctx:       ctx,
		AliasName: aliasName,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(ctx, aliasName)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//
//	len(mockedAliasesClientInterface.DeleteCalls())
func (mock *AliasesClientInterfaceMock) DeleteCalls() []struct {
	Ctx       context.Context
	AliasName string
} {
	var calls []struct {
		Ctx       context.Context
		AliasName string
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *AliasesClientInterfaceMock) List(ctx context.Context, releaseID string) ([]releases.ReleaseAlias, error) {
	if mock.ListFunc == nil {
		panic("AliasesClientInterfaceMock.ListFunc: method is nil but AliasesClientInterface.List was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		ReleaseID string
	}{
		Ctx:       ctx,
		ReleaseID: releaseID,
	}
	mock.lockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	mock.lockList.Unlock()
	return mock.ListFunc(ctx, releaseID)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//
//	len(mockedAliasesClientInterface.ListCalls())
func (mock *AliasesClientInterfaceMock) ListCalls() []struct {
	Ctx       context.Context
	ReleaseID string
} {
	var calls []struct {
		Ctx       context.Context
		ReleaseID string
	}
	mock.lockList.RLock()
	calls = mock.calls.List
	mock.lockList.RUnlock()
	return calls
}
