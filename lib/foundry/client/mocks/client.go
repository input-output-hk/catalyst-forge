// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/input-output-hk/catalyst-forge/lib/foundry/client"
	"github.com/input-output-hk/catalyst-forge/lib/foundry/client/auth"
	"github.com/input-output-hk/catalyst-forge/lib/foundry/client/certificates"
	"github.com/input-output-hk/catalyst-forge/lib/foundry/client/deployments"
	"github.com/input-output-hk/catalyst-forge/lib/foundry/client/device"
	"github.com/input-output-hk/catalyst-forge/lib/foundry/client/github"
	"github.com/input-output-hk/catalyst-forge/lib/foundry/client/invites"
	"github.com/input-output-hk/catalyst-forge/lib/foundry/client/jwks"
	"github.com/input-output-hk/catalyst-forge/lib/foundry/client/releases"
	"github.com/input-output-hk/catalyst-forge/lib/foundry/client/tokens"
	"github.com/input-output-hk/catalyst-forge/lib/foundry/client/users"
	"sync"
)

// Ensure, that ClientMock does implement client.Client.
// If this is not the case, regenerate this file with moq.
var _ client.Client = &ClientMock{}

// ClientMock is a mock implementation of client.Client.
//
//	func TestSomethingThatUsesClient(t *testing.T) {
//
//		// make and configure a mocked client.Client
//		mockedClient := &ClientMock{
//			AliasesFunc: func() releases.AliasesClientInterface {
//				panic("mock out the Aliases method")
//			},
//			AuthFunc: func() auth.AuthClientInterface {
//				panic("mock out the Auth method")
//			},
//			CertificatesFunc: func() certificates.CertificatesClientInterface {
//				panic("mock out the Certificates method")
//			},
//			DeploymentsFunc: func() deployments.DeploymentsClientInterface {
//				panic("mock out the Deployments method")
//			},
//			DeviceFunc: func() device.DeviceClientInterface {
//				panic("mock out the Device method")
//			},
//			EventsFunc: func() deployments.EventsClientInterface {
//				panic("mock out the Events method")
//			},
//			GithubFunc: func() github.GithubClientInterface {
//				panic("mock out the Github method")
//			},
//			InvitesFunc: func() invites.InvitesClientInterface {
//				panic("mock out the Invites method")
//			},
//			JWKSFunc: func() jwks.JWKSClientInterface {
//				panic("mock out the JWKS method")
//			},
//			KeysFunc: func() users.KeysClientInterface {
//				panic("mock out the Keys method")
//			},
//			ReleasesFunc: func() releases.ReleasesClientInterface {
//				panic("mock out the Releases method")
//			},
//			RolesFunc: func() users.RolesClientInterface {
//				panic("mock out the Roles method")
//			},
//			TokensFunc: func() tokens.TokensClientInterface {
//				panic("mock out the Tokens method")
//			},
//			UsersFunc: func() users.UsersClientInterface {
//				panic("mock out the Users method")
//			},
//		}
//
//		// use mockedClient in code that requires client.Client
//		// and then make assertions.
//
//	}
type ClientMock struct {
	// AliasesFunc mocks the Aliases method.
	AliasesFunc func() releases.AliasesClientInterface

	// AuthFunc mocks the Auth method.
	AuthFunc func() auth.AuthClientInterface

	// CertificatesFunc mocks the Certificates method.
	CertificatesFunc func() certificates.CertificatesClientInterface

	// DeploymentsFunc mocks the Deployments method.
	DeploymentsFunc func() deployments.DeploymentsClientInterface

	// DeviceFunc mocks the Device method.
	DeviceFunc func() device.DeviceClientInterface

	// EventsFunc mocks the Events method.
	EventsFunc func() deployments.EventsClientInterface

	// GithubFunc mocks the Github method.
	GithubFunc func() github.GithubClientInterface

	// InvitesFunc mocks the Invites method.
	InvitesFunc func() invites.InvitesClientInterface

	// JWKSFunc mocks the JWKS method.
	JWKSFunc func() jwks.JWKSClientInterface

	// KeysFunc mocks the Keys method.
	KeysFunc func() users.KeysClientInterface

	// ReleasesFunc mocks the Releases method.
	ReleasesFunc func() releases.ReleasesClientInterface

	// RolesFunc mocks the Roles method.
	RolesFunc func() users.RolesClientInterface

	// TokensFunc mocks the Tokens method.
	TokensFunc func() tokens.TokensClientInterface

	// UsersFunc mocks the Users method.
	UsersFunc func() users.UsersClientInterface

	// calls tracks calls to the methods.
	calls struct {
		// Aliases holds details about calls to the Aliases method.
		Aliases []struct {
		}
		// Auth holds details about calls to the Auth method.
		Auth []struct {
		}
		// Certificates holds details about calls to the Certificates method.
		Certificates []struct {
		}
		// Deployments holds details about calls to the Deployments method.
		Deployments []struct {
		}
		// Device holds details about calls to the Device method.
		Device []struct {
		}
		// Events holds details about calls to the Events method.
		Events []struct {
		}
		// Github holds details about calls to the Github method.
		Github []struct {
		}
		// Invites holds details about calls to the Invites method.
		Invites []struct {
		}
		// JWKS holds details about calls to the JWKS method.
		JWKS []struct {
		}
		// Keys holds details about calls to the Keys method.
		Keys []struct {
		}
		// Releases holds details about calls to the Releases method.
		Releases []struct {
		}
		// Roles holds details about calls to the Roles method.
		Roles []struct {
		}
		// Tokens holds details about calls to the Tokens method.
		Tokens []struct {
		}
		// Users holds details about calls to the Users method.
		Users []struct {
		}
	}
	lockAliases      sync.RWMutex
	lockAuth         sync.RWMutex
	lockCertificates sync.RWMutex
	lockDeployments  sync.RWMutex
	lockDevice       sync.RWMutex
	lockEvents       sync.RWMutex
	lockGithub       sync.RWMutex
	lockInvites      sync.RWMutex
	lockJWKS         sync.RWMutex
	lockKeys         sync.RWMutex
	lockReleases     sync.RWMutex
	lockRoles        sync.RWMutex
	lockTokens       sync.RWMutex
	lockUsers        sync.RWMutex
}

// Aliases calls AliasesFunc.
func (mock *ClientMock) Aliases() releases.AliasesClientInterface {
	if mock.AliasesFunc == nil {
		panic("ClientMock.AliasesFunc: method is nil but Client.Aliases was just called")
	}
	callInfo := struct {
	}{}
	mock.lockAliases.Lock()
	mock.calls.Aliases = append(mock.calls.Aliases, callInfo)
	mock.lockAliases.Unlock()
	return mock.AliasesFunc()
}

// AliasesCalls gets all the calls that were made to Aliases.
// Check the length with:
//
//	len(mockedClient.AliasesCalls())
func (mock *ClientMock) AliasesCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockAliases.RLock()
	calls = mock.calls.Aliases
	mock.lockAliases.RUnlock()
	return calls
}

// Auth calls AuthFunc.
func (mock *ClientMock) Auth() auth.AuthClientInterface {
	if mock.AuthFunc == nil {
		panic("ClientMock.AuthFunc: method is nil but Client.Auth was just called")
	}
	callInfo := struct {
	}{}
	mock.lockAuth.Lock()
	mock.calls.Auth = append(mock.calls.Auth, callInfo)
	mock.lockAuth.Unlock()
	return mock.AuthFunc()
}

// AuthCalls gets all the calls that were made to Auth.
// Check the length with:
//
//	len(mockedClient.AuthCalls())
func (mock *ClientMock) AuthCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockAuth.RLock()
	calls = mock.calls.Auth
	mock.lockAuth.RUnlock()
	return calls
}

// Certificates calls CertificatesFunc.
func (mock *ClientMock) Certificates() certificates.CertificatesClientInterface {
	if mock.CertificatesFunc == nil {
		panic("ClientMock.CertificatesFunc: method is nil but Client.Certificates was just called")
	}
	callInfo := struct {
	}{}
	mock.lockCertificates.Lock()
	mock.calls.Certificates = append(mock.calls.Certificates, callInfo)
	mock.lockCertificates.Unlock()
	return mock.CertificatesFunc()
}

// CertificatesCalls gets all the calls that were made to Certificates.
// Check the length with:
//
//	len(mockedClient.CertificatesCalls())
func (mock *ClientMock) CertificatesCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockCertificates.RLock()
	calls = mock.calls.Certificates
	mock.lockCertificates.RUnlock()
	return calls
}

// Deployments calls DeploymentsFunc.
func (mock *ClientMock) Deployments() deployments.DeploymentsClientInterface {
	if mock.DeploymentsFunc == nil {
		panic("ClientMock.DeploymentsFunc: method is nil but Client.Deployments was just called")
	}
	callInfo := struct {
	}{}
	mock.lockDeployments.Lock()
	mock.calls.Deployments = append(mock.calls.Deployments, callInfo)
	mock.lockDeployments.Unlock()
	return mock.DeploymentsFunc()
}

// DeploymentsCalls gets all the calls that were made to Deployments.
// Check the length with:
//
//	len(mockedClient.DeploymentsCalls())
func (mock *ClientMock) DeploymentsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockDeployments.RLock()
	calls = mock.calls.Deployments
	mock.lockDeployments.RUnlock()
	return calls
}

// Device calls DeviceFunc.
func (mock *ClientMock) Device() device.DeviceClientInterface {
	if mock.DeviceFunc == nil {
		panic("ClientMock.DeviceFunc: method is nil but Client.Device was just called")
	}
	callInfo := struct {
	}{}
	mock.lockDevice.Lock()
	mock.calls.Device = append(mock.calls.Device, callInfo)
	mock.lockDevice.Unlock()
	return mock.DeviceFunc()
}

// DeviceCalls gets all the calls that were made to Device.
// Check the length with:
//
//	len(mockedClient.DeviceCalls())
func (mock *ClientMock) DeviceCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockDevice.RLock()
	calls = mock.calls.Device
	mock.lockDevice.RUnlock()
	return calls
}

// Events calls EventsFunc.
func (mock *ClientMock) Events() deployments.EventsClientInterface {
	if mock.EventsFunc == nil {
		panic("ClientMock.EventsFunc: method is nil but Client.Events was just called")
	}
	callInfo := struct {
	}{}
	mock.lockEvents.Lock()
	mock.calls.Events = append(mock.calls.Events, callInfo)
	mock.lockEvents.Unlock()
	return mock.EventsFunc()
}

// EventsCalls gets all the calls that were made to Events.
// Check the length with:
//
//	len(mockedClient.EventsCalls())
func (mock *ClientMock) EventsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockEvents.RLock()
	calls = mock.calls.Events
	mock.lockEvents.RUnlock()
	return calls
}

// Github calls GithubFunc.
func (mock *ClientMock) Github() github.GithubClientInterface {
	if mock.GithubFunc == nil {
		panic("ClientMock.GithubFunc: method is nil but Client.Github was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGithub.Lock()
	mock.calls.Github = append(mock.calls.Github, callInfo)
	mock.lockGithub.Unlock()
	return mock.GithubFunc()
}

// GithubCalls gets all the calls that were made to Github.
// Check the length with:
//
//	len(mockedClient.GithubCalls())
func (mock *ClientMock) GithubCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGithub.RLock()
	calls = mock.calls.Github
	mock.lockGithub.RUnlock()
	return calls
}

// Invites calls InvitesFunc.
func (mock *ClientMock) Invites() invites.InvitesClientInterface {
	if mock.InvitesFunc == nil {
		panic("ClientMock.InvitesFunc: method is nil but Client.Invites was just called")
	}
	callInfo := struct {
	}{}
	mock.lockInvites.Lock()
	mock.calls.Invites = append(mock.calls.Invites, callInfo)
	mock.lockInvites.Unlock()
	return mock.InvitesFunc()
}

// InvitesCalls gets all the calls that were made to Invites.
// Check the length with:
//
//	len(mockedClient.InvitesCalls())
func (mock *ClientMock) InvitesCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockInvites.RLock()
	calls = mock.calls.Invites
	mock.lockInvites.RUnlock()
	return calls
}

// JWKS calls JWKSFunc.
func (mock *ClientMock) JWKS() jwks.JWKSClientInterface {
	if mock.JWKSFunc == nil {
		panic("ClientMock.JWKSFunc: method is nil but Client.JWKS was just called")
	}
	callInfo := struct {
	}{}
	mock.lockJWKS.Lock()
	mock.calls.JWKS = append(mock.calls.JWKS, callInfo)
	mock.lockJWKS.Unlock()
	return mock.JWKSFunc()
}

// JWKSCalls gets all the calls that were made to JWKS.
// Check the length with:
//
//	len(mockedClient.JWKSCalls())
func (mock *ClientMock) JWKSCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockJWKS.RLock()
	calls = mock.calls.JWKS
	mock.lockJWKS.RUnlock()
	return calls
}

// Keys calls KeysFunc.
func (mock *ClientMock) Keys() users.KeysClientInterface {
	if mock.KeysFunc == nil {
		panic("ClientMock.KeysFunc: method is nil but Client.Keys was just called")
	}
	callInfo := struct {
	}{}
	mock.lockKeys.Lock()
	mock.calls.Keys = append(mock.calls.Keys, callInfo)
	mock.lockKeys.Unlock()
	return mock.KeysFunc()
}

// KeysCalls gets all the calls that were made to Keys.
// Check the length with:
//
//	len(mockedClient.KeysCalls())
func (mock *ClientMock) KeysCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockKeys.RLock()
	calls = mock.calls.Keys
	mock.lockKeys.RUnlock()
	return calls
}

// Releases calls ReleasesFunc.
func (mock *ClientMock) Releases() releases.ReleasesClientInterface {
	if mock.ReleasesFunc == nil {
		panic("ClientMock.ReleasesFunc: method is nil but Client.Releases was just called")
	}
	callInfo := struct {
	}{}
	mock.lockReleases.Lock()
	mock.calls.Releases = append(mock.calls.Releases, callInfo)
	mock.lockReleases.Unlock()
	return mock.ReleasesFunc()
}

// ReleasesCalls gets all the calls that were made to Releases.
// Check the length with:
//
//	len(mockedClient.ReleasesCalls())
func (mock *ClientMock) ReleasesCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockReleases.RLock()
	calls = mock.calls.Releases
	mock.lockReleases.RUnlock()
	return calls
}

// Roles calls RolesFunc.
func (mock *ClientMock) Roles() users.RolesClientInterface {
	if mock.RolesFunc == nil {
		panic("ClientMock.RolesFunc: method is nil but Client.Roles was just called")
	}
	callInfo := struct {
	}{}
	mock.lockRoles.Lock()
	mock.calls.Roles = append(mock.calls.Roles, callInfo)
	mock.lockRoles.Unlock()
	return mock.RolesFunc()
}

// RolesCalls gets all the calls that were made to Roles.
// Check the length with:
//
//	len(mockedClient.RolesCalls())
func (mock *ClientMock) RolesCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockRoles.RLock()
	calls = mock.calls.Roles
	mock.lockRoles.RUnlock()
	return calls
}

// Tokens calls TokensFunc.
func (mock *ClientMock) Tokens() tokens.TokensClientInterface {
	if mock.TokensFunc == nil {
		panic("ClientMock.TokensFunc: method is nil but Client.Tokens was just called")
	}
	callInfo := struct {
	}{}
	mock.lockTokens.Lock()
	mock.calls.Tokens = append(mock.calls.Tokens, callInfo)
	mock.lockTokens.Unlock()
	return mock.TokensFunc()
}

// TokensCalls gets all the calls that were made to Tokens.
// Check the length with:
//
//	len(mockedClient.TokensCalls())
func (mock *ClientMock) TokensCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockTokens.RLock()
	calls = mock.calls.Tokens
	mock.lockTokens.RUnlock()
	return calls
}

// Users calls UsersFunc.
func (mock *ClientMock) Users() users.UsersClientInterface {
	if mock.UsersFunc == nil {
		panic("ClientMock.UsersFunc: method is nil but Client.Users was just called")
	}
	callInfo := struct {
	}{}
	mock.lockUsers.Lock()
	mock.calls.Users = append(mock.calls.Users, callInfo)
	mock.lockUsers.Unlock()
	return mock.UsersFunc()
}

// UsersCalls gets all the calls that were made to Users.
// Check the length with:
//
//	len(mockedClient.UsersCalls())
func (mock *ClientMock) UsersCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockUsers.RLock()
	calls = mock.calls.Users
	mock.lockUsers.RUnlock()
	return calls
}
