// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/input-output-hk/catalyst-forge/lib/foundry/client/invites"
	"sync"
)

// Ensure, that InvitesClientInterfaceMock does implement invites.InvitesClientInterface.
// If this is not the case, regenerate this file with moq.
var _ invites.InvitesClientInterface = &InvitesClientInterfaceMock{}

// InvitesClientInterfaceMock is a mock implementation of invites.InvitesClientInterface.
//
//	func TestSomethingThatUsesInvitesClientInterface(t *testing.T) {
//
//		// make and configure a mocked invites.InvitesClientInterface
//		mockedInvitesClientInterface := &InvitesClientInterfaceMock{
//			CreateFunc: func(ctx context.Context, req *invites.CreateInviteRequest) (*invites.CreateInviteResponse, error) {
//				panic("mock out the Create method")
//			},
//			VerifyFunc: func(ctx context.Context, token string) error {
//				panic("mock out the Verify method")
//			},
//		}
//
//		// use mockedInvitesClientInterface in code that requires invites.InvitesClientInterface
//		// and then make assertions.
//
//	}
type InvitesClientInterfaceMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, req *invites.CreateInviteRequest) (*invites.CreateInviteResponse, error)

	// VerifyFunc mocks the Verify method.
	VerifyFunc func(ctx context.Context, token string) error

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req *invites.CreateInviteRequest
		}
		// Verify holds details about calls to the Verify method.
		Verify []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
		}
	}
	lockCreate sync.RWMutex
	lockVerify sync.RWMutex
}

// Create calls CreateFunc.
func (mock *InvitesClientInterfaceMock) Create(ctx context.Context, req *invites.CreateInviteRequest) (*invites.CreateInviteResponse, error) {
	if mock.CreateFunc == nil {
		panic("InvitesClientInterfaceMock.CreateFunc: method is nil but InvitesClientInterface.Create was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req *invites.CreateInviteRequest
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, req)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedInvitesClientInterface.CreateCalls())
func (mock *InvitesClientInterfaceMock) CreateCalls() []struct {
	Ctx context.Context
	Req *invites.CreateInviteRequest
} {
	var calls []struct {
		Ctx context.Context
		Req *invites.CreateInviteRequest
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// Verify calls VerifyFunc.
func (mock *InvitesClientInterfaceMock) Verify(ctx context.Context, token string) error {
	if mock.VerifyFunc == nil {
		panic("InvitesClientInterfaceMock.VerifyFunc: method is nil but InvitesClientInterface.Verify was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Token string
	}{
		Ctx:   ctx,
		Token: token,
	}
	mock.lockVerify.Lock()
	mock.calls.Verify = append(mock.calls.Verify, callInfo)
	mock.lockVerify.Unlock()
	return mock.VerifyFunc(ctx, token)
}

// VerifyCalls gets all the calls that were made to Verify.
// Check the length with:
//
//	len(mockedInvitesClientInterface.VerifyCalls())
func (mock *InvitesClientInterfaceMock) VerifyCalls() []struct {
	Ctx   context.Context
	Token string
} {
	var calls []struct {
		Ctx   context.Context
		Token string
	}
	mock.lockVerify.RLock()
	calls = mock.calls.Verify
	mock.lockVerify.RUnlock()
	return calls
}
