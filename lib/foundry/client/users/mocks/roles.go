// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/input-output-hk/catalyst-forge/lib/foundry/client/users"
	"sync"
)

// Ensure, that RolesClientInterfaceMock does implement users.RolesClientInterface.
// If this is not the case, regenerate this file with moq.
var _ users.RolesClientInterface = &RolesClientInterfaceMock{}

// RolesClientInterfaceMock is a mock implementation of users.RolesClientInterface.
//
//	func TestSomethingThatUsesRolesClientInterface(t *testing.T) {
//
//		// make and configure a mocked users.RolesClientInterface
//		mockedRolesClientInterface := &RolesClientInterfaceMock{
//			AssignUserFunc: func(ctx context.Context, userID uint, roleID uint) error {
//				panic("mock out the AssignUser method")
//			},
//			CreateFunc: func(ctx context.Context, req *users.CreateRoleRequest) (*users.Role, error) {
//				panic("mock out the Create method")
//			},
//			CreateWithAdminFunc: func(ctx context.Context, req *users.CreateRoleRequest) (*users.Role, error) {
//				panic("mock out the CreateWithAdmin method")
//			},
//			DeleteFunc: func(ctx context.Context, id uint) error {
//				panic("mock out the Delete method")
//			},
//			GetFunc: func(ctx context.Context, id uint) (*users.Role, error) {
//				panic("mock out the Get method")
//			},
//			GetByNameFunc: func(ctx context.Context, name string) (*users.Role, error) {
//				panic("mock out the GetByName method")
//			},
//			GetRoleUsersFunc: func(ctx context.Context, roleID uint) ([]users.UserRole, error) {
//				panic("mock out the GetRoleUsers method")
//			},
//			GetUserRolesFunc: func(ctx context.Context, userID uint) ([]users.UserRole, error) {
//				panic("mock out the GetUserRoles method")
//			},
//			ListFunc: func(ctx context.Context) ([]users.Role, error) {
//				panic("mock out the List method")
//			},
//			RemoveUserFunc: func(ctx context.Context, userID uint, roleID uint) error {
//				panic("mock out the RemoveUser method")
//			},
//			UpdateFunc: func(ctx context.Context, id uint, req *users.UpdateRoleRequest) (*users.Role, error) {
//				panic("mock out the Update method")
//			},
//		}
//
//		// use mockedRolesClientInterface in code that requires users.RolesClientInterface
//		// and then make assertions.
//
//	}
type RolesClientInterfaceMock struct {
	// AssignUserFunc mocks the AssignUser method.
	AssignUserFunc func(ctx context.Context, userID uint, roleID uint) error

	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, req *users.CreateRoleRequest) (*users.Role, error)

	// CreateWithAdminFunc mocks the CreateWithAdmin method.
	CreateWithAdminFunc func(ctx context.Context, req *users.CreateRoleRequest) (*users.Role, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(ctx context.Context, id uint) error

	// GetFunc mocks the Get method.
	GetFunc func(ctx context.Context, id uint) (*users.Role, error)

	// GetByNameFunc mocks the GetByName method.
	GetByNameFunc func(ctx context.Context, name string) (*users.Role, error)

	// GetRoleUsersFunc mocks the GetRoleUsers method.
	GetRoleUsersFunc func(ctx context.Context, roleID uint) ([]users.UserRole, error)

	// GetUserRolesFunc mocks the GetUserRoles method.
	GetUserRolesFunc func(ctx context.Context, userID uint) ([]users.UserRole, error)

	// ListFunc mocks the List method.
	ListFunc func(ctx context.Context) ([]users.Role, error)

	// RemoveUserFunc mocks the RemoveUser method.
	RemoveUserFunc func(ctx context.Context, userID uint, roleID uint) error

	// UpdateFunc mocks the Update method.
	UpdateFunc func(ctx context.Context, id uint, req *users.UpdateRoleRequest) (*users.Role, error)

	// calls tracks calls to the methods.
	calls struct {
		// AssignUser holds details about calls to the AssignUser method.
		AssignUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserID is the userID argument value.
			UserID uint
			// RoleID is the roleID argument value.
			RoleID uint
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req *users.CreateRoleRequest
		}
		// CreateWithAdmin holds details about calls to the CreateWithAdmin method.
		CreateWithAdmin []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req *users.CreateRoleRequest
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uint
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uint
		}
		// GetByName holds details about calls to the GetByName method.
		GetByName []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
		}
		// GetRoleUsers holds details about calls to the GetRoleUsers method.
		GetRoleUsers []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// RoleID is the roleID argument value.
			RoleID uint
		}
		// GetUserRoles holds details about calls to the GetUserRoles method.
		GetUserRoles []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserID is the userID argument value.
			UserID uint
		}
		// List holds details about calls to the List method.
		List []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// RemoveUser holds details about calls to the RemoveUser method.
		RemoveUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserID is the userID argument value.
			UserID uint
			// RoleID is the roleID argument value.
			RoleID uint
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uint
			// Req is the req argument value.
			Req *users.UpdateRoleRequest
		}
	}
	lockAssignUser      sync.RWMutex
	lockCreate          sync.RWMutex
	lockCreateWithAdmin sync.RWMutex
	lockDelete          sync.RWMutex
	lockGet             sync.RWMutex
	lockGetByName       sync.RWMutex
	lockGetRoleUsers    sync.RWMutex
	lockGetUserRoles    sync.RWMutex
	lockList            sync.RWMutex
	lockRemoveUser      sync.RWMutex
	lockUpdate          sync.RWMutex
}

// AssignUser calls AssignUserFunc.
func (mock *RolesClientInterfaceMock) AssignUser(ctx context.Context, userID uint, roleID uint) error {
	if mock.AssignUserFunc == nil {
		panic("RolesClientInterfaceMock.AssignUserFunc: method is nil but RolesClientInterface.AssignUser was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		UserID uint
		RoleID uint
	}{
		Ctx:    ctx,
		UserID: userID,
		RoleID: roleID,
	}
	mock.lockAssignUser.Lock()
	mock.calls.AssignUser = append(mock.calls.AssignUser, callInfo)
	mock.lockAssignUser.Unlock()
	return mock.AssignUserFunc(ctx, userID, roleID)
}

// AssignUserCalls gets all the calls that were made to AssignUser.
// Check the length with:
//
//	len(mockedRolesClientInterface.AssignUserCalls())
func (mock *RolesClientInterfaceMock) AssignUserCalls() []struct {
	Ctx    context.Context
	UserID uint
	RoleID uint
} {
	var calls []struct {
		Ctx    context.Context
		UserID uint
		RoleID uint
	}
	mock.lockAssignUser.RLock()
	calls = mock.calls.AssignUser
	mock.lockAssignUser.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *RolesClientInterfaceMock) Create(ctx context.Context, req *users.CreateRoleRequest) (*users.Role, error) {
	if mock.CreateFunc == nil {
		panic("RolesClientInterfaceMock.CreateFunc: method is nil but RolesClientInterface.Create was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req *users.CreateRoleRequest
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, req)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedRolesClientInterface.CreateCalls())
func (mock *RolesClientInterfaceMock) CreateCalls() []struct {
	Ctx context.Context
	Req *users.CreateRoleRequest
} {
	var calls []struct {
		Ctx context.Context
		Req *users.CreateRoleRequest
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// CreateWithAdmin calls CreateWithAdminFunc.
func (mock *RolesClientInterfaceMock) CreateWithAdmin(ctx context.Context, req *users.CreateRoleRequest) (*users.Role, error) {
	if mock.CreateWithAdminFunc == nil {
		panic("RolesClientInterfaceMock.CreateWithAdminFunc: method is nil but RolesClientInterface.CreateWithAdmin was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req *users.CreateRoleRequest
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockCreateWithAdmin.Lock()
	mock.calls.CreateWithAdmin = append(mock.calls.CreateWithAdmin, callInfo)
	mock.lockCreateWithAdmin.Unlock()
	return mock.CreateWithAdminFunc(ctx, req)
}

// CreateWithAdminCalls gets all the calls that were made to CreateWithAdmin.
// Check the length with:
//
//	len(mockedRolesClientInterface.CreateWithAdminCalls())
func (mock *RolesClientInterfaceMock) CreateWithAdminCalls() []struct {
	Ctx context.Context
	Req *users.CreateRoleRequest
} {
	var calls []struct {
		Ctx context.Context
		Req *users.CreateRoleRequest
	}
	mock.lockCreateWithAdmin.RLock()
	calls = mock.calls.CreateWithAdmin
	mock.lockCreateWithAdmin.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *RolesClientInterfaceMock) Delete(ctx context.Context, id uint) error {
	if mock.DeleteFunc == nil {
		panic("RolesClientInterfaceMock.DeleteFunc: method is nil but RolesClientInterface.Delete was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uint
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(ctx, id)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//
//	len(mockedRolesClientInterface.DeleteCalls())
func (mock *RolesClientInterfaceMock) DeleteCalls() []struct {
	Ctx context.Context
	ID  uint
} {
	var calls []struct {
		Ctx context.Context
		ID  uint
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *RolesClientInterfaceMock) Get(ctx context.Context, id uint) (*users.Role, error) {
	if mock.GetFunc == nil {
		panic("RolesClientInterfaceMock.GetFunc: method is nil but RolesClientInterface.Get was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uint
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(ctx, id)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//
//	len(mockedRolesClientInterface.GetCalls())
func (mock *RolesClientInterfaceMock) GetCalls() []struct {
	Ctx context.Context
	ID  uint
} {
	var calls []struct {
		Ctx context.Context
		ID  uint
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// GetByName calls GetByNameFunc.
func (mock *RolesClientInterfaceMock) GetByName(ctx context.Context, name string) (*users.Role, error) {
	if mock.GetByNameFunc == nil {
		panic("RolesClientInterfaceMock.GetByNameFunc: method is nil but RolesClientInterface.GetByName was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
	}{
		Ctx:  ctx,
		Name: name,
	}
	mock.lockGetByName.Lock()
	mock.calls.GetByName = append(mock.calls.GetByName, callInfo)
	mock.lockGetByName.Unlock()
	return mock.GetByNameFunc(ctx, name)
}

// GetByNameCalls gets all the calls that were made to GetByName.
// Check the length with:
//
//	len(mockedRolesClientInterface.GetByNameCalls())
func (mock *RolesClientInterfaceMock) GetByNameCalls() []struct {
	Ctx  context.Context
	Name string
} {
	var calls []struct {
		Ctx  context.Context
		Name string
	}
	mock.lockGetByName.RLock()
	calls = mock.calls.GetByName
	mock.lockGetByName.RUnlock()
	return calls
}

// GetRoleUsers calls GetRoleUsersFunc.
func (mock *RolesClientInterfaceMock) GetRoleUsers(ctx context.Context, roleID uint) ([]users.UserRole, error) {
	if mock.GetRoleUsersFunc == nil {
		panic("RolesClientInterfaceMock.GetRoleUsersFunc: method is nil but RolesClientInterface.GetRoleUsers was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		RoleID uint
	}{
		Ctx:    ctx,
		RoleID: roleID,
	}
	mock.lockGetRoleUsers.Lock()
	mock.calls.GetRoleUsers = append(mock.calls.GetRoleUsers, callInfo)
	mock.lockGetRoleUsers.Unlock()
	return mock.GetRoleUsersFunc(ctx, roleID)
}

// GetRoleUsersCalls gets all the calls that were made to GetRoleUsers.
// Check the length with:
//
//	len(mockedRolesClientInterface.GetRoleUsersCalls())
func (mock *RolesClientInterfaceMock) GetRoleUsersCalls() []struct {
	Ctx    context.Context
	RoleID uint
} {
	var calls []struct {
		Ctx    context.Context
		RoleID uint
	}
	mock.lockGetRoleUsers.RLock()
	calls = mock.calls.GetRoleUsers
	mock.lockGetRoleUsers.RUnlock()
	return calls
}

// GetUserRoles calls GetUserRolesFunc.
func (mock *RolesClientInterfaceMock) GetUserRoles(ctx context.Context, userID uint) ([]users.UserRole, error) {
	if mock.GetUserRolesFunc == nil {
		panic("RolesClientInterfaceMock.GetUserRolesFunc: method is nil but RolesClientInterface.GetUserRoles was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		UserID uint
	}{
		Ctx:    ctx,
		UserID: userID,
	}
	mock.lockGetUserRoles.Lock()
	mock.calls.GetUserRoles = append(mock.calls.GetUserRoles, callInfo)
	mock.lockGetUserRoles.Unlock()
	return mock.GetUserRolesFunc(ctx, userID)
}

// GetUserRolesCalls gets all the calls that were made to GetUserRoles.
// Check the length with:
//
//	len(mockedRolesClientInterface.GetUserRolesCalls())
func (mock *RolesClientInterfaceMock) GetUserRolesCalls() []struct {
	Ctx    context.Context
	UserID uint
} {
	var calls []struct {
		Ctx    context.Context
		UserID uint
	}
	mock.lockGetUserRoles.RLock()
	calls = mock.calls.GetUserRoles
	mock.lockGetUserRoles.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *RolesClientInterfaceMock) List(ctx context.Context) ([]users.Role, error) {
	if mock.ListFunc == nil {
		panic("RolesClientInterfaceMock.ListFunc: method is nil but RolesClientInterface.List was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	mock.lockList.Unlock()
	return mock.ListFunc(ctx)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//
//	len(mockedRolesClientInterface.ListCalls())
func (mock *RolesClientInterfaceMock) ListCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockList.RLock()
	calls = mock.calls.List
	mock.lockList.RUnlock()
	return calls
}

// RemoveUser calls RemoveUserFunc.
func (mock *RolesClientInterfaceMock) RemoveUser(ctx context.Context, userID uint, roleID uint) error {
	if mock.RemoveUserFunc == nil {
		panic("RolesClientInterfaceMock.RemoveUserFunc: method is nil but RolesClientInterface.RemoveUser was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		UserID uint
		RoleID uint
	}{
		Ctx:    ctx,
		UserID: userID,
		RoleID: roleID,
	}
	mock.lockRemoveUser.Lock()
	mock.calls.RemoveUser = append(mock.calls.RemoveUser, callInfo)
	mock.lockRemoveUser.Unlock()
	return mock.RemoveUserFunc(ctx, userID, roleID)
}

// RemoveUserCalls gets all the calls that were made to RemoveUser.
// Check the length with:
//
//	len(mockedRolesClientInterface.RemoveUserCalls())
func (mock *RolesClientInterfaceMock) RemoveUserCalls() []struct {
	Ctx    context.Context
	UserID uint
	RoleID uint
} {
	var calls []struct {
		Ctx    context.Context
		UserID uint
		RoleID uint
	}
	mock.lockRemoveUser.RLock()
	calls = mock.calls.RemoveUser
	mock.lockRemoveUser.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *RolesClientInterfaceMock) Update(ctx context.Context, id uint, req *users.UpdateRoleRequest) (*users.Role, error) {
	if mock.UpdateFunc == nil {
		panic("RolesClientInterfaceMock.UpdateFunc: method is nil but RolesClientInterface.Update was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uint
		Req *users.UpdateRoleRequest
	}{
		Ctx: ctx,
		ID:  id,
		Req: req,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(ctx, id, req)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//
//	len(mockedRolesClientInterface.UpdateCalls())
func (mock *RolesClientInterfaceMock) UpdateCalls() []struct {
	Ctx context.Context
	ID  uint
	Req *users.UpdateRoleRequest
} {
	var calls []struct {
		Ctx context.Context
		ID  uint
		Req *users.UpdateRoleRequest
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}
