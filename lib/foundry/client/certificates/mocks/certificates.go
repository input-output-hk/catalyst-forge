// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"sync"

	"github.com/input-output-hk/catalyst-forge/lib/foundry/client/certificates"
)

// Ensure, that CertificatesClientInterfaceMock does implement certificates.CertificatesClientInterface.
// If this is not the case, regenerate this file with moq.
var _ certificates.CertificatesClientInterface = &CertificatesClientInterfaceMock{}

// CertificatesClientInterfaceMock is a mock implementation of certificates.CertificatesClientInterface.
//
//	func TestSomethingThatUsesCertificatesClientInterface(t *testing.T) {
//
//		// make and configure a mocked certificates.CertificatesClientInterface
//		mockedCertificatesClientInterface := &CertificatesClientInterfaceMock{
//			GetRootCertificateFunc: func(ctx context.Context) ([]byte, error) {
//				panic("mock out the GetRootCertificate method")
//			},
//			SignCertificateFunc: func(ctx context.Context, req *certificates.CertificateSigningRequest) (*certificates.CertificateSigningResponse, error) {
//				panic("mock out the SignCertificate method")
//			},
//		}
//
//		// use mockedCertificatesClientInterface in code that requires certificates.CertificatesClientInterface
//		// and then make assertions.
//
//	}
type CertificatesClientInterfaceMock struct {
	// GetRootCertificateFunc mocks the GetRootCertificate method.
	GetRootCertificateFunc func(ctx context.Context) ([]byte, error)

	// SignCertificateFunc mocks the SignCertificate method.
	SignCertificateFunc func(ctx context.Context, req *certificates.CertificateSigningRequest) (*certificates.CertificateSigningResponse, error)

	// SignServerCertificateFunc mocks the SignServerCertificate method.
	SignServerCertificateFunc func(ctx context.Context, req *certificates.CertificateSigningRequest) (*certificates.CertificateSigningResponse, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetRootCertificate holds details about calls to the GetRootCertificate method.
		GetRootCertificate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// SignCertificate holds details about calls to the SignCertificate method.
		SignCertificate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req *certificates.CertificateSigningRequest
		}
		// SignServerCertificate holds details about calls to the SignServerCertificate method.
		SignServerCertificate []struct {
			Ctx context.Context
			Req *certificates.CertificateSigningRequest
		}
	}
	lockGetRootCertificate    sync.RWMutex
	lockSignCertificate       sync.RWMutex
	lockSignServerCertificate sync.RWMutex
}

// GetRootCertificate calls GetRootCertificateFunc.
func (mock *CertificatesClientInterfaceMock) GetRootCertificate(ctx context.Context) ([]byte, error) {
	if mock.GetRootCertificateFunc == nil {
		panic("CertificatesClientInterfaceMock.GetRootCertificateFunc: method is nil but CertificatesClientInterface.GetRootCertificate was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetRootCertificate.Lock()
	mock.calls.GetRootCertificate = append(mock.calls.GetRootCertificate, callInfo)
	mock.lockGetRootCertificate.Unlock()
	return mock.GetRootCertificateFunc(ctx)
}

// GetRootCertificateCalls gets all the calls that were made to GetRootCertificate.
// Check the length with:
//
//	len(mockedCertificatesClientInterface.GetRootCertificateCalls())
func (mock *CertificatesClientInterfaceMock) GetRootCertificateCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetRootCertificate.RLock()
	calls = mock.calls.GetRootCertificate
	mock.lockGetRootCertificate.RUnlock()
	return calls
}

// SignCertificate calls SignCertificateFunc.
func (mock *CertificatesClientInterfaceMock) SignCertificate(ctx context.Context, req *certificates.CertificateSigningRequest) (*certificates.CertificateSigningResponse, error) {
	if mock.SignCertificateFunc == nil {
		panic("CertificatesClientInterfaceMock.SignCertificateFunc: method is nil but CertificatesClientInterface.SignCertificate was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req *certificates.CertificateSigningRequest
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockSignCertificate.Lock()
	mock.calls.SignCertificate = append(mock.calls.SignCertificate, callInfo)
	mock.lockSignCertificate.Unlock()
	return mock.SignCertificateFunc(ctx, req)
}

// SignServerCertificate calls SignServerCertificateFunc.
func (mock *CertificatesClientInterfaceMock) SignServerCertificate(ctx context.Context, req *certificates.CertificateSigningRequest) (*certificates.CertificateSigningResponse, error) {
	if mock.SignServerCertificateFunc == nil {
		panic("CertificatesClientInterfaceMock.SignServerCertificateFunc: method is nil but CertificatesClientInterface.SignServerCertificate was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req *certificates.CertificateSigningRequest
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockSignServerCertificate.Lock()
	mock.calls.SignServerCertificate = append(mock.calls.SignServerCertificate, callInfo)
	mock.lockSignServerCertificate.Unlock()
	return mock.SignServerCertificateFunc(ctx, req)
}

// SignServerCertificateCalls gets all the calls that were made to SignServerCertificate.
func (mock *CertificatesClientInterfaceMock) SignServerCertificateCalls() []struct {
	Ctx context.Context
	Req *certificates.CertificateSigningRequest
} {
	var calls []struct {
		Ctx context.Context
		Req *certificates.CertificateSigningRequest
	}
	mock.lockSignServerCertificate.RLock()
	calls = mock.calls.SignServerCertificate
	mock.lockSignServerCertificate.RUnlock()
	return calls
}

// SignCertificateCalls gets all the calls that were made to SignCertificate.
// Check the length with:
//
//	len(mockedCertificatesClientInterface.SignCertificateCalls())
func (mock *CertificatesClientInterfaceMock) SignCertificateCalls() []struct {
	Ctx context.Context
	Req *certificates.CertificateSigningRequest
} {
	var calls []struct {
		Ctx context.Context
		Req *certificates.CertificateSigningRequest
	}
	mock.lockSignCertificate.RLock()
	calls = mock.calls.SignCertificate
	mock.lockSignCertificate.RUnlock()
	return calls
}
