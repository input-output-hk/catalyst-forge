// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"gopkg.in/square/go-jose.v2"
	"sync"
)

// GitHubJWKSCacherMock is a mock implementation of github.GitHubJWKSCacher.
//
//	func TestSomethingThatUsesGitHubJWKSCacher(t *testing.T) {
//
//		// make and configure a mocked github.GitHubJWKSCacher
//		mockedGitHubJWKSCacher := &GitHubJWKSCacherMock{
//			JWKSFunc: func() *jose.JSONWebKeySet {
//				panic("mock out the JWKS method")
//			},
//			StartFunc: func(contextMoqParam context.Context) error {
//				panic("mock out the Start method")
//			},
//			StopFunc: func()  {
//				panic("mock out the Stop method")
//			},
//		}
//
//		// use mockedGitHubJWKSCacher in code that requires github.GitHubJWKSCacher
//		// and then make assertions.
//
//	}
type GitHubJWKSCacherMock struct {
	// JWKSFunc mocks the JWKS method.
	JWKSFunc func() *jose.JSONWebKeySet

	// StartFunc mocks the Start method.
	StartFunc func(contextMoqParam context.Context) error

	// StopFunc mocks the Stop method.
	StopFunc func()

	// calls tracks calls to the methods.
	calls struct {
		// JWKS holds details about calls to the JWKS method.
		JWKS []struct {
		}
		// Start holds details about calls to the Start method.
		Start []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
		}
		// Stop holds details about calls to the Stop method.
		Stop []struct {
		}
	}
	lockJWKS  sync.RWMutex
	lockStart sync.RWMutex
	lockStop  sync.RWMutex
}

// JWKS calls JWKSFunc.
func (mock *GitHubJWKSCacherMock) JWKS() *jose.JSONWebKeySet {
	if mock.JWKSFunc == nil {
		panic("GitHubJWKSCacherMock.JWKSFunc: method is nil but GitHubJWKSCacher.JWKS was just called")
	}
	callInfo := struct {
	}{}
	mock.lockJWKS.Lock()
	mock.calls.JWKS = append(mock.calls.JWKS, callInfo)
	mock.lockJWKS.Unlock()
	return mock.JWKSFunc()
}

// JWKSCalls gets all the calls that were made to JWKS.
// Check the length with:
//
//	len(mockedGitHubJWKSCacher.JWKSCalls())
func (mock *GitHubJWKSCacherMock) JWKSCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockJWKS.RLock()
	calls = mock.calls.JWKS
	mock.lockJWKS.RUnlock()
	return calls
}

// Start calls StartFunc.
func (mock *GitHubJWKSCacherMock) Start(contextMoqParam context.Context) error {
	if mock.StartFunc == nil {
		panic("GitHubJWKSCacherMock.StartFunc: method is nil but GitHubJWKSCacher.Start was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
	}{
		ContextMoqParam: contextMoqParam,
	}
	mock.lockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	mock.lockStart.Unlock()
	return mock.StartFunc(contextMoqParam)
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//
//	len(mockedGitHubJWKSCacher.StartCalls())
func (mock *GitHubJWKSCacherMock) StartCalls() []struct {
	ContextMoqParam context.Context
} {
	var calls []struct {
		ContextMoqParam context.Context
	}
	mock.lockStart.RLock()
	calls = mock.calls.Start
	mock.lockStart.RUnlock()
	return calls
}

// Stop calls StopFunc.
func (mock *GitHubJWKSCacherMock) Stop() {
	if mock.StopFunc == nil {
		panic("GitHubJWKSCacherMock.StopFunc: method is nil but GitHubJWKSCacher.Stop was just called")
	}
	callInfo := struct {
	}{}
	mock.lockStop.Lock()
	mock.calls.Stop = append(mock.calls.Stop, callInfo)
	mock.lockStop.Unlock()
	mock.StopFunc()
}

// StopCalls gets all the calls that were made to Stop.
// Check the length with:
//
//	len(mockedGitHubJWKSCacher.StopCalls())
func (mock *GitHubJWKSCacherMock) StopCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockStop.RLock()
	calls = mock.calls.Stop
	mock.lockStop.RUnlock()
	return calls
}
