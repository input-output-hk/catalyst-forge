// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/input-output-hk/catalyst-forge/lib/tools/executor"
	"sync"
)

// Ensure, that WrappedExecuterMock does implement executor.WrappedExecuter.
// If this is not the case, regenerate this file with moq.
var _ executor.WrappedExecuter = &WrappedExecuterMock{}

// WrappedExecuterMock is a mock implementation of executor.WrappedExecuter.
//
//	func TestSomethingThatUsesWrappedExecuter(t *testing.T) {
//
//		// make and configure a mocked executor.WrappedExecuter
//		mockedWrappedExecuter := &WrappedExecuterMock{
//			ExecuteFunc: func(args ...string) ([]byte, error) {
//				panic("mock out the Execute method")
//			},
//		}
//
//		// use mockedWrappedExecuter in code that requires executor.WrappedExecuter
//		// and then make assertions.
//
//	}
type WrappedExecuterMock struct {
	// ExecuteFunc mocks the Execute method.
	ExecuteFunc func(args ...string) ([]byte, error)

	// calls tracks calls to the methods.
	calls struct {
		// Execute holds details about calls to the Execute method.
		Execute []struct {
			// Args is the args argument value.
			Args []string
		}
	}
	lockExecute sync.RWMutex
}

// Execute calls ExecuteFunc.
func (mock *WrappedExecuterMock) Execute(args ...string) ([]byte, error) {
	if mock.ExecuteFunc == nil {
		panic("WrappedExecuterMock.ExecuteFunc: method is nil but WrappedExecuter.Execute was just called")
	}
	callInfo := struct {
		Args []string
	}{
		Args: args,
	}
	mock.lockExecute.Lock()
	mock.calls.Execute = append(mock.calls.Execute, callInfo)
	mock.lockExecute.Unlock()
	return mock.ExecuteFunc(args...)
}

// ExecuteCalls gets all the calls that were made to Execute.
// Check the length with:
//
//	len(mockedWrappedExecuter.ExecuteCalls())
func (mock *WrappedExecuterMock) ExecuteCalls() []struct {
	Args []string
} {
	var calls []struct {
		Args []string
	}
	mock.lockExecute.RLock()
	calls = mock.calls.Execute
	mock.lockExecute.RUnlock()
	return calls
}
