// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/go-git/go-billy/v5"
	"github.com/go-git/go-git/v5"
	"github.com/go-git/go-git/v5/storage"
	"sync"
)

// GitRemoteInteractorMock is a mock implementation of remote.GitRemoteInteractor.
//
//	func TestSomethingThatUsesGitRemoteInteractor(t *testing.T) {
//
//		// make and configure a mocked remote.GitRemoteInteractor
//		mockedGitRemoteInteractor := &GitRemoteInteractorMock{
//			CloneFunc: func(s storage.Storer, worktree billy.Filesystem, o *git.CloneOptions) (*git.Repository, error) {
//				panic("mock out the Clone method")
//			},
//			FetchFunc: func(repo *git.Repository, o *git.FetchOptions) error {
//				panic("mock out the Fetch method")
//			},
//			PushFunc: func(repo *git.Repository, o *git.PushOptions) error {
//				panic("mock out the Push method")
//			},
//		}
//
//		// use mockedGitRemoteInteractor in code that requires remote.GitRemoteInteractor
//		// and then make assertions.
//
//	}
type GitRemoteInteractorMock struct {
	// CloneFunc mocks the Clone method.
	CloneFunc func(s storage.Storer, worktree billy.Filesystem, o *git.CloneOptions) (*git.Repository, error)

	// FetchFunc mocks the Fetch method.
	FetchFunc func(repo *git.Repository, o *git.FetchOptions) error

	// PushFunc mocks the Push method.
	PushFunc func(repo *git.Repository, o *git.PushOptions) error

	// calls tracks calls to the methods.
	calls struct {
		// Clone holds details about calls to the Clone method.
		Clone []struct {
			// S is the s argument value.
			S storage.Storer
			// Worktree is the worktree argument value.
			Worktree billy.Filesystem
			// O is the o argument value.
			O *git.CloneOptions
		}
		// Fetch holds details about calls to the Fetch method.
		Fetch []struct {
			// Repo is the repo argument value.
			Repo *git.Repository
			// O is the o argument value.
			O *git.FetchOptions
		}
		// Push holds details about calls to the Push method.
		Push []struct {
			// Repo is the repo argument value.
			Repo *git.Repository
			// O is the o argument value.
			O *git.PushOptions
		}
	}
	lockClone sync.RWMutex
	lockFetch sync.RWMutex
	lockPush  sync.RWMutex
}

// Clone calls CloneFunc.
func (mock *GitRemoteInteractorMock) Clone(s storage.Storer, worktree billy.Filesystem, o *git.CloneOptions) (*git.Repository, error) {
	if mock.CloneFunc == nil {
		panic("GitRemoteInteractorMock.CloneFunc: method is nil but GitRemoteInteractor.Clone was just called")
	}
	callInfo := struct {
		S        storage.Storer
		Worktree billy.Filesystem
		O        *git.CloneOptions
	}{
		S:        s,
		Worktree: worktree,
		O:        o,
	}
	mock.lockClone.Lock()
	mock.calls.Clone = append(mock.calls.Clone, callInfo)
	mock.lockClone.Unlock()
	return mock.CloneFunc(s, worktree, o)
}

// CloneCalls gets all the calls that were made to Clone.
// Check the length with:
//
//	len(mockedGitRemoteInteractor.CloneCalls())
func (mock *GitRemoteInteractorMock) CloneCalls() []struct {
	S        storage.Storer
	Worktree billy.Filesystem
	O        *git.CloneOptions
} {
	var calls []struct {
		S        storage.Storer
		Worktree billy.Filesystem
		O        *git.CloneOptions
	}
	mock.lockClone.RLock()
	calls = mock.calls.Clone
	mock.lockClone.RUnlock()
	return calls
}

// Fetch calls FetchFunc.
func (mock *GitRemoteInteractorMock) Fetch(repo *git.Repository, o *git.FetchOptions) error {
	if mock.FetchFunc == nil {
		panic("GitRemoteInteractorMock.FetchFunc: method is nil but GitRemoteInteractor.Fetch was just called")
	}
	callInfo := struct {
		Repo *git.Repository
		O    *git.FetchOptions
	}{
		Repo: repo,
		O:    o,
	}
	mock.lockFetch.Lock()
	mock.calls.Fetch = append(mock.calls.Fetch, callInfo)
	mock.lockFetch.Unlock()
	return mock.FetchFunc(repo, o)
}

// FetchCalls gets all the calls that were made to Fetch.
// Check the length with:
//
//	len(mockedGitRemoteInteractor.FetchCalls())
func (mock *GitRemoteInteractorMock) FetchCalls() []struct {
	Repo *git.Repository
	O    *git.FetchOptions
} {
	var calls []struct {
		Repo *git.Repository
		O    *git.FetchOptions
	}
	mock.lockFetch.RLock()
	calls = mock.calls.Fetch
	mock.lockFetch.RUnlock()
	return calls
}

// Push calls PushFunc.
func (mock *GitRemoteInteractorMock) Push(repo *git.Repository, o *git.PushOptions) error {
	if mock.PushFunc == nil {
		panic("GitRemoteInteractorMock.PushFunc: method is nil but GitRemoteInteractor.Push was just called")
	}
	callInfo := struct {
		Repo *git.Repository
		O    *git.PushOptions
	}{
		Repo: repo,
		O:    o,
	}
	mock.lockPush.Lock()
	mock.calls.Push = append(mock.calls.Push, callInfo)
	mock.lockPush.Unlock()
	return mock.PushFunc(repo, o)
}

// PushCalls gets all the calls that were made to Push.
// Check the length with:
//
//	len(mockedGitRemoteInteractor.PushCalls())
func (mock *GitRemoteInteractorMock) PushCalls() []struct {
	Repo *git.Repository
	O    *git.PushOptions
} {
	var calls []struct {
		Repo *git.Repository
		O    *git.PushOptions
	}
	mock.lockPush.RLock()
	calls = mock.calls.Push
	mock.lockPush.RUnlock()
	return calls
}
