// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"sync"
)

// GithubRepoMock is a mock implementation of github.GithubRepo.
//
//	func TestSomethingThatUsesGithubRepo(t *testing.T) {
//
//		// make and configure a mocked github.GithubRepo
//		mockedGithubRepo := &GithubRepoMock{
//			GetBranchFunc: func() string {
//				panic("mock out the GetBranch method")
//			},
//			GetCommitFunc: func() (string, error) {
//				panic("mock out the GetCommit method")
//			},
//			GetTagFunc: func() (string, bool) {
//				panic("mock out the GetTag method")
//			},
//		}
//
//		// use mockedGithubRepo in code that requires github.GithubRepo
//		// and then make assertions.
//
//	}
type GithubRepoMock struct {
	// GetBranchFunc mocks the GetBranch method.
	GetBranchFunc func() string

	// GetCommitFunc mocks the GetCommit method.
	GetCommitFunc func() (string, error)

	// GetTagFunc mocks the GetTag method.
	GetTagFunc func() (string, bool)

	// calls tracks calls to the methods.
	calls struct {
		// GetBranch holds details about calls to the GetBranch method.
		GetBranch []struct {
		}
		// GetCommit holds details about calls to the GetCommit method.
		GetCommit []struct {
		}
		// GetTag holds details about calls to the GetTag method.
		GetTag []struct {
		}
	}
	lockGetBranch sync.RWMutex
	lockGetCommit sync.RWMutex
	lockGetTag    sync.RWMutex
}

// GetBranch calls GetBranchFunc.
func (mock *GithubRepoMock) GetBranch() string {
	if mock.GetBranchFunc == nil {
		panic("GithubRepoMock.GetBranchFunc: method is nil but GithubRepo.GetBranch was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetBranch.Lock()
	mock.calls.GetBranch = append(mock.calls.GetBranch, callInfo)
	mock.lockGetBranch.Unlock()
	return mock.GetBranchFunc()
}

// GetBranchCalls gets all the calls that were made to GetBranch.
// Check the length with:
//
//	len(mockedGithubRepo.GetBranchCalls())
func (mock *GithubRepoMock) GetBranchCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetBranch.RLock()
	calls = mock.calls.GetBranch
	mock.lockGetBranch.RUnlock()
	return calls
}

// GetCommit calls GetCommitFunc.
func (mock *GithubRepoMock) GetCommit() (string, error) {
	if mock.GetCommitFunc == nil {
		panic("GithubRepoMock.GetCommitFunc: method is nil but GithubRepo.GetCommit was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetCommit.Lock()
	mock.calls.GetCommit = append(mock.calls.GetCommit, callInfo)
	mock.lockGetCommit.Unlock()
	return mock.GetCommitFunc()
}

// GetCommitCalls gets all the calls that were made to GetCommit.
// Check the length with:
//
//	len(mockedGithubRepo.GetCommitCalls())
func (mock *GithubRepoMock) GetCommitCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetCommit.RLock()
	calls = mock.calls.GetCommit
	mock.lockGetCommit.RUnlock()
	return calls
}

// GetTag calls GetTagFunc.
func (mock *GithubRepoMock) GetTag() (string, bool) {
	if mock.GetTagFunc == nil {
		panic("GithubRepoMock.GetTagFunc: method is nil but GithubRepo.GetTag was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetTag.Lock()
	mock.calls.GetTag = append(mock.calls.GetTag, callInfo)
	mock.lockGetTag.Unlock()
	return mock.GetTagFunc()
}

// GetTagCalls gets all the calls that were made to GetTag.
// Check the length with:
//
//	len(mockedGithubRepo.GetTagCalls())
func (mock *GithubRepoMock) GetTagCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetTag.RLock()
	calls = mock.calls.GetTag
	mock.lockGetTag.RUnlock()
	return calls
}
