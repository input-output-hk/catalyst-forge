// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"bytes"
	"sync"
)

// ChartDownloaderMock is a mock implementation of downloader.ChartDownloader.
//
//	func TestSomethingThatUsesChartDownloader(t *testing.T) {
//
//		// make and configure a mocked downloader.ChartDownloader
//		mockedChartDownloader := &ChartDownloaderMock{
//			DownloadFunc: func(repoUrl string, chartName string, version string) (*bytes.Buffer, error) {
//				panic("mock out the Download method")
//			},
//		}
//
//		// use mockedChartDownloader in code that requires downloader.ChartDownloader
//		// and then make assertions.
//
//	}
type ChartDownloaderMock struct {
	// DownloadFunc mocks the Download method.
	DownloadFunc func(repoUrl string, chartName string, version string) (*bytes.Buffer, error)

	// calls tracks calls to the methods.
	calls struct {
		// Download holds details about calls to the Download method.
		Download []struct {
			// RepoUrl is the repoUrl argument value.
			RepoUrl string
			// ChartName is the chartName argument value.
			ChartName string
			// Version is the version argument value.
			Version string
		}
	}
	lockDownload sync.RWMutex
}

// Download calls DownloadFunc.
func (mock *ChartDownloaderMock) Download(repoUrl string, chartName string, version string) (*bytes.Buffer, error) {
	if mock.DownloadFunc == nil {
		panic("ChartDownloaderMock.DownloadFunc: method is nil but ChartDownloader.Download was just called")
	}
	callInfo := struct {
		RepoUrl   string
		ChartName string
		Version   string
	}{
		RepoUrl:   repoUrl,
		ChartName: chartName,
		Version:   version,
	}
	mock.lockDownload.Lock()
	mock.calls.Download = append(mock.calls.Download, callInfo)
	mock.lockDownload.Unlock()
	return mock.DownloadFunc(repoUrl, chartName, version)
}

// DownloadCalls gets all the calls that were made to Download.
// Check the length with:
//
//	len(mockedChartDownloader.DownloadCalls())
func (mock *ChartDownloaderMock) DownloadCalls() []struct {
	RepoUrl   string
	ChartName string
	Version   string
} {
	var calls []struct {
		RepoUrl   string
		ChartName string
		Version   string
	}
	mock.lockDownload.RLock()
	calls = mock.calls.Download
	mock.lockDownload.RUnlock()
	return calls
}
