// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	v66github "github.com/google/go-github/v66/github"
	providersgithub "github.com/input-output-hk/catalyst-forge/lib/providers/github"
	"sync"
)

// GithubClientMock is a mock implementation of github.GithubClient.
//
//	func TestSomethingThatUsesGithubClient(t *testing.T) {
//
//		// make and configure a mocked github.GithubClient
//		mockedGithubClient := &GithubClientMock{
//			CreateReleaseFunc: func(opts *v66github.RepositoryRelease) (*v66github.RepositoryRelease, error) {
//				panic("mock out the CreateRelease method")
//			},
//			EnvFunc: func() providersgithub.GithubEnv {
//				panic("mock out the Env method")
//			},
//			GetReleaseByTagFunc: func(tag string) (*v66github.RepositoryRelease, error) {
//				panic("mock out the GetReleaseByTag method")
//			},
//			ListBranchesFunc: func() ([]providersgithub.Branch, error) {
//				panic("mock out the ListBranches method")
//			},
//			ListPullRequestCommentsFunc: func(prNumber int) ([]providersgithub.PullRequestComment, error) {
//				panic("mock out the ListPullRequestComments method")
//			},
//			PostPullRequestCommentFunc: func(prNumber int, body string) error {
//				panic("mock out the PostPullRequestComment method")
//			},
//			UploadReleaseAssetFunc: func(releaseID int64, path string) error {
//				panic("mock out the UploadReleaseAsset method")
//			},
//		}
//
//		// use mockedGithubClient in code that requires github.GithubClient
//		// and then make assertions.
//
//	}
type GithubClientMock struct {
	// CreateReleaseFunc mocks the CreateRelease method.
	CreateReleaseFunc func(opts *v66github.RepositoryRelease) (*v66github.RepositoryRelease, error)

	// EnvFunc mocks the Env method.
	EnvFunc func() providersgithub.GithubEnv

	// GetReleaseByTagFunc mocks the GetReleaseByTag method.
	GetReleaseByTagFunc func(tag string) (*v66github.RepositoryRelease, error)

	// ListBranchesFunc mocks the ListBranches method.
	ListBranchesFunc func() ([]providersgithub.Branch, error)

	// ListPullRequestCommentsFunc mocks the ListPullRequestComments method.
	ListPullRequestCommentsFunc func(prNumber int) ([]providersgithub.PullRequestComment, error)

	// PostPullRequestCommentFunc mocks the PostPullRequestComment method.
	PostPullRequestCommentFunc func(prNumber int, body string) error

	// UploadReleaseAssetFunc mocks the UploadReleaseAsset method.
	UploadReleaseAssetFunc func(releaseID int64, path string) error

	// calls tracks calls to the methods.
	calls struct {
		// CreateRelease holds details about calls to the CreateRelease method.
		CreateRelease []struct {
			// Opts is the opts argument value.
			Opts *v66github.RepositoryRelease
		}
		// Env holds details about calls to the Env method.
		Env []struct {
		}
		// GetReleaseByTag holds details about calls to the GetReleaseByTag method.
		GetReleaseByTag []struct {
			// Tag is the tag argument value.
			Tag string
		}
		// ListBranches holds details about calls to the ListBranches method.
		ListBranches []struct {
		}
		// ListPullRequestComments holds details about calls to the ListPullRequestComments method.
		ListPullRequestComments []struct {
			// PrNumber is the prNumber argument value.
			PrNumber int
		}
		// PostPullRequestComment holds details about calls to the PostPullRequestComment method.
		PostPullRequestComment []struct {
			// PrNumber is the prNumber argument value.
			PrNumber int
			// Body is the body argument value.
			Body string
		}
		// UploadReleaseAsset holds details about calls to the UploadReleaseAsset method.
		UploadReleaseAsset []struct {
			// ReleaseID is the releaseID argument value.
			ReleaseID int64
			// Path is the path argument value.
			Path string
		}
	}
	lockCreateRelease           sync.RWMutex
	lockEnv                     sync.RWMutex
	lockGetReleaseByTag         sync.RWMutex
	lockListBranches            sync.RWMutex
	lockListPullRequestComments sync.RWMutex
	lockPostPullRequestComment  sync.RWMutex
	lockUploadReleaseAsset      sync.RWMutex
}

// CreateRelease calls CreateReleaseFunc.
func (mock *GithubClientMock) CreateRelease(opts *v66github.RepositoryRelease) (*v66github.RepositoryRelease, error) {
	if mock.CreateReleaseFunc == nil {
		panic("GithubClientMock.CreateReleaseFunc: method is nil but GithubClient.CreateRelease was just called")
	}
	callInfo := struct {
		Opts *v66github.RepositoryRelease
	}{
		Opts: opts,
	}
	mock.lockCreateRelease.Lock()
	mock.calls.CreateRelease = append(mock.calls.CreateRelease, callInfo)
	mock.lockCreateRelease.Unlock()
	return mock.CreateReleaseFunc(opts)
}

// CreateReleaseCalls gets all the calls that were made to CreateRelease.
// Check the length with:
//
//	len(mockedGithubClient.CreateReleaseCalls())
func (mock *GithubClientMock) CreateReleaseCalls() []struct {
	Opts *v66github.RepositoryRelease
} {
	var calls []struct {
		Opts *v66github.RepositoryRelease
	}
	mock.lockCreateRelease.RLock()
	calls = mock.calls.CreateRelease
	mock.lockCreateRelease.RUnlock()
	return calls
}

// Env calls EnvFunc.
func (mock *GithubClientMock) Env() providersgithub.GithubEnv {
	if mock.EnvFunc == nil {
		panic("GithubClientMock.EnvFunc: method is nil but GithubClient.Env was just called")
	}
	callInfo := struct {
	}{}
	mock.lockEnv.Lock()
	mock.calls.Env = append(mock.calls.Env, callInfo)
	mock.lockEnv.Unlock()
	return mock.EnvFunc()
}

// EnvCalls gets all the calls that were made to Env.
// Check the length with:
//
//	len(mockedGithubClient.EnvCalls())
func (mock *GithubClientMock) EnvCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockEnv.RLock()
	calls = mock.calls.Env
	mock.lockEnv.RUnlock()
	return calls
}

// GetReleaseByTag calls GetReleaseByTagFunc.
func (mock *GithubClientMock) GetReleaseByTag(tag string) (*v66github.RepositoryRelease, error) {
	if mock.GetReleaseByTagFunc == nil {
		panic("GithubClientMock.GetReleaseByTagFunc: method is nil but GithubClient.GetReleaseByTag was just called")
	}
	callInfo := struct {
		Tag string
	}{
		Tag: tag,
	}
	mock.lockGetReleaseByTag.Lock()
	mock.calls.GetReleaseByTag = append(mock.calls.GetReleaseByTag, callInfo)
	mock.lockGetReleaseByTag.Unlock()
	return mock.GetReleaseByTagFunc(tag)
}

// GetReleaseByTagCalls gets all the calls that were made to GetReleaseByTag.
// Check the length with:
//
//	len(mockedGithubClient.GetReleaseByTagCalls())
func (mock *GithubClientMock) GetReleaseByTagCalls() []struct {
	Tag string
} {
	var calls []struct {
		Tag string
	}
	mock.lockGetReleaseByTag.RLock()
	calls = mock.calls.GetReleaseByTag
	mock.lockGetReleaseByTag.RUnlock()
	return calls
}

// ListBranches calls ListBranchesFunc.
func (mock *GithubClientMock) ListBranches() ([]providersgithub.Branch, error) {
	if mock.ListBranchesFunc == nil {
		panic("GithubClientMock.ListBranchesFunc: method is nil but GithubClient.ListBranches was just called")
	}
	callInfo := struct {
	}{}
	mock.lockListBranches.Lock()
	mock.calls.ListBranches = append(mock.calls.ListBranches, callInfo)
	mock.lockListBranches.Unlock()
	return mock.ListBranchesFunc()
}

// ListBranchesCalls gets all the calls that were made to ListBranches.
// Check the length with:
//
//	len(mockedGithubClient.ListBranchesCalls())
func (mock *GithubClientMock) ListBranchesCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockListBranches.RLock()
	calls = mock.calls.ListBranches
	mock.lockListBranches.RUnlock()
	return calls
}

// ListPullRequestComments calls ListPullRequestCommentsFunc.
func (mock *GithubClientMock) ListPullRequestComments(prNumber int) ([]providersgithub.PullRequestComment, error) {
	if mock.ListPullRequestCommentsFunc == nil {
		panic("GithubClientMock.ListPullRequestCommentsFunc: method is nil but GithubClient.ListPullRequestComments was just called")
	}
	callInfo := struct {
		PrNumber int
	}{
		PrNumber: prNumber,
	}
	mock.lockListPullRequestComments.Lock()
	mock.calls.ListPullRequestComments = append(mock.calls.ListPullRequestComments, callInfo)
	mock.lockListPullRequestComments.Unlock()
	return mock.ListPullRequestCommentsFunc(prNumber)
}

// ListPullRequestCommentsCalls gets all the calls that were made to ListPullRequestComments.
// Check the length with:
//
//	len(mockedGithubClient.ListPullRequestCommentsCalls())
func (mock *GithubClientMock) ListPullRequestCommentsCalls() []struct {
	PrNumber int
} {
	var calls []struct {
		PrNumber int
	}
	mock.lockListPullRequestComments.RLock()
	calls = mock.calls.ListPullRequestComments
	mock.lockListPullRequestComments.RUnlock()
	return calls
}

// PostPullRequestComment calls PostPullRequestCommentFunc.
func (mock *GithubClientMock) PostPullRequestComment(prNumber int, body string) error {
	if mock.PostPullRequestCommentFunc == nil {
		panic("GithubClientMock.PostPullRequestCommentFunc: method is nil but GithubClient.PostPullRequestComment was just called")
	}
	callInfo := struct {
		PrNumber int
		Body     string
	}{
		PrNumber: prNumber,
		Body:     body,
	}
	mock.lockPostPullRequestComment.Lock()
	mock.calls.PostPullRequestComment = append(mock.calls.PostPullRequestComment, callInfo)
	mock.lockPostPullRequestComment.Unlock()
	return mock.PostPullRequestCommentFunc(prNumber, body)
}

// PostPullRequestCommentCalls gets all the calls that were made to PostPullRequestComment.
// Check the length with:
//
//	len(mockedGithubClient.PostPullRequestCommentCalls())
func (mock *GithubClientMock) PostPullRequestCommentCalls() []struct {
	PrNumber int
	Body     string
} {
	var calls []struct {
		PrNumber int
		Body     string
	}
	mock.lockPostPullRequestComment.RLock()
	calls = mock.calls.PostPullRequestComment
	mock.lockPostPullRequestComment.RUnlock()
	return calls
}

// UploadReleaseAsset calls UploadReleaseAssetFunc.
func (mock *GithubClientMock) UploadReleaseAsset(releaseID int64, path string) error {
	if mock.UploadReleaseAssetFunc == nil {
		panic("GithubClientMock.UploadReleaseAssetFunc: method is nil but GithubClient.UploadReleaseAsset was just called")
	}
	callInfo := struct {
		ReleaseID int64
		Path      string
	}{
		ReleaseID: releaseID,
		Path:      path,
	}
	mock.lockUploadReleaseAsset.Lock()
	mock.calls.UploadReleaseAsset = append(mock.calls.UploadReleaseAsset, callInfo)
	mock.lockUploadReleaseAsset.Unlock()
	return mock.UploadReleaseAssetFunc(releaseID, path)
}

// UploadReleaseAssetCalls gets all the calls that were made to UploadReleaseAsset.
// Check the length with:
//
//	len(mockedGithubClient.UploadReleaseAssetCalls())
func (mock *GithubClientMock) UploadReleaseAssetCalls() []struct {
	ReleaseID int64
	Path      string
} {
	var calls []struct {
		ReleaseID int64
		Path      string
	}
	mock.lockUploadReleaseAsset.RLock()
	calls = mock.calls.UploadReleaseAsset
	mock.lockUploadReleaseAsset.RUnlock()
	return calls
}
