// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/aws/aws-sdk-go-v2/service/s3"
	"sync"
)

// AWSS3ClientMock is a mock implementation of aws.AWSS3Client.
//
//	func TestSomethingThatUsesAWSS3Client(t *testing.T) {
//
//		// make and configure a mocked aws.AWSS3Client
//		mockedAWSS3Client := &AWSS3ClientMock{
//			DeleteObjectFunc: func(ctx context.Context, params *s3.DeleteObjectInput, optFns ...func(*s3.Options)) (*s3.DeleteObjectOutput, error) {
//				panic("mock out the DeleteObject method")
//			},
//			ListObjectsV2Func: func(ctx context.Context, params *s3.ListObjectsV2Input, optFns ...func(*s3.Options)) (*s3.ListObjectsV2Output, error) {
//				panic("mock out the ListObjectsV2 method")
//			},
//			PutObjectFunc: func(ctx context.Context, params *s3.PutObjectInput, optFns ...func(*s3.Options)) (*s3.PutObjectOutput, error) {
//				panic("mock out the PutObject method")
//			},
//		}
//
//		// use mockedAWSS3Client in code that requires aws.AWSS3Client
//		// and then make assertions.
//
//	}
type AWSS3ClientMock struct {
	// DeleteObjectFunc mocks the DeleteObject method.
	DeleteObjectFunc func(ctx context.Context, params *s3.DeleteObjectInput, optFns ...func(*s3.Options)) (*s3.DeleteObjectOutput, error)

	// ListObjectsV2Func mocks the ListObjectsV2 method.
	ListObjectsV2Func func(ctx context.Context, params *s3.ListObjectsV2Input, optFns ...func(*s3.Options)) (*s3.ListObjectsV2Output, error)

	// PutObjectFunc mocks the PutObject method.
	PutObjectFunc func(ctx context.Context, params *s3.PutObjectInput, optFns ...func(*s3.Options)) (*s3.PutObjectOutput, error)

	// calls tracks calls to the methods.
	calls struct {
		// DeleteObject holds details about calls to the DeleteObject method.
		DeleteObject []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.DeleteObjectInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// ListObjectsV2 holds details about calls to the ListObjectsV2 method.
		ListObjectsV2 []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.ListObjectsV2Input
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// PutObject holds details about calls to the PutObject method.
		PutObject []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.PutObjectInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
	}
	lockDeleteObject  sync.RWMutex
	lockListObjectsV2 sync.RWMutex
	lockPutObject     sync.RWMutex
}

// DeleteObject calls DeleteObjectFunc.
func (mock *AWSS3ClientMock) DeleteObject(ctx context.Context, params *s3.DeleteObjectInput, optFns ...func(*s3.Options)) (*s3.DeleteObjectOutput, error) {
	if mock.DeleteObjectFunc == nil {
		panic("AWSS3ClientMock.DeleteObjectFunc: method is nil but AWSS3Client.DeleteObject was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.DeleteObjectInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteObject.Lock()
	mock.calls.DeleteObject = append(mock.calls.DeleteObject, callInfo)
	mock.lockDeleteObject.Unlock()
	return mock.DeleteObjectFunc(ctx, params, optFns...)
}

// DeleteObjectCalls gets all the calls that were made to DeleteObject.
// Check the length with:
//
//	len(mockedAWSS3Client.DeleteObjectCalls())
func (mock *AWSS3ClientMock) DeleteObjectCalls() []struct {
	Ctx    context.Context
	Params *s3.DeleteObjectInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.DeleteObjectInput
		OptFns []func(*s3.Options)
	}
	mock.lockDeleteObject.RLock()
	calls = mock.calls.DeleteObject
	mock.lockDeleteObject.RUnlock()
	return calls
}

// ListObjectsV2 calls ListObjectsV2Func.
func (mock *AWSS3ClientMock) ListObjectsV2(ctx context.Context, params *s3.ListObjectsV2Input, optFns ...func(*s3.Options)) (*s3.ListObjectsV2Output, error) {
	if mock.ListObjectsV2Func == nil {
		panic("AWSS3ClientMock.ListObjectsV2Func: method is nil but AWSS3Client.ListObjectsV2 was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.ListObjectsV2Input
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockListObjectsV2.Lock()
	mock.calls.ListObjectsV2 = append(mock.calls.ListObjectsV2, callInfo)
	mock.lockListObjectsV2.Unlock()
	return mock.ListObjectsV2Func(ctx, params, optFns...)
}

// ListObjectsV2Calls gets all the calls that were made to ListObjectsV2.
// Check the length with:
//
//	len(mockedAWSS3Client.ListObjectsV2Calls())
func (mock *AWSS3ClientMock) ListObjectsV2Calls() []struct {
	Ctx    context.Context
	Params *s3.ListObjectsV2Input
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.ListObjectsV2Input
		OptFns []func(*s3.Options)
	}
	mock.lockListObjectsV2.RLock()
	calls = mock.calls.ListObjectsV2
	mock.lockListObjectsV2.RUnlock()
	return calls
}

// PutObject calls PutObjectFunc.
func (mock *AWSS3ClientMock) PutObject(ctx context.Context, params *s3.PutObjectInput, optFns ...func(*s3.Options)) (*s3.PutObjectOutput, error) {
	if mock.PutObjectFunc == nil {
		panic("AWSS3ClientMock.PutObjectFunc: method is nil but AWSS3Client.PutObject was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.PutObjectInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockPutObject.Lock()
	mock.calls.PutObject = append(mock.calls.PutObject, callInfo)
	mock.lockPutObject.Unlock()
	return mock.PutObjectFunc(ctx, params, optFns...)
}

// PutObjectCalls gets all the calls that were made to PutObject.
// Check the length with:
//
//	len(mockedAWSS3Client.PutObjectCalls())
func (mock *AWSS3ClientMock) PutObjectCalls() []struct {
	Ctx    context.Context
	Params *s3.PutObjectInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.PutObjectInput
		OptFns []func(*s3.Options)
	}
	mock.lockPutObject.RLock()
	calls = mock.calls.PutObject
	mock.lockPutObject.RUnlock()
	return calls
}
