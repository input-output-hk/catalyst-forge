// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"cuelang.org/go/cue"
	"github.com/input-output-hk/catalyst-forge/lib/project/injector"
	"sync"
)

// BlueprintInjectorMapMock is a mock implementation of injector.BlueprintInjectorMap.
//
//	func TestSomethingThatUsesBlueprintInjectorMap(t *testing.T) {
//
//		// make and configure a mocked injector.BlueprintInjectorMap
//		mockedBlueprintInjectorMap := &BlueprintInjectorMapMock{
//			GetFunc: func(ctx *cue.Context, name string, attrType injector.AttrType) (cue.Value, error) {
//				panic("mock out the Get method")
//			},
//		}
//
//		// use mockedBlueprintInjectorMap in code that requires injector.BlueprintInjectorMap
//		// and then make assertions.
//
//	}
type BlueprintInjectorMapMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(ctx *cue.Context, name string, attrType injector.AttrType) (cue.Value, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Ctx is the ctx argument value.
			Ctx *cue.Context
			// Name is the name argument value.
			Name string
			// AttrType is the attrType argument value.
			AttrType injector.AttrType
		}
	}
	lockGet sync.RWMutex
}

// Get calls GetFunc.
func (mock *BlueprintInjectorMapMock) Get(ctx *cue.Context, name string, attrType injector.AttrType) (cue.Value, error) {
	if mock.GetFunc == nil {
		panic("BlueprintInjectorMapMock.GetFunc: method is nil but BlueprintInjectorMap.Get was just called")
	}
	callInfo := struct {
		Ctx      *cue.Context
		Name     string
		AttrType injector.AttrType
	}{
		Ctx:      ctx,
		Name:     name,
		AttrType: attrType,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(ctx, name, attrType)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//
//	len(mockedBlueprintInjectorMap.GetCalls())
func (mock *BlueprintInjectorMapMock) GetCalls() []struct {
	Ctx      *cue.Context
	Name     string
	AttrType injector.AttrType
} {
	var calls []struct {
		Ctx      *cue.Context
		Name     string
		AttrType injector.AttrType
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}
