// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/input-output-hk/catalyst-forge/lib/project/pkg/project"
	"sync"
)

// ProjectLoaderMock is a mock implementation of project.ProjectLoader.
//
//	func TestSomethingThatUsesProjectLoader(t *testing.T) {
//
//		// make and configure a mocked project.ProjectLoader
//		mockedProjectLoader := &ProjectLoaderMock{
//			LoadFunc: func(projectPath string) (project.Project, error) {
//				panic("mock out the Load method")
//			},
//		}
//
//		// use mockedProjectLoader in code that requires project.ProjectLoader
//		// and then make assertions.
//
//	}
type ProjectLoaderMock struct {
	// LoadFunc mocks the Load method.
	LoadFunc func(projectPath string) (project.Project, error)

	// calls tracks calls to the methods.
	calls struct {
		// Load holds details about calls to the Load method.
		Load []struct {
			// ProjectPath is the projectPath argument value.
			ProjectPath string
		}
	}
	lockLoad sync.RWMutex
}

// Load calls LoadFunc.
func (mock *ProjectLoaderMock) Load(projectPath string) (project.Project, error) {
	if mock.LoadFunc == nil {
		panic("ProjectLoaderMock.LoadFunc: method is nil but ProjectLoader.Load was just called")
	}
	callInfo := struct {
		ProjectPath string
	}{
		ProjectPath: projectPath,
	}
	mock.lockLoad.Lock()
	mock.calls.Load = append(mock.calls.Load, callInfo)
	mock.lockLoad.Unlock()
	return mock.LoadFunc(projectPath)
}

// LoadCalls gets all the calls that were made to Load.
// Check the length with:
//
//	len(mockedProjectLoader.LoadCalls())
func (mock *ProjectLoaderMock) LoadCalls() []struct {
	ProjectPath string
} {
	var calls []struct {
		ProjectPath string
	}
	mock.lockLoad.RLock()
	calls = mock.calls.Load
	mock.lockLoad.RUnlock()
	return calls
}
