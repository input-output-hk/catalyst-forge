// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/input-output-hk/catalyst-forge/lib/schema/blueprint/project"
	"sync"
)

// ManifestGeneratorMock is a mock implementation of deployment.ManifestGenerator.
//
//	func TestSomethingThatUsesManifestGenerator(t *testing.T) {
//
//		// make and configure a mocked deployment.ManifestGenerator
//		mockedManifestGenerator := &ManifestGeneratorMock{
//			GenerateFunc: func(mod schema.DeploymentModule) ([]byte, error) {
//				panic("mock out the Generate method")
//			},
//		}
//
//		// use mockedManifestGenerator in code that requires deployment.ManifestGenerator
//		// and then make assertions.
//
//	}
type ManifestGeneratorMock struct {
	// GenerateFunc mocks the Generate method.
	GenerateFunc func(mod project.Module) ([]byte, error)

	// calls tracks calls to the methods.
	calls struct {
		// Generate holds details about calls to the Generate method.
		Generate []struct {
			// Mod is the mod argument value.
			Mod project.Module
		}
	}
	lockGenerate sync.RWMutex
}

// Generate calls GenerateFunc.
func (mock *ManifestGeneratorMock) Generate(mod project.Module) ([]byte, error) {
	if mock.GenerateFunc == nil {
		panic("ManifestGeneratorMock.GenerateFunc: method is nil but ManifestGenerator.Generate was just called")
	}
	callInfo := struct {
		Mod project.Module
	}{
		Mod: mod,
	}
	mock.lockGenerate.Lock()
	mock.calls.Generate = append(mock.calls.Generate, callInfo)
	mock.lockGenerate.Unlock()
	return mock.GenerateFunc(mod)
}

// GenerateCalls gets all the calls that were made to Generate.
// Check the length with:
//
//	len(mockedManifestGenerator.GenerateCalls())
func (mock *ManifestGeneratorMock) GenerateCalls() []struct {
	Mod project.Module
} {
	var calls []struct {
		Mod project.Module
	}
	mock.lockGenerate.RLock()
	calls = mock.calls.Generate
	mock.lockGenerate.RUnlock()
	return calls
}
