// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/input-output-hk/catalyst-forge/lib/project/secrets"
	"sync"
)

// Ensure, that SecretProviderMock does implement secrets.SecretProvider.
// If this is not the case, regenerate this file with moq.
var _ secrets.SecretProvider = &SecretProviderMock{}

// SecretProviderMock is a mock implementation of secrets.SecretProvider.
//
//	func TestSomethingThatUsesSecretProvider(t *testing.T) {
//
//		// make and configure a mocked secrets.SecretProvider
//		mockedSecretProvider := &SecretProviderMock{
//			GetFunc: func(key string) (string, error) {
//				panic("mock out the Get method")
//			},
//			SetFunc: func(key string, value string) (string, error) {
//				panic("mock out the Set method")
//			},
//		}
//
//		// use mockedSecretProvider in code that requires secrets.SecretProvider
//		// and then make assertions.
//
//	}
type SecretProviderMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(key string) (string, error)

	// SetFunc mocks the Set method.
	SetFunc func(key string, value string) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Key is the key argument value.
			Key string
		}
		// Set holds details about calls to the Set method.
		Set []struct {
			// Key is the key argument value.
			Key string
			// Value is the value argument value.
			Value string
		}
	}
	lockGet sync.RWMutex
	lockSet sync.RWMutex
}

// Get calls GetFunc.
func (mock *SecretProviderMock) Get(key string) (string, error) {
	if mock.GetFunc == nil {
		panic("SecretProviderMock.GetFunc: method is nil but SecretProvider.Get was just called")
	}
	callInfo := struct {
		Key string
	}{
		Key: key,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(key)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//
//	len(mockedSecretProvider.GetCalls())
func (mock *SecretProviderMock) GetCalls() []struct {
	Key string
} {
	var calls []struct {
		Key string
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// Set calls SetFunc.
func (mock *SecretProviderMock) Set(key string, value string) (string, error) {
	if mock.SetFunc == nil {
		panic("SecretProviderMock.SetFunc: method is nil but SecretProvider.Set was just called")
	}
	callInfo := struct {
		Key   string
		Value string
	}{
		Key:   key,
		Value: value,
	}
	mock.lockSet.Lock()
	mock.calls.Set = append(mock.calls.Set, callInfo)
	mock.lockSet.Unlock()
	return mock.SetFunc(key, value)
}

// SetCalls gets all the calls that were made to Set.
// Check the length with:
//
//	len(mockedSecretProvider.SetCalls())
func (mock *SecretProviderMock) SetCalls() []struct {
	Key   string
	Value string
} {
	var calls []struct {
		Key   string
		Value string
	}
	mock.lockSet.RLock()
	calls = mock.calls.Set
	mock.lockSet.RUnlock()
	return calls
}
