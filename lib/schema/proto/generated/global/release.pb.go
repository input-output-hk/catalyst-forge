// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: global/release.proto

package global

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Release contains the configuration for the release of a project.
type Release struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Docs is the configuration for the docs release type.
	Docs          *DocsRelease `protobuf:"bytes,1,opt,name=docs,proto3" json:"docs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Release) Reset() {
	*x = Release{}
	mi := &file_global_release_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Release) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Release) ProtoMessage() {}

func (x *Release) ProtoReflect() protoreflect.Message {
	mi := &file_global_release_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Release.ProtoReflect.Descriptor instead.
func (*Release) Descriptor() ([]byte, []int) {
	return file_global_release_proto_rawDescGZIP(), []int{0}
}

func (x *Release) GetDocs() *DocsRelease {
	if x != nil {
		return x.Docs
	}
	return nil
}

// DocsRelease contains the configuration for the docs release type.
type DocsRelease struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Bucket is the name of the S3 bucket to upload the docs to.
	Bucket string `protobuf:"bytes,1,opt,name=bucket,proto3" json:"bucket,omitempty"`
	// Path is the subpath within the bucket to upload the docs to.
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// URL is the base URL to the docs.
	Url           string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DocsRelease) Reset() {
	*x = DocsRelease{}
	mi := &file_global_release_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DocsRelease) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocsRelease) ProtoMessage() {}

func (x *DocsRelease) ProtoReflect() protoreflect.Message {
	mi := &file_global_release_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocsRelease.ProtoReflect.Descriptor instead.
func (*DocsRelease) Descriptor() ([]byte, []int) {
	return file_global_release_proto_rawDescGZIP(), []int{1}
}

func (x *DocsRelease) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *DocsRelease) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *DocsRelease) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

var File_global_release_proto protoreflect.FileDescriptor

const file_global_release_proto_rawDesc = "" +
	"\n" +
	"\x14global/release.proto\x12\x06global\"2\n" +
	"\aRelease\x12'\n" +
	"\x04docs\x18\x01 \x01(\v2\x13.global.DocsReleaseR\x04docs\"K\n" +
	"\vDocsRelease\x12\x16\n" +
	"\x06bucket\x18\x01 \x01(\tR\x06bucket\x12\x12\n" +
	"\x04path\x18\x02 \x01(\tR\x04path\x12\x10\n" +
	"\x03url\x18\x03 \x01(\tR\x03urlBMZKgithub.com/input-output-hk/catalyst-forge/lib/schema/proto/generated/globalb\x06proto3"

var (
	file_global_release_proto_rawDescOnce sync.Once
	file_global_release_proto_rawDescData []byte
)

func file_global_release_proto_rawDescGZIP() []byte {
	file_global_release_proto_rawDescOnce.Do(func() {
		file_global_release_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_global_release_proto_rawDesc), len(file_global_release_proto_rawDesc)))
	})
	return file_global_release_proto_rawDescData
}

var file_global_release_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_global_release_proto_goTypes = []any{
	(*Release)(nil),     // 0: global.Release
	(*DocsRelease)(nil), // 1: global.DocsRelease
}
var file_global_release_proto_depIdxs = []int32{
	1, // 0: global.Release.docs:type_name -> global.DocsRelease
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_global_release_proto_init() }
func file_global_release_proto_init() {
	if File_global_release_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_global_release_proto_rawDesc), len(file_global_release_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_global_release_proto_goTypes,
		DependencyIndexes: file_global_release_proto_depIdxs,
		MessageInfos:      file_global_release_proto_msgTypes,
	}.Build()
	File_global_release_proto = out.File
	file_global_release_proto_goTypes = nil
	file_global_release_proto_depIdxs = nil
}
