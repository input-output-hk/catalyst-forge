// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: project/deployment.proto

package project

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Deployment contains the configuration for the deployment of the project.
type Deployment struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// On contains the events that trigger the deployment.
	On map[string][]byte `protobuf:"bytes,1,rep,name=on,proto3" json:"on,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Bundle contains the deployment modules for the project.
	Bundle        *ModuleBundle `protobuf:"bytes,2,opt,name=bundle,proto3" json:"bundle,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Deployment) Reset() {
	*x = Deployment{}
	mi := &file_project_deployment_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Deployment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deployment) ProtoMessage() {}

func (x *Deployment) ProtoReflect() protoreflect.Message {
	mi := &file_project_deployment_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deployment.ProtoReflect.Descriptor instead.
func (*Deployment) Descriptor() ([]byte, []int) {
	return file_project_deployment_proto_rawDescGZIP(), []int{0}
}

func (x *Deployment) GetOn() map[string][]byte {
	if x != nil {
		return x.On
	}
	return nil
}

func (x *Deployment) GetBundle() *ModuleBundle {
	if x != nil {
		return x.Bundle
	}
	return nil
}

// ModuleBundle contains the configuration for deployment modules.
type ModuleBundle struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Env contains the environment to deploy the modules to.
	Env string `protobuf:"bytes,1,opt,name=env,proto3" json:"env,omitempty"`
	// Modules contains the deployment modules.
	Modules       map[string]*Module `protobuf:"bytes,2,rep,name=modules,proto3" json:"modules,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ModuleBundle) Reset() {
	*x = ModuleBundle{}
	mi := &file_project_deployment_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModuleBundle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleBundle) ProtoMessage() {}

func (x *ModuleBundle) ProtoReflect() protoreflect.Message {
	mi := &file_project_deployment_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleBundle.ProtoReflect.Descriptor instead.
func (*ModuleBundle) Descriptor() ([]byte, []int) {
	return file_project_deployment_proto_rawDescGZIP(), []int{1}
}

func (x *ModuleBundle) GetEnv() string {
	if x != nil {
		return x.Env
	}
	return ""
}

func (x *ModuleBundle) GetModules() map[string]*Module {
	if x != nil {
		return x.Modules
	}
	return nil
}

// Module contains the configuration for a deployment module.
type Module struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Instance contains the instance name to use for all generated resources.
	Instance string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// Name contains the name of the module to deploy.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Namespace contains the namespace to deploy the module to.
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Path contains the path to the module.
	Path string `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
	// Registry contains the registry to pull the module from.
	Registry string `protobuf:"bytes,5,opt,name=registry,proto3" json:"registry,omitempty"`
	// Type contains the type of the module.
	Type string `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	// Values contains the values to pass to the deployment module.
	Values []byte `protobuf:"bytes,7,opt,name=values,proto3" json:"values,omitempty"`
	// Version contains the version of the deployment module.
	Version       string `protobuf:"bytes,8,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Module) Reset() {
	*x = Module{}
	mi := &file_project_deployment_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Module) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Module) ProtoMessage() {}

func (x *Module) ProtoReflect() protoreflect.Message {
	mi := &file_project_deployment_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Module.ProtoReflect.Descriptor instead.
func (*Module) Descriptor() ([]byte, []int) {
	return file_project_deployment_proto_rawDescGZIP(), []int{2}
}

func (x *Module) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *Module) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Module) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *Module) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Module) GetRegistry() string {
	if x != nil {
		return x.Registry
	}
	return ""
}

func (x *Module) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Module) GetValues() []byte {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *Module) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

var File_project_deployment_proto protoreflect.FileDescriptor

const file_project_deployment_proto_rawDesc = "" +
	"\n" +
	"\x18project/deployment.proto\x12\aproject\"\x9f\x01\n" +
	"\n" +
	"Deployment\x12+\n" +
	"\x02on\x18\x01 \x03(\v2\x1b.project.Deployment.OnEntryR\x02on\x12-\n" +
	"\x06bundle\x18\x02 \x01(\v2\x15.project.ModuleBundleR\x06bundle\x1a5\n" +
	"\aOnEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\fR\x05value:\x028\x01\"\xab\x01\n" +
	"\fModuleBundle\x12\x10\n" +
	"\x03env\x18\x01 \x01(\tR\x03env\x12<\n" +
	"\amodules\x18\x02 \x03(\v2\".project.ModuleBundle.ModulesEntryR\amodules\x1aK\n" +
	"\fModulesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12%\n" +
	"\x05value\x18\x02 \x01(\v2\x0f.project.ModuleR\x05value:\x028\x01\"\xcc\x01\n" +
	"\x06Module\x12\x1a\n" +
	"\binstance\x18\x01 \x01(\tR\binstance\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x1c\n" +
	"\tnamespace\x18\x03 \x01(\tR\tnamespace\x12\x12\n" +
	"\x04path\x18\x04 \x01(\tR\x04path\x12\x1a\n" +
	"\bregistry\x18\x05 \x01(\tR\bregistry\x12\x12\n" +
	"\x04type\x18\x06 \x01(\tR\x04type\x12\x16\n" +
	"\x06values\x18\a \x01(\fR\x06values\x12\x18\n" +
	"\aversion\x18\b \x01(\tR\aversionBNZLgithub.com/input-output-hk/catalyst-forge/lib/schema/proto/generated/projectb\x06proto3"

var (
	file_project_deployment_proto_rawDescOnce sync.Once
	file_project_deployment_proto_rawDescData []byte
)

func file_project_deployment_proto_rawDescGZIP() []byte {
	file_project_deployment_proto_rawDescOnce.Do(func() {
		file_project_deployment_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_project_deployment_proto_rawDesc), len(file_project_deployment_proto_rawDesc)))
	})
	return file_project_deployment_proto_rawDescData
}

var file_project_deployment_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_project_deployment_proto_goTypes = []any{
	(*Deployment)(nil),   // 0: project.Deployment
	(*ModuleBundle)(nil), // 1: project.ModuleBundle
	(*Module)(nil),       // 2: project.Module
	nil,                  // 3: project.Deployment.OnEntry
	nil,                  // 4: project.ModuleBundle.ModulesEntry
}
var file_project_deployment_proto_depIdxs = []int32{
	3, // 0: project.Deployment.on:type_name -> project.Deployment.OnEntry
	1, // 1: project.Deployment.bundle:type_name -> project.ModuleBundle
	4, // 2: project.ModuleBundle.modules:type_name -> project.ModuleBundle.ModulesEntry
	2, // 3: project.ModuleBundle.ModulesEntry.value:type_name -> project.Module
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_project_deployment_proto_init() }
func file_project_deployment_proto_init() {
	if File_project_deployment_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_project_deployment_proto_rawDesc), len(file_project_deployment_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_deployment_proto_goTypes,
		DependencyIndexes: file_project_deployment_proto_depIdxs,
		MessageInfos:      file_project_deployment_proto_msgTypes,
	}.Build()
	File_project_deployment_proto = out.File
	file_project_deployment_proto_goTypes = nil
	file_project_deployment_proto_depIdxs = nil
}
