// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/input-output-hk/catalyst-forge/tools/pkg/walker"
	"io/fs"
	"sync"
)

// Ensure, that FileSeekerMock does implement walker.FileSeeker.
// If this is not the case, regenerate this file with moq.
var _ walker.FileSeeker = &FileSeekerMock{}

// FileSeekerMock is a mock implementation of walker.FileSeeker.
//
//	func TestSomethingThatUsesFileSeeker(t *testing.T) {
//
//		// make and configure a mocked walker.FileSeeker
//		mockedFileSeeker := &FileSeekerMock{
//			CloseFunc: func() error {
//				panic("mock out the Close method")
//			},
//			ReadFunc: func(bytes []byte) (int, error) {
//				panic("mock out the Read method")
//			},
//			SeekFunc: func(offset int64, whence int) (int64, error) {
//				panic("mock out the Seek method")
//			},
//			StatFunc: func() (fs.FileInfo, error) {
//				panic("mock out the Stat method")
//			},
//		}
//
//		// use mockedFileSeeker in code that requires walker.FileSeeker
//		// and then make assertions.
//
//	}
type FileSeekerMock struct {
	// CloseFunc mocks the Close method.
	CloseFunc func() error

	// ReadFunc mocks the Read method.
	ReadFunc func(bytes []byte) (int, error)

	// SeekFunc mocks the Seek method.
	SeekFunc func(offset int64, whence int) (int64, error)

	// StatFunc mocks the Stat method.
	StatFunc func() (fs.FileInfo, error)

	// calls tracks calls to the methods.
	calls struct {
		// Close holds details about calls to the Close method.
		Close []struct {
		}
		// Read holds details about calls to the Read method.
		Read []struct {
			// Bytes is the bytes argument value.
			Bytes []byte
		}
		// Seek holds details about calls to the Seek method.
		Seek []struct {
			// Offset is the offset argument value.
			Offset int64
			// Whence is the whence argument value.
			Whence int
		}
		// Stat holds details about calls to the Stat method.
		Stat []struct {
		}
	}
	lockClose sync.RWMutex
	lockRead  sync.RWMutex
	lockSeek  sync.RWMutex
	lockStat  sync.RWMutex
}

// Close calls CloseFunc.
func (mock *FileSeekerMock) Close() error {
	if mock.CloseFunc == nil {
		panic("FileSeekerMock.CloseFunc: method is nil but FileSeeker.Close was just called")
	}
	callInfo := struct {
	}{}
	mock.lockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	mock.lockClose.Unlock()
	return mock.CloseFunc()
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//
//	len(mockedFileSeeker.CloseCalls())
func (mock *FileSeekerMock) CloseCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockClose.RLock()
	calls = mock.calls.Close
	mock.lockClose.RUnlock()
	return calls
}

// Read calls ReadFunc.
func (mock *FileSeekerMock) Read(bytes []byte) (int, error) {
	if mock.ReadFunc == nil {
		panic("FileSeekerMock.ReadFunc: method is nil but FileSeeker.Read was just called")
	}
	callInfo := struct {
		Bytes []byte
	}{
		Bytes: bytes,
	}
	mock.lockRead.Lock()
	mock.calls.Read = append(mock.calls.Read, callInfo)
	mock.lockRead.Unlock()
	return mock.ReadFunc(bytes)
}

// ReadCalls gets all the calls that were made to Read.
// Check the length with:
//
//	len(mockedFileSeeker.ReadCalls())
func (mock *FileSeekerMock) ReadCalls() []struct {
	Bytes []byte
} {
	var calls []struct {
		Bytes []byte
	}
	mock.lockRead.RLock()
	calls = mock.calls.Read
	mock.lockRead.RUnlock()
	return calls
}

// Seek calls SeekFunc.
func (mock *FileSeekerMock) Seek(offset int64, whence int) (int64, error) {
	if mock.SeekFunc == nil {
		panic("FileSeekerMock.SeekFunc: method is nil but FileSeeker.Seek was just called")
	}
	callInfo := struct {
		Offset int64
		Whence int
	}{
		Offset: offset,
		Whence: whence,
	}
	mock.lockSeek.Lock()
	mock.calls.Seek = append(mock.calls.Seek, callInfo)
	mock.lockSeek.Unlock()
	return mock.SeekFunc(offset, whence)
}

// SeekCalls gets all the calls that were made to Seek.
// Check the length with:
//
//	len(mockedFileSeeker.SeekCalls())
func (mock *FileSeekerMock) SeekCalls() []struct {
	Offset int64
	Whence int
} {
	var calls []struct {
		Offset int64
		Whence int
	}
	mock.lockSeek.RLock()
	calls = mock.calls.Seek
	mock.lockSeek.RUnlock()
	return calls
}

// Stat calls StatFunc.
func (mock *FileSeekerMock) Stat() (fs.FileInfo, error) {
	if mock.StatFunc == nil {
		panic("FileSeekerMock.StatFunc: method is nil but FileSeeker.Stat was just called")
	}
	callInfo := struct {
	}{}
	mock.lockStat.Lock()
	mock.calls.Stat = append(mock.calls.Stat, callInfo)
	mock.lockStat.Unlock()
	return mock.StatFunc()
}

// StatCalls gets all the calls that were made to Stat.
// Check the length with:
//
//	len(mockedFileSeeker.StatCalls())
func (mock *FileSeekerMock) StatCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockStat.RLock()
	calls = mock.calls.Stat
	mock.lockStat.RUnlock()
	return calls
}
