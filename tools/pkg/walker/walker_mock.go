// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package walker

import (
	"sync"
)

// Ensure, that ReverseWalkerMock does implement ReverseWalker.
// If this is not the case, regenerate this file with moq.
var _ ReverseWalker = &ReverseWalkerMock{}

// ReverseWalkerMock is a mock implementation of ReverseWalker.
//
//	func TestSomethingThatUsesReverseWalker(t *testing.T) {
//
//		// make and configure a mocked ReverseWalker
//		mockedReverseWalker := &ReverseWalkerMock{
//			WalkFunc: func(startPath string, endPath string, callback WalkerCallback) error {
//				panic("mock out the Walk method")
//			},
//		}
//
//		// use mockedReverseWalker in code that requires ReverseWalker
//		// and then make assertions.
//
//	}
type ReverseWalkerMock struct {
	// WalkFunc mocks the Walk method.
	WalkFunc func(startPath string, endPath string, callback WalkerCallback) error

	// calls tracks calls to the methods.
	calls struct {
		// Walk holds details about calls to the Walk method.
		Walk []struct {
			// StartPath is the startPath argument value.
			StartPath string
			// EndPath is the endPath argument value.
			EndPath string
			// Callback is the callback argument value.
			Callback WalkerCallback
		}
	}
	lockWalk sync.RWMutex
}

// Walk calls WalkFunc.
func (mock *ReverseWalkerMock) Walk(startPath string, endPath string, callback WalkerCallback) error {
	if mock.WalkFunc == nil {
		panic("ReverseWalkerMock.WalkFunc: method is nil but ReverseWalker.Walk was just called")
	}
	callInfo := struct {
		StartPath string
		EndPath   string
		Callback  WalkerCallback
	}{
		StartPath: startPath,
		EndPath:   endPath,
		Callback:  callback,
	}
	mock.lockWalk.Lock()
	mock.calls.Walk = append(mock.calls.Walk, callInfo)
	mock.lockWalk.Unlock()
	return mock.WalkFunc(startPath, endPath, callback)
}

// WalkCalls gets all the calls that were made to Walk.
// Check the length with:
//
//	len(mockedReverseWalker.WalkCalls())
func (mock *ReverseWalkerMock) WalkCalls() []struct {
	StartPath string
	EndPath   string
	Callback  WalkerCallback
} {
	var calls []struct {
		StartPath string
		EndPath   string
		Callback  WalkerCallback
	}
	mock.lockWalk.RLock()
	calls = mock.calls.Walk
	mock.lockWalk.RUnlock()
	return calls
}
