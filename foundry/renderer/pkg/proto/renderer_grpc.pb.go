// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: renderer.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RendererService_RenderManifests_FullMethodName = "/renderer.RendererService/RenderManifests"
	RendererService_HealthCheck_FullMethodName     = "/renderer.RendererService/HealthCheck"
)

// RendererServiceClient is the client API for RendererService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// RendererService provides manifest generation from deployment bundles
type RendererServiceClient interface {
	// RenderManifests takes a deployment bundle and returns rendered YAML manifests
	RenderManifests(ctx context.Context, in *RenderManifeststRequest, opts ...grpc.CallOption) (*RenderManifestsResponse, error)
	// HealthCheck provides a health check endpoint
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type rendererServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRendererServiceClient(cc grpc.ClientConnInterface) RendererServiceClient {
	return &rendererServiceClient{cc}
}

func (c *rendererServiceClient) RenderManifests(ctx context.Context, in *RenderManifeststRequest, opts ...grpc.CallOption) (*RenderManifestsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RenderManifestsResponse)
	err := c.cc.Invoke(ctx, RendererService_RenderManifests_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rendererServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, RendererService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RendererServiceServer is the server API for RendererService service.
// All implementations must embed UnimplementedRendererServiceServer
// for forward compatibility.
//
// RendererService provides manifest generation from deployment bundles
type RendererServiceServer interface {
	// RenderManifests takes a deployment bundle and returns rendered YAML manifests
	RenderManifests(context.Context, *RenderManifeststRequest) (*RenderManifestsResponse, error)
	// HealthCheck provides a health check endpoint
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	mustEmbedUnimplementedRendererServiceServer()
}

// UnimplementedRendererServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRendererServiceServer struct{}

func (UnimplementedRendererServiceServer) RenderManifests(context.Context, *RenderManifeststRequest) (*RenderManifestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenderManifests not implemented")
}
func (UnimplementedRendererServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedRendererServiceServer) mustEmbedUnimplementedRendererServiceServer() {}
func (UnimplementedRendererServiceServer) testEmbeddedByValue()                         {}

// UnsafeRendererServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RendererServiceServer will
// result in compilation errors.
type UnsafeRendererServiceServer interface {
	mustEmbedUnimplementedRendererServiceServer()
}

func RegisterRendererServiceServer(s grpc.ServiceRegistrar, srv RendererServiceServer) {
	// If the following call pancis, it indicates UnimplementedRendererServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RendererService_ServiceDesc, srv)
}

func _RendererService_RenderManifests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenderManifeststRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RendererServiceServer).RenderManifests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RendererService_RenderManifests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RendererServiceServer).RenderManifests(ctx, req.(*RenderManifeststRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RendererService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RendererServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RendererService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RendererServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RendererService_ServiceDesc is the grpc.ServiceDesc for RendererService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RendererService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "renderer.RendererService",
	HandlerType: (*RendererServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RenderManifests",
			Handler:    _RendererService_RenderManifests_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _RendererService_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "renderer.proto",
}
