basePath: /
definitions:
  handlers.AddEventRequest:
    properties:
      message:
        type: string
      name:
        type: string
    required:
    - message
    - name
    type: object
  handlers.ChallengeRequest:
    properties:
      email:
        type: string
      kid:
        type: string
    required:
    - email
    - kid
    type: object
  handlers.ChallengeResponse:
    properties:
      token:
        type: string
    type: object
  handlers.CreateAliasRequest:
    properties:
      release_id:
        type: string
    required:
    - release_id
    type: object
  handlers.CreateAuthRequest:
    type: object
  handlers.CreateReleaseRequest:
    properties:
      bundle:
        type: string
      project:
        type: string
      project_path:
        type: string
      source_branch:
        type: string
      source_commit:
        type: string
      source_repo:
        type: string
    required:
    - bundle
    - project
    - project_path
    - source_commit
    - source_repo
    type: object
  handlers.GithubRepositoryAuthResponse:
    properties:
      created_at:
        type: string
      created_by:
        type: string
      description:
        type: string
      enabled:
        type: boolean
      id:
        type: integer
      permissions:
        items:
          type: string
        type: array
      repository:
        type: string
      updated_at:
        type: string
      updated_by:
        type: string
    type: object
  handlers.LoginRequest:
    properties:
      signature:
        type: string
      token:
        type: string
    type: object
  handlers.LoginResponse:
    properties:
      token:
        type: string
    type: object
  handlers.UpdateAuthRequest:
    type: object
  handlers.UpdateReleaseRequest:
    properties:
      bundle:
        type: string
      project_path:
        type: string
      source_branch:
        type: string
      source_commit:
        type: string
      source_repo:
        type: string
    type: object
  handlers.ValidateTokenRequest:
    properties:
      audience:
        type: string
      token:
        type: string
    required:
    - token
    type: object
  handlers.ValidateTokenResponse:
    properties:
      expires_at:
        type: string
      token:
        type: string
      user_id:
        type: string
    type: object
  internal_api_handlers_user.Role:
    description: Role represents a role in the system
    properties:
      created_at:
        example: "2023-01-01T00:00:00Z"
        type: string
      id:
        example: 1
        type: integer
      name:
        example: admin
        type: string
      permissions:
        example:
        - user:read
        - user:write
        items:
          type: string
        type: array
      updated_at:
        example: "2023-01-01T00:00:00Z"
        type: string
    type: object
  internal_api_handlers_user.User:
    description: User represents a user in the system
    properties:
      created_at:
        example: "2023-01-01T00:00:00Z"
        type: string
      email:
        example: user@example.com
        type: string
      id:
        example: 123
        type: integer
      status:
        example: active
        type: string
      updated_at:
        example: "2023-01-01T00:00:00Z"
        type: string
    type: object
  internal_api_handlers_user.UserRole:
    description: UserRole represents a many-to-many relationship between users and
      roles
    properties:
      created_at:
        example: "2023-01-01T00:00:00Z"
        type: string
      id:
        example: 1
        type: integer
      role:
        $ref: '#/definitions/internal_api_handlers_user.Role'
      role_id:
        example: 456
        type: integer
      updated_at:
        example: "2023-01-01T00:00:00Z"
        type: string
      user:
        $ref: '#/definitions/internal_api_handlers_user.User'
      user_id:
        example: 123
        type: integer
    type: object
  internal_models_user.User:
    properties:
      created_at:
        description: Timestamps
        type: string
      email:
        type: string
      id:
        type: integer
      status:
        $ref: '#/definitions/user.UserStatus'
      updated_at:
        type: string
    type: object
  models.DeploymentEvent:
    properties:
      created_at:
        type: string
      deployment_id:
        type: string
      id:
        type: integer
      message:
        type: string
      name:
        type: string
      timestamp:
        type: string
      updated_at:
        type: string
    type: object
  models.DeploymentStatus:
    enum:
    - pending
    - running
    - succeeded
    - failed
    type: string
    x-enum-varnames:
    - DeploymentStatusPending
    - DeploymentStatusRunning
    - DeploymentStatusSucceeded
    - DeploymentStatusFailed
  models.Release:
    properties:
      bundle:
        type: string
      created:
        type: string
      created_at:
        description: Timestamps
        type: string
      deployments:
        description: Relationships
        items:
          $ref: '#/definitions/models.ReleaseDeployment'
        type: array
      id:
        type: string
      project:
        type: string
      project_path:
        type: string
      source_branch:
        type: string
      source_commit:
        type: string
      source_repo:
        type: string
      updated_at:
        type: string
    type: object
  models.ReleaseAlias:
    properties:
      created_at:
        type: string
      name:
        type: string
      release:
        allOf:
        - $ref: '#/definitions/models.Release'
        description: Relationships
      release_id:
        type: string
      updated_at:
        type: string
    type: object
  models.ReleaseDeployment:
    properties:
      attempts:
        type: integer
      created_at:
        description: Timestamps
        type: string
      events:
        items:
          $ref: '#/definitions/models.DeploymentEvent'
        type: array
      id:
        type: string
      reason:
        type: string
      release:
        allOf:
        - $ref: '#/definitions/models.Release'
        description: Relationships
      release_id:
        type: string
      status:
        $ref: '#/definitions/models.DeploymentStatus'
      timestamp:
        type: string
      updated_at:
        type: string
    type: object
  user.CreateRoleRequest:
    properties:
      name:
        type: string
      permissions:
        items:
          type: string
        type: array
    required:
    - name
    type: object
  user.CreateUserKeyRequest:
    properties:
      kid:
        type: string
      pubkey_b64:
        type: string
      status:
        type: string
      user_id:
        type: integer
    required:
    - kid
    - pubkey_b64
    - user_id
    type: object
  user.CreateUserRequest:
    properties:
      email:
        type: string
      status:
        type: string
    required:
    - email
    type: object
  user.RegisterUserKeyRequest:
    properties:
      email:
        type: string
      kid:
        type: string
      pubkey_b64:
        type: string
    required:
    - email
    - kid
    - pubkey_b64
    type: object
  user.RegisterUserRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  user.UpdateRoleRequest:
    properties:
      name:
        type: string
      permissions:
        items:
          type: string
        type: array
    required:
    - name
    - permissions
    type: object
  user.UpdateUserKeyRequest:
    properties:
      kid:
        type: string
      pubkey_b64:
        type: string
      status:
        type: string
      user_id:
        type: integer
    type: object
  user.UpdateUserRequest:
    properties:
      email:
        type: string
      status:
        type: string
    required:
    - email
    type: object
  user.UserKey:
    properties:
      created_at:
        description: Timestamps
        type: string
      id:
        type: integer
      kid:
        type: string
      pubkey_b64:
        type: string
      status:
        $ref: '#/definitions/user.UserKeyStatus'
      updated_at:
        type: string
      user:
        allOf:
        - $ref: '#/definitions/internal_models_user.User'
        description: Relationships
      user_id:
        type: integer
    type: object
  user.UserKeyStatus:
    enum:
    - active
    - inactive
    - revoked
    type: string
    x-enum-varnames:
    - UserKeyStatusActive
    - UserKeyStatusInactive
    - UserKeyStatusRevoked
  user.UserStatus:
    enum:
    - pending
    - active
    - inactive
    type: string
    x-enum-varnames:
    - UserStatusPending
    - UserStatusActive
    - UserStatusInactive
host: localhost:5050
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: API for managing releases and deployments in the Catalyst Foundry system.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Catalyst Foundry API
  version: "1.0"
paths:
  /auth/challenge:
    post:
      consumes:
      - application/json
      description: Create a new challenge for user authentication using Ed25519 keys
      parameters:
      - description: Challenge creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.ChallengeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Challenge created successfully
          schema:
            $ref: '#/definitions/handlers.ChallengeResponse'
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: User key not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Create a new authentication challenge
      tags:
      - auth
  /auth/github:
    get:
      consumes:
      - application/json
      description: Get all GitHub Actions authentication configurations
      produces:
      - application/json
      responses:
        "200":
          description: List of authentication configurations
          schema:
            items:
              $ref: '#/definitions/handlers.GithubRepositoryAuthResponse'
            type: array
        "401":
          description: Authentication required
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: List GHA authentication configurations
      tags:
      - gha
    post:
      consumes:
      - application/json
      description: Create a new GitHub Actions authentication configuration for a
        repository
      parameters:
      - description: GHA authentication configuration
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateAuthRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Authentication configuration created
          schema:
            $ref: '#/definitions/handlers.GithubRepositoryAuthResponse'
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Authentication required
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create GHA authentication configuration
      tags:
      - gha
  /auth/github/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a GitHub Actions authentication configuration
      parameters:
      - description: Authentication configuration ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Authentication configuration deleted
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid ID parameter
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Authentication required
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete GHA authentication configuration
      tags:
      - gha
    get:
      consumes:
      - application/json
      description: Get a specific GitHub Actions authentication configuration by its
        ID
      parameters:
      - description: Authentication configuration ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Authentication configuration
          schema:
            $ref: '#/definitions/handlers.GithubRepositoryAuthResponse'
        "400":
          description: Invalid ID parameter
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Authentication required
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Authentication configuration not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get GHA authentication configuration by ID
      tags:
      - gha
    put:
      consumes:
      - application/json
      description: Update an existing GitHub Actions authentication configuration
      parameters:
      - description: Authentication configuration ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated GHA authentication configuration
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateAuthRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Authentication configuration updated
          schema:
            $ref: '#/definitions/handlers.GithubRepositoryAuthResponse'
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Authentication required
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Authentication configuration not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update GHA authentication configuration
      tags:
      - gha
  /auth/github/login:
    post:
      consumes:
      - application/json
      description: Validate a GitHub Actions OIDC token and return a JWT token
      parameters:
      - description: Token validation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.ValidateTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Token validated successfully
          schema:
            $ref: '#/definitions/handlers.ValidateTokenResponse'
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Invalid token
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Repository not authorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Validate GitHub Actions token
      tags:
      - gha
  /auth/github/repository/{repository}:
    get:
      consumes:
      - application/json
      description: Get a GitHub Actions authentication configuration by repository
        name
      parameters:
      - description: Repository name
        in: path
        name: repository
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Authentication configuration
          schema:
            $ref: '#/definitions/handlers.GithubRepositoryAuthResponse'
        "401":
          description: Authentication required
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Authentication configuration not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get GHA authentication configuration by repository
      tags:
      - gha
  /auth/keys:
    get:
      description: Retrieve a list of all user keys
      produces:
      - application/json
      responses:
        "200":
          description: List of user keys
          schema:
            items:
              $ref: '#/definitions/user.UserKey'
            type: array
        "401":
          description: Authentication required
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: List all user keys
      tags:
      - user-keys
    post:
      consumes:
      - application/json
      description: Create a new Ed25519 key for a user
      parameters:
      - description: User key creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.CreateUserKeyRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User key created successfully
          schema:
            $ref: '#/definitions/user.UserKey'
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "409":
          description: User key already exists
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create a new user key
      tags:
      - user-keys
  /auth/keys/{id}:
    delete:
      description: Delete a user key by their ID
      parameters:
      - description: User Key ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: User key deleted successfully
        "401":
          description: Authentication required
          schema:
            additionalProperties: true
            type: object
        "404":
          description: User key not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete a user key
      tags:
      - user-keys
    get:
      description: Retrieve a user key by their ID
      parameters:
      - description: User Key ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User key found
          schema:
            $ref: '#/definitions/user.UserKey'
        "401":
          description: Authentication required
          schema:
            additionalProperties: true
            type: object
        "404":
          description: User key not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get a user key by ID
      tags:
      - user-keys
    put:
      consumes:
      - application/json
      description: Update an existing user key's information
      parameters:
      - description: User Key ID
        in: path
        name: id
        required: true
        type: string
      - description: User key update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.UpdateUserKeyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User key updated successfully
          schema:
            $ref: '#/definitions/user.UserKey'
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Authentication required
          schema:
            additionalProperties: true
            type: object
        "404":
          description: User key not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update a user key
      tags:
      - user-keys
  /auth/keys/{id}/revoke:
    post:
      description: Revoke a user key by setting its status to revoked
      parameters:
      - description: User Key ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: User key revoked successfully
          schema:
            $ref: '#/definitions/user.UserKey'
        "401":
          description: Authentication required
          schema:
            additionalProperties: true
            type: object
        "404":
          description: User key not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Revoke a user key
      tags:
      - user-keys
  /auth/keys/kid/{kid}:
    get:
      description: Retrieve a user key by their kid (key ID)
      parameters:
      - description: Key ID
        in: path
        name: kid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User key found
          schema:
            $ref: '#/definitions/user.UserKey'
        "401":
          description: Authentication required
          schema:
            additionalProperties: true
            type: object
        "404":
          description: User key not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get a user key by kid
      tags:
      - user-keys
  /auth/keys/register:
    post:
      consumes:
      - application/json
      description: Register a new Ed25519 key for a user with inactive status
      parameters:
      - description: User key registration request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.RegisterUserKeyRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User key registered successfully
          schema:
            $ref: '#/definitions/user.UserKey'
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties: true
            type: object
        "409":
          description: User key already exists
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Register a new user key
      tags:
      - user-keys
  /auth/keys/user/{user_id}:
    get:
      description: Retrieve all keys for a specific user
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of user keys
          schema:
            items:
              $ref: '#/definitions/user.UserKey'
            type: array
        "401":
          description: Authentication required
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get user keys by user ID
      tags:
      - user-keys
  /auth/keys/user/{user_id}/active:
    get:
      description: Get all active user keys for a specific user
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of active user keys
          schema:
            items:
              $ref: '#/definitions/user.UserKey'
            type: array
        "400":
          description: Invalid user ID
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Authentication required
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get active user keys by user ID
      tags:
      - user-keys
  /auth/keys/user/{user_id}/inactive:
    get:
      description: Get all inactive user keys for a specific user
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of inactive user keys
          schema:
            items:
              $ref: '#/definitions/user.UserKey'
            type: array
        "400":
          description: Invalid user ID
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Authentication required
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get inactive user keys by user ID
      tags:
      - user-keys
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user using their signed challenge response
      parameters:
      - description: Login request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Authentication successful
          schema:
            $ref: '#/definitions/handlers.LoginResponse'
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Authentication failed
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Challenge or user not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Authenticate user with challenge response
      tags:
      - auth
  /auth/pending/keys:
    get:
      description: Get all user keys with inactive status
      produces:
      - application/json
      responses:
        "200":
          description: List of inactive user keys
          schema:
            items:
              $ref: '#/definitions/user.UserKey'
            type: array
        "401":
          description: Authentication required
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get all inactive user keys
      tags:
      - user-keys
  /auth/pending/users:
    get:
      description: Get a list of all users with pending status
      produces:
      - application/json
      responses:
        "200":
          description: List of pending users
          schema:
            items:
              $ref: '#/definitions/internal_api_handlers_user.User'
            type: array
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: List pending users
      tags:
      - users
  /auth/role-users:
    get:
      description: Retrieve all users assigned to a specific role
      parameters:
      - description: Role ID
        in: query
        name: role_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of role users
          schema:
            items:
              $ref: '#/definitions/internal_api_handlers_user.UserRole'
            type: array
        "401":
          description: Authentication required
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Role not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get all users for a role
      tags:
      - user-roles
  /auth/roles:
    get:
      description: Retrieve a list of all roles
      produces:
      - application/json
      responses:
        "200":
          description: List of roles
          schema:
            items:
              $ref: '#/definitions/internal_api_handlers_user.Role'
            type: array
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: List all roles
      tags:
      - roles
    post:
      consumes:
      - application/json
      description: Create a new role with the provided information
      parameters:
      - description: Role creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.CreateRoleRequest'
      - description: If true, ignore permissions and add all permissions
        in: query
        name: admin
        type: boolean
      produces:
      - application/json
      responses:
        "201":
          description: Role created successfully
          schema:
            $ref: '#/definitions/internal_api_handlers_user.Role'
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "409":
          description: Role already exists
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create a new role
      tags:
      - roles
  /auth/roles/{id}:
    delete:
      description: Delete a role by their ID
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: Role deleted successfully
        "404":
          description: Role not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete a role
      tags:
      - roles
    get:
      description: Retrieve a role by their ID
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Role found
          schema:
            $ref: '#/definitions/internal_api_handlers_user.Role'
        "404":
          description: Role not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get a role by ID
      tags:
      - roles
    put:
      consumes:
      - application/json
      description: Update an existing role's information
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: string
      - description: Role update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.UpdateRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Role updated successfully
          schema:
            $ref: '#/definitions/internal_api_handlers_user.Role'
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Role not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update a role
      tags:
      - roles
  /auth/roles/name/{name}:
    get:
      description: Retrieve a role by their name
      parameters:
      - description: Role name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Role found
          schema:
            $ref: '#/definitions/internal_api_handlers_user.Role'
        "404":
          description: Role not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get a role by name
      tags:
      - roles
  /auth/user-roles:
    delete:
      description: Remove a user from a specific role
      parameters:
      - description: User ID
        in: query
        name: user_id
        required: true
        type: string
      - description: Role ID
        in: query
        name: role_id
        required: true
        type: string
      responses:
        "204":
          description: User removed from role successfully
        "401":
          description: Authentication required
          schema:
            additionalProperties: true
            type: object
        "404":
          description: User or role not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Remove a user from a role
      tags:
      - user-roles
    get:
      description: Retrieve all roles assigned to a specific user
      parameters:
      - description: User ID
        in: query
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of user roles
          schema:
            items:
              $ref: '#/definitions/internal_api_handlers_user.UserRole'
            type: array
        "401":
          description: Authentication required
          schema:
            additionalProperties: true
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get all roles for a user
      tags:
      - user-roles
    post:
      consumes:
      - application/json
      description: Assign a user to a specific role
      parameters:
      - description: User ID
        in: query
        name: user_id
        required: true
        type: string
      - description: Role ID
        in: query
        name: role_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: User assigned to role successfully
          schema:
            $ref: '#/definitions/internal_api_handlers_user.UserRole'
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: User or role not found
          schema:
            additionalProperties: true
            type: object
        "409":
          description: User already has this role
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Assign a user to a role
      tags:
      - user-roles
  /auth/users:
    get:
      description: Get a list of all users in the system
      produces:
      - application/json
      responses:
        "200":
          description: List of users
          schema:
            items:
              $ref: '#/definitions/internal_api_handlers_user.User'
            type: array
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: List all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user with the provided information
      parameters:
      - description: User creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            $ref: '#/definitions/internal_api_handlers_user.User'
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "409":
          description: User already exists
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create a new user
      tags:
      - users
  /auth/users/{id}:
    delete:
      description: Delete a user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: User deleted successfully
        "404":
          description: User not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete a user
      tags:
      - users
    get:
      description: Retrieve a user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User found
          schema:
            $ref: '#/definitions/internal_api_handlers_user.User'
        "404":
          description: User not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get a user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update an existing user's information
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User updated successfully
          schema:
            $ref: '#/definitions/internal_api_handlers_user.User'
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update a user
      tags:
      - users
  /auth/users/{id}/activate:
    post:
      description: Activate a user by setting their status to active
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: User activated successfully
          schema:
            $ref: '#/definitions/internal_api_handlers_user.User'
        "404":
          description: User not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Activate a user
      tags:
      - users
  /auth/users/{id}/deactivate:
    post:
      description: Deactivate a user by setting their status to inactive
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: User deactivated successfully
          schema:
            $ref: '#/definitions/internal_api_handlers_user.User'
        "404":
          description: User not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Deactivate a user
      tags:
      - users
  /auth/users/email/{email}:
    get:
      description: Retrieve a user by their email address
      parameters:
      - description: User email
        in: path
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User found
          schema:
            $ref: '#/definitions/internal_api_handlers_user.User'
        "404":
          description: User not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get a user by email
      tags:
      - users
  /auth/users/register:
    post:
      consumes:
      - application/json
      description: Register a new user with pending status
      parameters:
      - description: User registration request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.RegisterUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            $ref: '#/definitions/internal_api_handlers_user.User'
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "409":
          description: User already exists
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Register a new user
      tags:
      - users
  /healthz:
    get:
      consumes:
      - application/json
      description: Check the health status of the API service
      produces:
      - application/json
      responses:
        "200":
          description: Service is healthy
          schema:
            additionalProperties: true
            type: object
        "503":
          description: Service is unhealthy
          schema:
            additionalProperties: true
            type: object
      summary: Health check
      tags:
      - health
  /release:
    post:
      consumes:
      - application/json
      description: Create a new release with the specified source repository and project
        details
      parameters:
      - description: Release creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateReleaseRequest'
      - description: Deploy the release immediately (true/false)
        in: query
        name: deploy
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Release created successfully
          schema:
            $ref: '#/definitions/models.Release'
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Authentication required
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create a new release
      tags:
      - releases
  /release/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve a specific release by its ID
      parameters:
      - description: Release ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Release details
          schema:
            $ref: '#/definitions/models.Release'
        "401":
          description: Authentication required
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Release not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get a release by ID
      tags:
      - releases
    put:
      consumes:
      - application/json
      description: Update an existing release with new information
      parameters:
      - description: Release ID
        in: path
        name: id
        required: true
        type: string
      - description: Release update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateReleaseRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Release updated successfully
          schema:
            $ref: '#/definitions/models.Release'
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Authentication required
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Release not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update a release
      tags:
      - releases
  /release/{id}/aliases:
    get:
      consumes:
      - application/json
      description: Get all aliases for a specific release
      parameters:
      - description: Release ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of aliases
          schema:
            items:
              $ref: '#/definitions/models.ReleaseAlias'
            type: array
        "401":
          description: Authentication required
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: List release aliases
      tags:
      - releases
  /release/{id}/deploy:
    post:
      consumes:
      - application/json
      description: Create a new deployment for a release
      parameters:
      - description: Release ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Deployment created successfully
          schema:
            $ref: '#/definitions/models.ReleaseDeployment'
        "401":
          description: Authentication required
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create a deployment
      tags:
      - deployments
  /release/{id}/deploy/{deployId}:
    get:
      consumes:
      - application/json
      description: Get a specific deployment by its ID
      parameters:
      - description: Release ID
        in: path
        name: id
        required: true
        type: string
      - description: Deployment ID
        in: path
        name: deployId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Deployment details
          schema:
            $ref: '#/definitions/models.ReleaseDeployment'
        "401":
          description: Authentication required
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Deployment not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get a deployment
      tags:
      - deployments
    put:
      consumes:
      - application/json
      description: Update an existing deployment
      parameters:
      - description: Release ID
        in: path
        name: id
        required: true
        type: string
      - description: Deployment ID
        in: path
        name: deployId
        required: true
        type: string
      - description: Deployment update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.ReleaseDeployment'
      produces:
      - application/json
      responses:
        "200":
          description: Deployment updated successfully
          schema:
            $ref: '#/definitions/models.ReleaseDeployment'
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Authentication required
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update a deployment
      tags:
      - deployments
  /release/{id}/deploy/{deployId}/events:
    get:
      consumes:
      - application/json
      description: Get all events for a deployment
      parameters:
      - description: Release ID
        in: path
        name: id
        required: true
        type: string
      - description: Deployment ID
        in: path
        name: deployId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of deployment events
          schema:
            items:
              $ref: '#/definitions/models.DeploymentEvent'
            type: array
        "401":
          description: Authentication required
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get deployment events
      tags:
      - deployments
    post:
      consumes:
      - application/json
      description: Add an event to a deployment
      parameters:
      - description: Release ID
        in: path
        name: id
        required: true
        type: string
      - description: Deployment ID
        in: path
        name: deployId
        required: true
        type: string
      - description: Event details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.AddEventRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Deployment with updated events
          schema:
            $ref: '#/definitions/models.ReleaseDeployment'
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Authentication required
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Add deployment event
      tags:
      - deployments
  /release/{id}/deploy/latest:
    get:
      consumes:
      - application/json
      description: Get the most recent deployment for a release
      parameters:
      - description: Release ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Latest deployment
          schema:
            $ref: '#/definitions/models.ReleaseDeployment'
        "401":
          description: Authentication required
          schema:
            additionalProperties: true
            type: object
        "404":
          description: No deployments found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get latest deployment
      tags:
      - deployments
  /release/{id}/deployments:
    get:
      consumes:
      - application/json
      description: Get all deployments for a release
      parameters:
      - description: Release ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of deployments
          schema:
            items:
              $ref: '#/definitions/models.ReleaseDeployment'
            type: array
        "401":
          description: Authentication required
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: List deployments
      tags:
      - deployments
  /release/alias/{name}:
    delete:
      consumes:
      - application/json
      description: Delete an alias for a release
      parameters:
      - description: Alias name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Alias deleted successfully
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Authentication required
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete a release alias
      tags:
      - releases
    get:
      consumes:
      - application/json
      description: Retrieve a release by its alias name
      parameters:
      - description: Release alias name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Release details
          schema:
            $ref: '#/definitions/models.Release'
        "401":
          description: Authentication required
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Release alias not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get release by alias
      tags:
      - releases
    post:
      consumes:
      - application/json
      description: Create an alias for a release
      parameters:
      - description: Alias name
        in: path
        name: name
        required: true
        type: string
      - description: Alias creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateAliasRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Alias created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Authentication required
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create a release alias
      tags:
      - releases
  /releases:
    get:
      consumes:
      - application/json
      description: Get all releases, optionally filtered by project
      parameters:
      - description: Filter releases by project name
        in: query
        name: project
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of releases
          schema:
            items:
              $ref: '#/definitions/models.Release'
            type: array
        "401":
          description: Authentication required
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: List releases
      tags:
      - releases
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
