// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/input-output-hk/catalyst-forge/foundry/api/client/gha"
	"sync"
)

// Ensure, that GHAClientInterfaceMock does implement gha.GHAClientInterface.
// If this is not the case, regenerate this file with moq.
var _ gha.GHAClientInterface = &GHAClientInterfaceMock{}

// GHAClientInterfaceMock is a mock implementation of gha.GHAClientInterface.
//
//	func TestSomethingThatUsesGHAClientInterface(t *testing.T) {
//
//		// make and configure a mocked gha.GHAClientInterface
//		mockedGHAClientInterface := &GHAClientInterfaceMock{
//			CreateAuthFunc: func(ctx context.Context, req *gha.CreateAuthRequest) (*gha.GHARepositoryAuth, error) {
//				panic("mock out the CreateAuth method")
//			},
//			DeleteAuthFunc: func(ctx context.Context, id uint) error {
//				panic("mock out the DeleteAuth method")
//			},
//			GetAuthFunc: func(ctx context.Context, id uint) (*gha.GHARepositoryAuth, error) {
//				panic("mock out the GetAuth method")
//			},
//			GetAuthByRepositoryFunc: func(ctx context.Context, repository string) (*gha.GHARepositoryAuth, error) {
//				panic("mock out the GetAuthByRepository method")
//			},
//			ListAuthsFunc: func(ctx context.Context) ([]gha.GHARepositoryAuth, error) {
//				panic("mock out the ListAuths method")
//			},
//			UpdateAuthFunc: func(ctx context.Context, id uint, req *gha.UpdateAuthRequest) (*gha.GHARepositoryAuth, error) {
//				panic("mock out the UpdateAuth method")
//			},
//			ValidateTokenFunc: func(ctx context.Context, req *gha.ValidateTokenRequest) (*gha.ValidateTokenResponse, error) {
//				panic("mock out the ValidateToken method")
//			},
//		}
//
//		// use mockedGHAClientInterface in code that requires gha.GHAClientInterface
//		// and then make assertions.
//
//	}
type GHAClientInterfaceMock struct {
	// CreateAuthFunc mocks the CreateAuth method.
	CreateAuthFunc func(ctx context.Context, req *gha.CreateAuthRequest) (*gha.GHARepositoryAuth, error)

	// DeleteAuthFunc mocks the DeleteAuth method.
	DeleteAuthFunc func(ctx context.Context, id uint) error

	// GetAuthFunc mocks the GetAuth method.
	GetAuthFunc func(ctx context.Context, id uint) (*gha.GHARepositoryAuth, error)

	// GetAuthByRepositoryFunc mocks the GetAuthByRepository method.
	GetAuthByRepositoryFunc func(ctx context.Context, repository string) (*gha.GHARepositoryAuth, error)

	// ListAuthsFunc mocks the ListAuths method.
	ListAuthsFunc func(ctx context.Context) ([]gha.GHARepositoryAuth, error)

	// UpdateAuthFunc mocks the UpdateAuth method.
	UpdateAuthFunc func(ctx context.Context, id uint, req *gha.UpdateAuthRequest) (*gha.GHARepositoryAuth, error)

	// ValidateTokenFunc mocks the ValidateToken method.
	ValidateTokenFunc func(ctx context.Context, req *gha.ValidateTokenRequest) (*gha.ValidateTokenResponse, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateAuth holds details about calls to the CreateAuth method.
		CreateAuth []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req *gha.CreateAuthRequest
		}
		// DeleteAuth holds details about calls to the DeleteAuth method.
		DeleteAuth []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uint
		}
		// GetAuth holds details about calls to the GetAuth method.
		GetAuth []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uint
		}
		// GetAuthByRepository holds details about calls to the GetAuthByRepository method.
		GetAuthByRepository []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Repository is the repository argument value.
			Repository string
		}
		// ListAuths holds details about calls to the ListAuths method.
		ListAuths []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// UpdateAuth holds details about calls to the UpdateAuth method.
		UpdateAuth []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uint
			// Req is the req argument value.
			Req *gha.UpdateAuthRequest
		}
		// ValidateToken holds details about calls to the ValidateToken method.
		ValidateToken []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req *gha.ValidateTokenRequest
		}
	}
	lockCreateAuth          sync.RWMutex
	lockDeleteAuth          sync.RWMutex
	lockGetAuth             sync.RWMutex
	lockGetAuthByRepository sync.RWMutex
	lockListAuths           sync.RWMutex
	lockUpdateAuth          sync.RWMutex
	lockValidateToken       sync.RWMutex
}

// CreateAuth calls CreateAuthFunc.
func (mock *GHAClientInterfaceMock) CreateAuth(ctx context.Context, req *gha.CreateAuthRequest) (*gha.GHARepositoryAuth, error) {
	if mock.CreateAuthFunc == nil {
		panic("GHAClientInterfaceMock.CreateAuthFunc: method is nil but GHAClientInterface.CreateAuth was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req *gha.CreateAuthRequest
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockCreateAuth.Lock()
	mock.calls.CreateAuth = append(mock.calls.CreateAuth, callInfo)
	mock.lockCreateAuth.Unlock()
	return mock.CreateAuthFunc(ctx, req)
}

// CreateAuthCalls gets all the calls that were made to CreateAuth.
// Check the length with:
//
//	len(mockedGHAClientInterface.CreateAuthCalls())
func (mock *GHAClientInterfaceMock) CreateAuthCalls() []struct {
	Ctx context.Context
	Req *gha.CreateAuthRequest
} {
	var calls []struct {
		Ctx context.Context
		Req *gha.CreateAuthRequest
	}
	mock.lockCreateAuth.RLock()
	calls = mock.calls.CreateAuth
	mock.lockCreateAuth.RUnlock()
	return calls
}

// DeleteAuth calls DeleteAuthFunc.
func (mock *GHAClientInterfaceMock) DeleteAuth(ctx context.Context, id uint) error {
	if mock.DeleteAuthFunc == nil {
		panic("GHAClientInterfaceMock.DeleteAuthFunc: method is nil but GHAClientInterface.DeleteAuth was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uint
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDeleteAuth.Lock()
	mock.calls.DeleteAuth = append(mock.calls.DeleteAuth, callInfo)
	mock.lockDeleteAuth.Unlock()
	return mock.DeleteAuthFunc(ctx, id)
}

// DeleteAuthCalls gets all the calls that were made to DeleteAuth.
// Check the length with:
//
//	len(mockedGHAClientInterface.DeleteAuthCalls())
func (mock *GHAClientInterfaceMock) DeleteAuthCalls() []struct {
	Ctx context.Context
	ID  uint
} {
	var calls []struct {
		Ctx context.Context
		ID  uint
	}
	mock.lockDeleteAuth.RLock()
	calls = mock.calls.DeleteAuth
	mock.lockDeleteAuth.RUnlock()
	return calls
}

// GetAuth calls GetAuthFunc.
func (mock *GHAClientInterfaceMock) GetAuth(ctx context.Context, id uint) (*gha.GHARepositoryAuth, error) {
	if mock.GetAuthFunc == nil {
		panic("GHAClientInterfaceMock.GetAuthFunc: method is nil but GHAClientInterface.GetAuth was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uint
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetAuth.Lock()
	mock.calls.GetAuth = append(mock.calls.GetAuth, callInfo)
	mock.lockGetAuth.Unlock()
	return mock.GetAuthFunc(ctx, id)
}

// GetAuthCalls gets all the calls that were made to GetAuth.
// Check the length with:
//
//	len(mockedGHAClientInterface.GetAuthCalls())
func (mock *GHAClientInterfaceMock) GetAuthCalls() []struct {
	Ctx context.Context
	ID  uint
} {
	var calls []struct {
		Ctx context.Context
		ID  uint
	}
	mock.lockGetAuth.RLock()
	calls = mock.calls.GetAuth
	mock.lockGetAuth.RUnlock()
	return calls
}

// GetAuthByRepository calls GetAuthByRepositoryFunc.
func (mock *GHAClientInterfaceMock) GetAuthByRepository(ctx context.Context, repository string) (*gha.GHARepositoryAuth, error) {
	if mock.GetAuthByRepositoryFunc == nil {
		panic("GHAClientInterfaceMock.GetAuthByRepositoryFunc: method is nil but GHAClientInterface.GetAuthByRepository was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Repository string
	}{
		Ctx:        ctx,
		Repository: repository,
	}
	mock.lockGetAuthByRepository.Lock()
	mock.calls.GetAuthByRepository = append(mock.calls.GetAuthByRepository, callInfo)
	mock.lockGetAuthByRepository.Unlock()
	return mock.GetAuthByRepositoryFunc(ctx, repository)
}

// GetAuthByRepositoryCalls gets all the calls that were made to GetAuthByRepository.
// Check the length with:
//
//	len(mockedGHAClientInterface.GetAuthByRepositoryCalls())
func (mock *GHAClientInterfaceMock) GetAuthByRepositoryCalls() []struct {
	Ctx        context.Context
	Repository string
} {
	var calls []struct {
		Ctx        context.Context
		Repository string
	}
	mock.lockGetAuthByRepository.RLock()
	calls = mock.calls.GetAuthByRepository
	mock.lockGetAuthByRepository.RUnlock()
	return calls
}

// ListAuths calls ListAuthsFunc.
func (mock *GHAClientInterfaceMock) ListAuths(ctx context.Context) ([]gha.GHARepositoryAuth, error) {
	if mock.ListAuthsFunc == nil {
		panic("GHAClientInterfaceMock.ListAuthsFunc: method is nil but GHAClientInterface.ListAuths was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockListAuths.Lock()
	mock.calls.ListAuths = append(mock.calls.ListAuths, callInfo)
	mock.lockListAuths.Unlock()
	return mock.ListAuthsFunc(ctx)
}

// ListAuthsCalls gets all the calls that were made to ListAuths.
// Check the length with:
//
//	len(mockedGHAClientInterface.ListAuthsCalls())
func (mock *GHAClientInterfaceMock) ListAuthsCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockListAuths.RLock()
	calls = mock.calls.ListAuths
	mock.lockListAuths.RUnlock()
	return calls
}

// UpdateAuth calls UpdateAuthFunc.
func (mock *GHAClientInterfaceMock) UpdateAuth(ctx context.Context, id uint, req *gha.UpdateAuthRequest) (*gha.GHARepositoryAuth, error) {
	if mock.UpdateAuthFunc == nil {
		panic("GHAClientInterfaceMock.UpdateAuthFunc: method is nil but GHAClientInterface.UpdateAuth was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uint
		Req *gha.UpdateAuthRequest
	}{
		Ctx: ctx,
		ID:  id,
		Req: req,
	}
	mock.lockUpdateAuth.Lock()
	mock.calls.UpdateAuth = append(mock.calls.UpdateAuth, callInfo)
	mock.lockUpdateAuth.Unlock()
	return mock.UpdateAuthFunc(ctx, id, req)
}

// UpdateAuthCalls gets all the calls that were made to UpdateAuth.
// Check the length with:
//
//	len(mockedGHAClientInterface.UpdateAuthCalls())
func (mock *GHAClientInterfaceMock) UpdateAuthCalls() []struct {
	Ctx context.Context
	ID  uint
	Req *gha.UpdateAuthRequest
} {
	var calls []struct {
		Ctx context.Context
		ID  uint
		Req *gha.UpdateAuthRequest
	}
	mock.lockUpdateAuth.RLock()
	calls = mock.calls.UpdateAuth
	mock.lockUpdateAuth.RUnlock()
	return calls
}

// ValidateToken calls ValidateTokenFunc.
func (mock *GHAClientInterfaceMock) ValidateToken(ctx context.Context, req *gha.ValidateTokenRequest) (*gha.ValidateTokenResponse, error) {
	if mock.ValidateTokenFunc == nil {
		panic("GHAClientInterfaceMock.ValidateTokenFunc: method is nil but GHAClientInterface.ValidateToken was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req *gha.ValidateTokenRequest
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockValidateToken.Lock()
	mock.calls.ValidateToken = append(mock.calls.ValidateToken, callInfo)
	mock.lockValidateToken.Unlock()
	return mock.ValidateTokenFunc(ctx, req)
}

// ValidateTokenCalls gets all the calls that were made to ValidateToken.
// Check the length with:
//
//	len(mockedGHAClientInterface.ValidateTokenCalls())
func (mock *GHAClientInterfaceMock) ValidateTokenCalls() []struct {
	Ctx context.Context
	Req *gha.ValidateTokenRequest
} {
	var calls []struct {
		Ctx context.Context
		Req *gha.ValidateTokenRequest
	}
	mock.lockValidateToken.RLock()
	calls = mock.calls.ValidateToken
	mock.lockValidateToken.RUnlock()
	return calls
}
