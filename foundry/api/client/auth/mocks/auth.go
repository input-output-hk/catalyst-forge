// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	clientauth "github.com/input-output-hk/catalyst-forge/foundry/api/client/auth"
	pkgauth "github.com/input-output-hk/catalyst-forge/foundry/api/pkg/auth"
	"sync"
)

// Ensure, that AuthClientInterfaceMock does implement clientauth.AuthClientInterface.
// If this is not the case, regenerate this file with moq.
var _ clientauth.AuthClientInterface = &AuthClientInterfaceMock{}

// AuthClientInterfaceMock is a mock implementation of clientauth.AuthClientInterface.
//
//	func TestSomethingThatUsesAuthClientInterface(t *testing.T) {
//
//		// make and configure a mocked clientauth.AuthClientInterface
//		mockedAuthClientInterface := &AuthClientInterfaceMock{
//			CreateChallengeFunc: func(ctx context.Context, req *clientauth.ChallengeRequest) (*pkgauth.KeyPairChallenge, error) {
//				panic("mock out the CreateChallenge method")
//			},
//			LoginFunc: func(ctx context.Context, req *pkgauth.KeyPairChallengeResponse) (*clientauth.LoginResponse, error) {
//				panic("mock out the Login method")
//			},
//		}
//
//		// use mockedAuthClientInterface in code that requires clientauth.AuthClientInterface
//		// and then make assertions.
//
//	}
type AuthClientInterfaceMock struct {
	// CreateChallengeFunc mocks the CreateChallenge method.
	CreateChallengeFunc func(ctx context.Context, req *clientauth.ChallengeRequest) (*pkgauth.KeyPairChallenge, error)

	// LoginFunc mocks the Login method.
	LoginFunc func(ctx context.Context, req *pkgauth.KeyPairChallengeResponse) (*clientauth.LoginResponse, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateChallenge holds details about calls to the CreateChallenge method.
		CreateChallenge []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req *clientauth.ChallengeRequest
		}
		// Login holds details about calls to the Login method.
		Login []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req *pkgauth.KeyPairChallengeResponse
		}
	}
	lockCreateChallenge sync.RWMutex
	lockLogin           sync.RWMutex
}

// CreateChallenge calls CreateChallengeFunc.
func (mock *AuthClientInterfaceMock) CreateChallenge(ctx context.Context, req *clientauth.ChallengeRequest) (*pkgauth.KeyPairChallenge, error) {
	if mock.CreateChallengeFunc == nil {
		panic("AuthClientInterfaceMock.CreateChallengeFunc: method is nil but AuthClientInterface.CreateChallenge was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req *clientauth.ChallengeRequest
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockCreateChallenge.Lock()
	mock.calls.CreateChallenge = append(mock.calls.CreateChallenge, callInfo)
	mock.lockCreateChallenge.Unlock()
	return mock.CreateChallengeFunc(ctx, req)
}

// CreateChallengeCalls gets all the calls that were made to CreateChallenge.
// Check the length with:
//
//	len(mockedAuthClientInterface.CreateChallengeCalls())
func (mock *AuthClientInterfaceMock) CreateChallengeCalls() []struct {
	Ctx context.Context
	Req *clientauth.ChallengeRequest
} {
	var calls []struct {
		Ctx context.Context
		Req *clientauth.ChallengeRequest
	}
	mock.lockCreateChallenge.RLock()
	calls = mock.calls.CreateChallenge
	mock.lockCreateChallenge.RUnlock()
	return calls
}

// Login calls LoginFunc.
func (mock *AuthClientInterfaceMock) Login(ctx context.Context, req *pkgauth.KeyPairChallengeResponse) (*clientauth.LoginResponse, error) {
	if mock.LoginFunc == nil {
		panic("AuthClientInterfaceMock.LoginFunc: method is nil but AuthClientInterface.Login was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req *pkgauth.KeyPairChallengeResponse
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockLogin.Lock()
	mock.calls.Login = append(mock.calls.Login, callInfo)
	mock.lockLogin.Unlock()
	return mock.LoginFunc(ctx, req)
}

// LoginCalls gets all the calls that were made to Login.
// Check the length with:
//
//	len(mockedAuthClientInterface.LoginCalls())
func (mock *AuthClientInterfaceMock) LoginCalls() []struct {
	Ctx context.Context
	Req *pkgauth.KeyPairChallengeResponse
} {
	var calls []struct {
		Ctx context.Context
		Req *pkgauth.KeyPairChallengeResponse
	}
	mock.lockLogin.RLock()
	calls = mock.calls.Login
	mock.lockLogin.RUnlock()
	return calls
}
