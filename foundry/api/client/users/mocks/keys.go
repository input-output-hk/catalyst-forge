// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/input-output-hk/catalyst-forge/foundry/api/client/users"
	"sync"
)

// Ensure, that KeysClientInterfaceMock does implement users.KeysClientInterface.
// If this is not the case, regenerate this file with moq.
var _ users.KeysClientInterface = &KeysClientInterfaceMock{}

// KeysClientInterfaceMock is a mock implementation of users.KeysClientInterface.
//
//	func TestSomethingThatUsesKeysClientInterface(t *testing.T) {
//
//		// make and configure a mocked users.KeysClientInterface
//		mockedKeysClientInterface := &KeysClientInterfaceMock{
//			CreateFunc: func(ctx context.Context, req *users.CreateUserKeyRequest) (*users.UserKey, error) {
//				panic("mock out the Create method")
//			},
//			DeleteFunc: func(ctx context.Context, id uint) error {
//				panic("mock out the Delete method")
//			},
//			GetFunc: func(ctx context.Context, id uint) (*users.UserKey, error) {
//				panic("mock out the Get method")
//			},
//			GetActiveByUserIDFunc: func(ctx context.Context, userID uint) ([]users.UserKey, error) {
//				panic("mock out the GetActiveByUserID method")
//			},
//			GetByKidFunc: func(ctx context.Context, kid string) (*users.UserKey, error) {
//				panic("mock out the GetByKid method")
//			},
//			GetByUserIDFunc: func(ctx context.Context, userID uint) ([]users.UserKey, error) {
//				panic("mock out the GetByUserID method")
//			},
//			GetInactiveFunc: func(ctx context.Context) ([]users.UserKey, error) {
//				panic("mock out the GetInactive method")
//			},
//			GetInactiveByUserIDFunc: func(ctx context.Context, userID uint) ([]users.UserKey, error) {
//				panic("mock out the GetInactiveByUserID method")
//			},
//			ListFunc: func(ctx context.Context) ([]users.UserKey, error) {
//				panic("mock out the List method")
//			},
//			RegisterFunc: func(ctx context.Context, req *users.RegisterUserKeyRequest) (*users.UserKey, error) {
//				panic("mock out the Register method")
//			},
//			RevokeFunc: func(ctx context.Context, id uint) (*users.UserKey, error) {
//				panic("mock out the Revoke method")
//			},
//			UpdateFunc: func(ctx context.Context, id uint, req *users.UpdateUserKeyRequest) (*users.UserKey, error) {
//				panic("mock out the Update method")
//			},
//		}
//
//		// use mockedKeysClientInterface in code that requires users.KeysClientInterface
//		// and then make assertions.
//
//	}
type KeysClientInterfaceMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, req *users.CreateUserKeyRequest) (*users.UserKey, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(ctx context.Context, id uint) error

	// GetFunc mocks the Get method.
	GetFunc func(ctx context.Context, id uint) (*users.UserKey, error)

	// GetActiveByUserIDFunc mocks the GetActiveByUserID method.
	GetActiveByUserIDFunc func(ctx context.Context, userID uint) ([]users.UserKey, error)

	// GetByKidFunc mocks the GetByKid method.
	GetByKidFunc func(ctx context.Context, kid string) (*users.UserKey, error)

	// GetByUserIDFunc mocks the GetByUserID method.
	GetByUserIDFunc func(ctx context.Context, userID uint) ([]users.UserKey, error)

	// GetInactiveFunc mocks the GetInactive method.
	GetInactiveFunc func(ctx context.Context) ([]users.UserKey, error)

	// GetInactiveByUserIDFunc mocks the GetInactiveByUserID method.
	GetInactiveByUserIDFunc func(ctx context.Context, userID uint) ([]users.UserKey, error)

	// ListFunc mocks the List method.
	ListFunc func(ctx context.Context) ([]users.UserKey, error)

	// RegisterFunc mocks the Register method.
	RegisterFunc func(ctx context.Context, req *users.RegisterUserKeyRequest) (*users.UserKey, error)

	// RevokeFunc mocks the Revoke method.
	RevokeFunc func(ctx context.Context, id uint) (*users.UserKey, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(ctx context.Context, id uint, req *users.UpdateUserKeyRequest) (*users.UserKey, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req *users.CreateUserKeyRequest
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uint
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uint
		}
		// GetActiveByUserID holds details about calls to the GetActiveByUserID method.
		GetActiveByUserID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserID is the userID argument value.
			UserID uint
		}
		// GetByKid holds details about calls to the GetByKid method.
		GetByKid []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Kid is the kid argument value.
			Kid string
		}
		// GetByUserID holds details about calls to the GetByUserID method.
		GetByUserID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserID is the userID argument value.
			UserID uint
		}
		// GetInactive holds details about calls to the GetInactive method.
		GetInactive []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetInactiveByUserID holds details about calls to the GetInactiveByUserID method.
		GetInactiveByUserID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserID is the userID argument value.
			UserID uint
		}
		// List holds details about calls to the List method.
		List []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Register holds details about calls to the Register method.
		Register []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req *users.RegisterUserKeyRequest
		}
		// Revoke holds details about calls to the Revoke method.
		Revoke []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uint
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uint
			// Req is the req argument value.
			Req *users.UpdateUserKeyRequest
		}
	}
	lockCreate              sync.RWMutex
	lockDelete              sync.RWMutex
	lockGet                 sync.RWMutex
	lockGetActiveByUserID   sync.RWMutex
	lockGetByKid            sync.RWMutex
	lockGetByUserID         sync.RWMutex
	lockGetInactive         sync.RWMutex
	lockGetInactiveByUserID sync.RWMutex
	lockList                sync.RWMutex
	lockRegister            sync.RWMutex
	lockRevoke              sync.RWMutex
	lockUpdate              sync.RWMutex
}

// Create calls CreateFunc.
func (mock *KeysClientInterfaceMock) Create(ctx context.Context, req *users.CreateUserKeyRequest) (*users.UserKey, error) {
	if mock.CreateFunc == nil {
		panic("KeysClientInterfaceMock.CreateFunc: method is nil but KeysClientInterface.Create was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req *users.CreateUserKeyRequest
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, req)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedKeysClientInterface.CreateCalls())
func (mock *KeysClientInterfaceMock) CreateCalls() []struct {
	Ctx context.Context
	Req *users.CreateUserKeyRequest
} {
	var calls []struct {
		Ctx context.Context
		Req *users.CreateUserKeyRequest
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *KeysClientInterfaceMock) Delete(ctx context.Context, id uint) error {
	if mock.DeleteFunc == nil {
		panic("KeysClientInterfaceMock.DeleteFunc: method is nil but KeysClientInterface.Delete was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uint
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(ctx, id)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//
//	len(mockedKeysClientInterface.DeleteCalls())
func (mock *KeysClientInterfaceMock) DeleteCalls() []struct {
	Ctx context.Context
	ID  uint
} {
	var calls []struct {
		Ctx context.Context
		ID  uint
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *KeysClientInterfaceMock) Get(ctx context.Context, id uint) (*users.UserKey, error) {
	if mock.GetFunc == nil {
		panic("KeysClientInterfaceMock.GetFunc: method is nil but KeysClientInterface.Get was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uint
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(ctx, id)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//
//	len(mockedKeysClientInterface.GetCalls())
func (mock *KeysClientInterfaceMock) GetCalls() []struct {
	Ctx context.Context
	ID  uint
} {
	var calls []struct {
		Ctx context.Context
		ID  uint
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// GetActiveByUserID calls GetActiveByUserIDFunc.
func (mock *KeysClientInterfaceMock) GetActiveByUserID(ctx context.Context, userID uint) ([]users.UserKey, error) {
	if mock.GetActiveByUserIDFunc == nil {
		panic("KeysClientInterfaceMock.GetActiveByUserIDFunc: method is nil but KeysClientInterface.GetActiveByUserID was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		UserID uint
	}{
		Ctx:    ctx,
		UserID: userID,
	}
	mock.lockGetActiveByUserID.Lock()
	mock.calls.GetActiveByUserID = append(mock.calls.GetActiveByUserID, callInfo)
	mock.lockGetActiveByUserID.Unlock()
	return mock.GetActiveByUserIDFunc(ctx, userID)
}

// GetActiveByUserIDCalls gets all the calls that were made to GetActiveByUserID.
// Check the length with:
//
//	len(mockedKeysClientInterface.GetActiveByUserIDCalls())
func (mock *KeysClientInterfaceMock) GetActiveByUserIDCalls() []struct {
	Ctx    context.Context
	UserID uint
} {
	var calls []struct {
		Ctx    context.Context
		UserID uint
	}
	mock.lockGetActiveByUserID.RLock()
	calls = mock.calls.GetActiveByUserID
	mock.lockGetActiveByUserID.RUnlock()
	return calls
}

// GetByKid calls GetByKidFunc.
func (mock *KeysClientInterfaceMock) GetByKid(ctx context.Context, kid string) (*users.UserKey, error) {
	if mock.GetByKidFunc == nil {
		panic("KeysClientInterfaceMock.GetByKidFunc: method is nil but KeysClientInterface.GetByKid was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Kid string
	}{
		Ctx: ctx,
		Kid: kid,
	}
	mock.lockGetByKid.Lock()
	mock.calls.GetByKid = append(mock.calls.GetByKid, callInfo)
	mock.lockGetByKid.Unlock()
	return mock.GetByKidFunc(ctx, kid)
}

// GetByKidCalls gets all the calls that were made to GetByKid.
// Check the length with:
//
//	len(mockedKeysClientInterface.GetByKidCalls())
func (mock *KeysClientInterfaceMock) GetByKidCalls() []struct {
	Ctx context.Context
	Kid string
} {
	var calls []struct {
		Ctx context.Context
		Kid string
	}
	mock.lockGetByKid.RLock()
	calls = mock.calls.GetByKid
	mock.lockGetByKid.RUnlock()
	return calls
}

// GetByUserID calls GetByUserIDFunc.
func (mock *KeysClientInterfaceMock) GetByUserID(ctx context.Context, userID uint) ([]users.UserKey, error) {
	if mock.GetByUserIDFunc == nil {
		panic("KeysClientInterfaceMock.GetByUserIDFunc: method is nil but KeysClientInterface.GetByUserID was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		UserID uint
	}{
		Ctx:    ctx,
		UserID: userID,
	}
	mock.lockGetByUserID.Lock()
	mock.calls.GetByUserID = append(mock.calls.GetByUserID, callInfo)
	mock.lockGetByUserID.Unlock()
	return mock.GetByUserIDFunc(ctx, userID)
}

// GetByUserIDCalls gets all the calls that were made to GetByUserID.
// Check the length with:
//
//	len(mockedKeysClientInterface.GetByUserIDCalls())
func (mock *KeysClientInterfaceMock) GetByUserIDCalls() []struct {
	Ctx    context.Context
	UserID uint
} {
	var calls []struct {
		Ctx    context.Context
		UserID uint
	}
	mock.lockGetByUserID.RLock()
	calls = mock.calls.GetByUserID
	mock.lockGetByUserID.RUnlock()
	return calls
}

// GetInactive calls GetInactiveFunc.
func (mock *KeysClientInterfaceMock) GetInactive(ctx context.Context) ([]users.UserKey, error) {
	if mock.GetInactiveFunc == nil {
		panic("KeysClientInterfaceMock.GetInactiveFunc: method is nil but KeysClientInterface.GetInactive was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetInactive.Lock()
	mock.calls.GetInactive = append(mock.calls.GetInactive, callInfo)
	mock.lockGetInactive.Unlock()
	return mock.GetInactiveFunc(ctx)
}

// GetInactiveCalls gets all the calls that were made to GetInactive.
// Check the length with:
//
//	len(mockedKeysClientInterface.GetInactiveCalls())
func (mock *KeysClientInterfaceMock) GetInactiveCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetInactive.RLock()
	calls = mock.calls.GetInactive
	mock.lockGetInactive.RUnlock()
	return calls
}

// GetInactiveByUserID calls GetInactiveByUserIDFunc.
func (mock *KeysClientInterfaceMock) GetInactiveByUserID(ctx context.Context, userID uint) ([]users.UserKey, error) {
	if mock.GetInactiveByUserIDFunc == nil {
		panic("KeysClientInterfaceMock.GetInactiveByUserIDFunc: method is nil but KeysClientInterface.GetInactiveByUserID was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		UserID uint
	}{
		Ctx:    ctx,
		UserID: userID,
	}
	mock.lockGetInactiveByUserID.Lock()
	mock.calls.GetInactiveByUserID = append(mock.calls.GetInactiveByUserID, callInfo)
	mock.lockGetInactiveByUserID.Unlock()
	return mock.GetInactiveByUserIDFunc(ctx, userID)
}

// GetInactiveByUserIDCalls gets all the calls that were made to GetInactiveByUserID.
// Check the length with:
//
//	len(mockedKeysClientInterface.GetInactiveByUserIDCalls())
func (mock *KeysClientInterfaceMock) GetInactiveByUserIDCalls() []struct {
	Ctx    context.Context
	UserID uint
} {
	var calls []struct {
		Ctx    context.Context
		UserID uint
	}
	mock.lockGetInactiveByUserID.RLock()
	calls = mock.calls.GetInactiveByUserID
	mock.lockGetInactiveByUserID.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *KeysClientInterfaceMock) List(ctx context.Context) ([]users.UserKey, error) {
	if mock.ListFunc == nil {
		panic("KeysClientInterfaceMock.ListFunc: method is nil but KeysClientInterface.List was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	mock.lockList.Unlock()
	return mock.ListFunc(ctx)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//
//	len(mockedKeysClientInterface.ListCalls())
func (mock *KeysClientInterfaceMock) ListCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockList.RLock()
	calls = mock.calls.List
	mock.lockList.RUnlock()
	return calls
}

// Register calls RegisterFunc.
func (mock *KeysClientInterfaceMock) Register(ctx context.Context, req *users.RegisterUserKeyRequest) (*users.UserKey, error) {
	if mock.RegisterFunc == nil {
		panic("KeysClientInterfaceMock.RegisterFunc: method is nil but KeysClientInterface.Register was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req *users.RegisterUserKeyRequest
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockRegister.Lock()
	mock.calls.Register = append(mock.calls.Register, callInfo)
	mock.lockRegister.Unlock()
	return mock.RegisterFunc(ctx, req)
}

// RegisterCalls gets all the calls that were made to Register.
// Check the length with:
//
//	len(mockedKeysClientInterface.RegisterCalls())
func (mock *KeysClientInterfaceMock) RegisterCalls() []struct {
	Ctx context.Context
	Req *users.RegisterUserKeyRequest
} {
	var calls []struct {
		Ctx context.Context
		Req *users.RegisterUserKeyRequest
	}
	mock.lockRegister.RLock()
	calls = mock.calls.Register
	mock.lockRegister.RUnlock()
	return calls
}

// Revoke calls RevokeFunc.
func (mock *KeysClientInterfaceMock) Revoke(ctx context.Context, id uint) (*users.UserKey, error) {
	if mock.RevokeFunc == nil {
		panic("KeysClientInterfaceMock.RevokeFunc: method is nil but KeysClientInterface.Revoke was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uint
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockRevoke.Lock()
	mock.calls.Revoke = append(mock.calls.Revoke, callInfo)
	mock.lockRevoke.Unlock()
	return mock.RevokeFunc(ctx, id)
}

// RevokeCalls gets all the calls that were made to Revoke.
// Check the length with:
//
//	len(mockedKeysClientInterface.RevokeCalls())
func (mock *KeysClientInterfaceMock) RevokeCalls() []struct {
	Ctx context.Context
	ID  uint
} {
	var calls []struct {
		Ctx context.Context
		ID  uint
	}
	mock.lockRevoke.RLock()
	calls = mock.calls.Revoke
	mock.lockRevoke.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *KeysClientInterfaceMock) Update(ctx context.Context, id uint, req *users.UpdateUserKeyRequest) (*users.UserKey, error) {
	if mock.UpdateFunc == nil {
		panic("KeysClientInterfaceMock.UpdateFunc: method is nil but KeysClientInterface.Update was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uint
		Req *users.UpdateUserKeyRequest
	}{
		Ctx: ctx,
		ID:  id,
		Req: req,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(ctx, id, req)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//
//	len(mockedKeysClientInterface.UpdateCalls())
func (mock *KeysClientInterfaceMock) UpdateCalls() []struct {
	Ctx context.Context
	ID  uint
	Req *users.UpdateUserKeyRequest
} {
	var calls []struct {
		Ctx context.Context
		ID  uint
		Req *users.UpdateUserKeyRequest
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}
