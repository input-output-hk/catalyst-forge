// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/input-output-hk/catalyst-forge/foundry/api/client/users"
	"sync"
)

// Ensure, that UsersClientInterfaceMock does implement users.UsersClientInterface.
// If this is not the case, regenerate this file with moq.
var _ users.UsersClientInterface = &UsersClientInterfaceMock{}

// UsersClientInterfaceMock is a mock implementation of users.UsersClientInterface.
//
//	func TestSomethingThatUsesUsersClientInterface(t *testing.T) {
//
//		// make and configure a mocked users.UsersClientInterface
//		mockedUsersClientInterface := &UsersClientInterfaceMock{
//			ActivateFunc: func(ctx context.Context, id uint) (*users.User, error) {
//				panic("mock out the Activate method")
//			},
//			CreateFunc: func(ctx context.Context, req *users.CreateUserRequest) (*users.User, error) {
//				panic("mock out the Create method")
//			},
//			DeactivateFunc: func(ctx context.Context, id uint) (*users.User, error) {
//				panic("mock out the Deactivate method")
//			},
//			DeleteFunc: func(ctx context.Context, id uint) error {
//				panic("mock out the Delete method")
//			},
//			GetFunc: func(ctx context.Context, id uint) (*users.User, error) {
//				panic("mock out the Get method")
//			},
//			GetByEmailFunc: func(ctx context.Context, email string) (*users.User, error) {
//				panic("mock out the GetByEmail method")
//			},
//			GetPendingFunc: func(ctx context.Context) ([]users.User, error) {
//				panic("mock out the GetPending method")
//			},
//			ListFunc: func(ctx context.Context) ([]users.User, error) {
//				panic("mock out the List method")
//			},
//			RegisterFunc: func(ctx context.Context, req *users.RegisterUserRequest) (*users.User, error) {
//				panic("mock out the Register method")
//			},
//			UpdateFunc: func(ctx context.Context, id uint, req *users.UpdateUserRequest) (*users.User, error) {
//				panic("mock out the Update method")
//			},
//		}
//
//		// use mockedUsersClientInterface in code that requires users.UsersClientInterface
//		// and then make assertions.
//
//	}
type UsersClientInterfaceMock struct {
	// ActivateFunc mocks the Activate method.
	ActivateFunc func(ctx context.Context, id uint) (*users.User, error)

	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, req *users.CreateUserRequest) (*users.User, error)

	// DeactivateFunc mocks the Deactivate method.
	DeactivateFunc func(ctx context.Context, id uint) (*users.User, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(ctx context.Context, id uint) error

	// GetFunc mocks the Get method.
	GetFunc func(ctx context.Context, id uint) (*users.User, error)

	// GetByEmailFunc mocks the GetByEmail method.
	GetByEmailFunc func(ctx context.Context, email string) (*users.User, error)

	// GetPendingFunc mocks the GetPending method.
	GetPendingFunc func(ctx context.Context) ([]users.User, error)

	// ListFunc mocks the List method.
	ListFunc func(ctx context.Context) ([]users.User, error)

	// RegisterFunc mocks the Register method.
	RegisterFunc func(ctx context.Context, req *users.RegisterUserRequest) (*users.User, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(ctx context.Context, id uint, req *users.UpdateUserRequest) (*users.User, error)

	// calls tracks calls to the methods.
	calls struct {
		// Activate holds details about calls to the Activate method.
		Activate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uint
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req *users.CreateUserRequest
		}
		// Deactivate holds details about calls to the Deactivate method.
		Deactivate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uint
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uint
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uint
		}
		// GetByEmail holds details about calls to the GetByEmail method.
		GetByEmail []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Email is the email argument value.
			Email string
		}
		// GetPending holds details about calls to the GetPending method.
		GetPending []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// List holds details about calls to the List method.
		List []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Register holds details about calls to the Register method.
		Register []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req *users.RegisterUserRequest
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uint
			// Req is the req argument value.
			Req *users.UpdateUserRequest
		}
	}
	lockActivate   sync.RWMutex
	lockCreate     sync.RWMutex
	lockDeactivate sync.RWMutex
	lockDelete     sync.RWMutex
	lockGet        sync.RWMutex
	lockGetByEmail sync.RWMutex
	lockGetPending sync.RWMutex
	lockList       sync.RWMutex
	lockRegister   sync.RWMutex
	lockUpdate     sync.RWMutex
}

// Activate calls ActivateFunc.
func (mock *UsersClientInterfaceMock) Activate(ctx context.Context, id uint) (*users.User, error) {
	if mock.ActivateFunc == nil {
		panic("UsersClientInterfaceMock.ActivateFunc: method is nil but UsersClientInterface.Activate was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uint
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockActivate.Lock()
	mock.calls.Activate = append(mock.calls.Activate, callInfo)
	mock.lockActivate.Unlock()
	return mock.ActivateFunc(ctx, id)
}

// ActivateCalls gets all the calls that were made to Activate.
// Check the length with:
//
//	len(mockedUsersClientInterface.ActivateCalls())
func (mock *UsersClientInterfaceMock) ActivateCalls() []struct {
	Ctx context.Context
	ID  uint
} {
	var calls []struct {
		Ctx context.Context
		ID  uint
	}
	mock.lockActivate.RLock()
	calls = mock.calls.Activate
	mock.lockActivate.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *UsersClientInterfaceMock) Create(ctx context.Context, req *users.CreateUserRequest) (*users.User, error) {
	if mock.CreateFunc == nil {
		panic("UsersClientInterfaceMock.CreateFunc: method is nil but UsersClientInterface.Create was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req *users.CreateUserRequest
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, req)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedUsersClientInterface.CreateCalls())
func (mock *UsersClientInterfaceMock) CreateCalls() []struct {
	Ctx context.Context
	Req *users.CreateUserRequest
} {
	var calls []struct {
		Ctx context.Context
		Req *users.CreateUserRequest
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// Deactivate calls DeactivateFunc.
func (mock *UsersClientInterfaceMock) Deactivate(ctx context.Context, id uint) (*users.User, error) {
	if mock.DeactivateFunc == nil {
		panic("UsersClientInterfaceMock.DeactivateFunc: method is nil but UsersClientInterface.Deactivate was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uint
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDeactivate.Lock()
	mock.calls.Deactivate = append(mock.calls.Deactivate, callInfo)
	mock.lockDeactivate.Unlock()
	return mock.DeactivateFunc(ctx, id)
}

// DeactivateCalls gets all the calls that were made to Deactivate.
// Check the length with:
//
//	len(mockedUsersClientInterface.DeactivateCalls())
func (mock *UsersClientInterfaceMock) DeactivateCalls() []struct {
	Ctx context.Context
	ID  uint
} {
	var calls []struct {
		Ctx context.Context
		ID  uint
	}
	mock.lockDeactivate.RLock()
	calls = mock.calls.Deactivate
	mock.lockDeactivate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *UsersClientInterfaceMock) Delete(ctx context.Context, id uint) error {
	if mock.DeleteFunc == nil {
		panic("UsersClientInterfaceMock.DeleteFunc: method is nil but UsersClientInterface.Delete was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uint
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(ctx, id)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//
//	len(mockedUsersClientInterface.DeleteCalls())
func (mock *UsersClientInterfaceMock) DeleteCalls() []struct {
	Ctx context.Context
	ID  uint
} {
	var calls []struct {
		Ctx context.Context
		ID  uint
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *UsersClientInterfaceMock) Get(ctx context.Context, id uint) (*users.User, error) {
	if mock.GetFunc == nil {
		panic("UsersClientInterfaceMock.GetFunc: method is nil but UsersClientInterface.Get was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uint
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(ctx, id)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//
//	len(mockedUsersClientInterface.GetCalls())
func (mock *UsersClientInterfaceMock) GetCalls() []struct {
	Ctx context.Context
	ID  uint
} {
	var calls []struct {
		Ctx context.Context
		ID  uint
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// GetByEmail calls GetByEmailFunc.
func (mock *UsersClientInterfaceMock) GetByEmail(ctx context.Context, email string) (*users.User, error) {
	if mock.GetByEmailFunc == nil {
		panic("UsersClientInterfaceMock.GetByEmailFunc: method is nil but UsersClientInterface.GetByEmail was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Email string
	}{
		Ctx:   ctx,
		Email: email,
	}
	mock.lockGetByEmail.Lock()
	mock.calls.GetByEmail = append(mock.calls.GetByEmail, callInfo)
	mock.lockGetByEmail.Unlock()
	return mock.GetByEmailFunc(ctx, email)
}

// GetByEmailCalls gets all the calls that were made to GetByEmail.
// Check the length with:
//
//	len(mockedUsersClientInterface.GetByEmailCalls())
func (mock *UsersClientInterfaceMock) GetByEmailCalls() []struct {
	Ctx   context.Context
	Email string
} {
	var calls []struct {
		Ctx   context.Context
		Email string
	}
	mock.lockGetByEmail.RLock()
	calls = mock.calls.GetByEmail
	mock.lockGetByEmail.RUnlock()
	return calls
}

// GetPending calls GetPendingFunc.
func (mock *UsersClientInterfaceMock) GetPending(ctx context.Context) ([]users.User, error) {
	if mock.GetPendingFunc == nil {
		panic("UsersClientInterfaceMock.GetPendingFunc: method is nil but UsersClientInterface.GetPending was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetPending.Lock()
	mock.calls.GetPending = append(mock.calls.GetPending, callInfo)
	mock.lockGetPending.Unlock()
	return mock.GetPendingFunc(ctx)
}

// GetPendingCalls gets all the calls that were made to GetPending.
// Check the length with:
//
//	len(mockedUsersClientInterface.GetPendingCalls())
func (mock *UsersClientInterfaceMock) GetPendingCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetPending.RLock()
	calls = mock.calls.GetPending
	mock.lockGetPending.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *UsersClientInterfaceMock) List(ctx context.Context) ([]users.User, error) {
	if mock.ListFunc == nil {
		panic("UsersClientInterfaceMock.ListFunc: method is nil but UsersClientInterface.List was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	mock.lockList.Unlock()
	return mock.ListFunc(ctx)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//
//	len(mockedUsersClientInterface.ListCalls())
func (mock *UsersClientInterfaceMock) ListCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockList.RLock()
	calls = mock.calls.List
	mock.lockList.RUnlock()
	return calls
}

// Register calls RegisterFunc.
func (mock *UsersClientInterfaceMock) Register(ctx context.Context, req *users.RegisterUserRequest) (*users.User, error) {
	if mock.RegisterFunc == nil {
		panic("UsersClientInterfaceMock.RegisterFunc: method is nil but UsersClientInterface.Register was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req *users.RegisterUserRequest
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockRegister.Lock()
	mock.calls.Register = append(mock.calls.Register, callInfo)
	mock.lockRegister.Unlock()
	return mock.RegisterFunc(ctx, req)
}

// RegisterCalls gets all the calls that were made to Register.
// Check the length with:
//
//	len(mockedUsersClientInterface.RegisterCalls())
func (mock *UsersClientInterfaceMock) RegisterCalls() []struct {
	Ctx context.Context
	Req *users.RegisterUserRequest
} {
	var calls []struct {
		Ctx context.Context
		Req *users.RegisterUserRequest
	}
	mock.lockRegister.RLock()
	calls = mock.calls.Register
	mock.lockRegister.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *UsersClientInterfaceMock) Update(ctx context.Context, id uint, req *users.UpdateUserRequest) (*users.User, error) {
	if mock.UpdateFunc == nil {
		panic("UsersClientInterfaceMock.UpdateFunc: method is nil but UsersClientInterface.Update was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uint
		Req *users.UpdateUserRequest
	}{
		Ctx: ctx,
		ID:  id,
		Req: req,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(ctx, id, req)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//
//	len(mockedUsersClientInterface.UpdateCalls())
func (mock *UsersClientInterfaceMock) UpdateCalls() []struct {
	Ctx context.Context
	ID  uint
	Req *users.UpdateUserRequest
} {
	var calls []struct {
		Ctx context.Context
		ID  uint
		Req *users.UpdateUserRequest
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}
