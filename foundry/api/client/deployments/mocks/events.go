// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/input-output-hk/catalyst-forge/foundry/api/client/deployments"
	"sync"
)

// Ensure, that EventsClientInterfaceMock does implement deployments.EventsClientInterface.
// If this is not the case, regenerate this file with moq.
var _ deployments.EventsClientInterface = &EventsClientInterfaceMock{}

// EventsClientInterfaceMock is a mock implementation of deployments.EventsClientInterface.
//
//	func TestSomethingThatUsesEventsClientInterface(t *testing.T) {
//
//		// make and configure a mocked deployments.EventsClientInterface
//		mockedEventsClientInterface := &EventsClientInterfaceMock{
//			AddFunc: func(ctx context.Context, releaseID string, deployID string, name string, message string) (*deployments.ReleaseDeployment, error) {
//				panic("mock out the Add method")
//			},
//			GetFunc: func(ctx context.Context, releaseID string, deployID string) ([]deployments.DeploymentEvent, error) {
//				panic("mock out the Get method")
//			},
//		}
//
//		// use mockedEventsClientInterface in code that requires deployments.EventsClientInterface
//		// and then make assertions.
//
//	}
type EventsClientInterfaceMock struct {
	// AddFunc mocks the Add method.
	AddFunc func(ctx context.Context, releaseID string, deployID string, name string, message string) (*deployments.ReleaseDeployment, error)

	// GetFunc mocks the Get method.
	GetFunc func(ctx context.Context, releaseID string, deployID string) ([]deployments.DeploymentEvent, error)

	// calls tracks calls to the methods.
	calls struct {
		// Add holds details about calls to the Add method.
		Add []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ReleaseID is the releaseID argument value.
			ReleaseID string
			// DeployID is the deployID argument value.
			DeployID string
			// Name is the name argument value.
			Name string
			// Message is the message argument value.
			Message string
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ReleaseID is the releaseID argument value.
			ReleaseID string
			// DeployID is the deployID argument value.
			DeployID string
		}
	}
	lockAdd sync.RWMutex
	lockGet sync.RWMutex
}

// Add calls AddFunc.
func (mock *EventsClientInterfaceMock) Add(ctx context.Context, releaseID string, deployID string, name string, message string) (*deployments.ReleaseDeployment, error) {
	if mock.AddFunc == nil {
		panic("EventsClientInterfaceMock.AddFunc: method is nil but EventsClientInterface.Add was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		ReleaseID string
		DeployID  string
		Name      string
		Message   string
	}{
		Ctx:       ctx,
		ReleaseID: releaseID,
		DeployID:  deployID,
		Name:      name,
		Message:   message,
	}
	mock.lockAdd.Lock()
	mock.calls.Add = append(mock.calls.Add, callInfo)
	mock.lockAdd.Unlock()
	return mock.AddFunc(ctx, releaseID, deployID, name, message)
}

// AddCalls gets all the calls that were made to Add.
// Check the length with:
//
//	len(mockedEventsClientInterface.AddCalls())
func (mock *EventsClientInterfaceMock) AddCalls() []struct {
	Ctx       context.Context
	ReleaseID string
	DeployID  string
	Name      string
	Message   string
} {
	var calls []struct {
		Ctx       context.Context
		ReleaseID string
		DeployID  string
		Name      string
		Message   string
	}
	mock.lockAdd.RLock()
	calls = mock.calls.Add
	mock.lockAdd.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *EventsClientInterfaceMock) Get(ctx context.Context, releaseID string, deployID string) ([]deployments.DeploymentEvent, error) {
	if mock.GetFunc == nil {
		panic("EventsClientInterfaceMock.GetFunc: method is nil but EventsClientInterface.Get was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		ReleaseID string
		DeployID  string
	}{
		Ctx:       ctx,
		ReleaseID: releaseID,
		DeployID:  deployID,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(ctx, releaseID, deployID)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//
//	len(mockedEventsClientInterface.GetCalls())
func (mock *EventsClientInterfaceMock) GetCalls() []struct {
	Ctx       context.Context
	ReleaseID string
	DeployID  string
} {
	var calls []struct {
		Ctx       context.Context
		ReleaseID string
		DeployID  string
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}
