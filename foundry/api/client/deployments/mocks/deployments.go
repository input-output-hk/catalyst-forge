// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/input-output-hk/catalyst-forge/foundry/api/client/deployments"
	"sync"
)

// Ensure, that DeploymentsClientInterfaceMock does implement deployments.DeploymentsClientInterface.
// If this is not the case, regenerate this file with moq.
var _ deployments.DeploymentsClientInterface = &DeploymentsClientInterfaceMock{}

// DeploymentsClientInterfaceMock is a mock implementation of deployments.DeploymentsClientInterface.
//
//	func TestSomethingThatUsesDeploymentsClientInterface(t *testing.T) {
//
//		// make and configure a mocked deployments.DeploymentsClientInterface
//		mockedDeploymentsClientInterface := &DeploymentsClientInterfaceMock{
//			CreateFunc: func(ctx context.Context, releaseID string) (*deployments.ReleaseDeployment, error) {
//				panic("mock out the Create method")
//			},
//			GetFunc: func(ctx context.Context, releaseID string, deployID string) (*deployments.ReleaseDeployment, error) {
//				panic("mock out the Get method")
//			},
//			GetLatestFunc: func(ctx context.Context, releaseID string) (*deployments.ReleaseDeployment, error) {
//				panic("mock out the GetLatest method")
//			},
//			IncrementAttemptsFunc: func(ctx context.Context, releaseID string, deployID string) (*deployments.ReleaseDeployment, error) {
//				panic("mock out the IncrementAttempts method")
//			},
//			ListFunc: func(ctx context.Context, releaseID string) ([]deployments.ReleaseDeployment, error) {
//				panic("mock out the List method")
//			},
//			UpdateFunc: func(ctx context.Context, releaseID string, deployment *deployments.ReleaseDeployment) (*deployments.ReleaseDeployment, error) {
//				panic("mock out the Update method")
//			},
//		}
//
//		// use mockedDeploymentsClientInterface in code that requires deployments.DeploymentsClientInterface
//		// and then make assertions.
//
//	}
type DeploymentsClientInterfaceMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, releaseID string) (*deployments.ReleaseDeployment, error)

	// GetFunc mocks the Get method.
	GetFunc func(ctx context.Context, releaseID string, deployID string) (*deployments.ReleaseDeployment, error)

	// GetLatestFunc mocks the GetLatest method.
	GetLatestFunc func(ctx context.Context, releaseID string) (*deployments.ReleaseDeployment, error)

	// IncrementAttemptsFunc mocks the IncrementAttempts method.
	IncrementAttemptsFunc func(ctx context.Context, releaseID string, deployID string) (*deployments.ReleaseDeployment, error)

	// ListFunc mocks the List method.
	ListFunc func(ctx context.Context, releaseID string) ([]deployments.ReleaseDeployment, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(ctx context.Context, releaseID string, deployment *deployments.ReleaseDeployment) (*deployments.ReleaseDeployment, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ReleaseID is the releaseID argument value.
			ReleaseID string
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ReleaseID is the releaseID argument value.
			ReleaseID string
			// DeployID is the deployID argument value.
			DeployID string
		}
		// GetLatest holds details about calls to the GetLatest method.
		GetLatest []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ReleaseID is the releaseID argument value.
			ReleaseID string
		}
		// IncrementAttempts holds details about calls to the IncrementAttempts method.
		IncrementAttempts []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ReleaseID is the releaseID argument value.
			ReleaseID string
			// DeployID is the deployID argument value.
			DeployID string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ReleaseID is the releaseID argument value.
			ReleaseID string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ReleaseID is the releaseID argument value.
			ReleaseID string
			// Deployment is the deployment argument value.
			Deployment *deployments.ReleaseDeployment
		}
	}
	lockCreate            sync.RWMutex
	lockGet               sync.RWMutex
	lockGetLatest         sync.RWMutex
	lockIncrementAttempts sync.RWMutex
	lockList              sync.RWMutex
	lockUpdate            sync.RWMutex
}

// Create calls CreateFunc.
func (mock *DeploymentsClientInterfaceMock) Create(ctx context.Context, releaseID string) (*deployments.ReleaseDeployment, error) {
	if mock.CreateFunc == nil {
		panic("DeploymentsClientInterfaceMock.CreateFunc: method is nil but DeploymentsClientInterface.Create was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		ReleaseID string
	}{
		Ctx:       ctx,
		ReleaseID: releaseID,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, releaseID)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedDeploymentsClientInterface.CreateCalls())
func (mock *DeploymentsClientInterfaceMock) CreateCalls() []struct {
	Ctx       context.Context
	ReleaseID string
} {
	var calls []struct {
		Ctx       context.Context
		ReleaseID string
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *DeploymentsClientInterfaceMock) Get(ctx context.Context, releaseID string, deployID string) (*deployments.ReleaseDeployment, error) {
	if mock.GetFunc == nil {
		panic("DeploymentsClientInterfaceMock.GetFunc: method is nil but DeploymentsClientInterface.Get was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		ReleaseID string
		DeployID  string
	}{
		Ctx:       ctx,
		ReleaseID: releaseID,
		DeployID:  deployID,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(ctx, releaseID, deployID)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//
//	len(mockedDeploymentsClientInterface.GetCalls())
func (mock *DeploymentsClientInterfaceMock) GetCalls() []struct {
	Ctx       context.Context
	ReleaseID string
	DeployID  string
} {
	var calls []struct {
		Ctx       context.Context
		ReleaseID string
		DeployID  string
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// GetLatest calls GetLatestFunc.
func (mock *DeploymentsClientInterfaceMock) GetLatest(ctx context.Context, releaseID string) (*deployments.ReleaseDeployment, error) {
	if mock.GetLatestFunc == nil {
		panic("DeploymentsClientInterfaceMock.GetLatestFunc: method is nil but DeploymentsClientInterface.GetLatest was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		ReleaseID string
	}{
		Ctx:       ctx,
		ReleaseID: releaseID,
	}
	mock.lockGetLatest.Lock()
	mock.calls.GetLatest = append(mock.calls.GetLatest, callInfo)
	mock.lockGetLatest.Unlock()
	return mock.GetLatestFunc(ctx, releaseID)
}

// GetLatestCalls gets all the calls that were made to GetLatest.
// Check the length with:
//
//	len(mockedDeploymentsClientInterface.GetLatestCalls())
func (mock *DeploymentsClientInterfaceMock) GetLatestCalls() []struct {
	Ctx       context.Context
	ReleaseID string
} {
	var calls []struct {
		Ctx       context.Context
		ReleaseID string
	}
	mock.lockGetLatest.RLock()
	calls = mock.calls.GetLatest
	mock.lockGetLatest.RUnlock()
	return calls
}

// IncrementAttempts calls IncrementAttemptsFunc.
func (mock *DeploymentsClientInterfaceMock) IncrementAttempts(ctx context.Context, releaseID string, deployID string) (*deployments.ReleaseDeployment, error) {
	if mock.IncrementAttemptsFunc == nil {
		panic("DeploymentsClientInterfaceMock.IncrementAttemptsFunc: method is nil but DeploymentsClientInterface.IncrementAttempts was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		ReleaseID string
		DeployID  string
	}{
		Ctx:       ctx,
		ReleaseID: releaseID,
		DeployID:  deployID,
	}
	mock.lockIncrementAttempts.Lock()
	mock.calls.IncrementAttempts = append(mock.calls.IncrementAttempts, callInfo)
	mock.lockIncrementAttempts.Unlock()
	return mock.IncrementAttemptsFunc(ctx, releaseID, deployID)
}

// IncrementAttemptsCalls gets all the calls that were made to IncrementAttempts.
// Check the length with:
//
//	len(mockedDeploymentsClientInterface.IncrementAttemptsCalls())
func (mock *DeploymentsClientInterfaceMock) IncrementAttemptsCalls() []struct {
	Ctx       context.Context
	ReleaseID string
	DeployID  string
} {
	var calls []struct {
		Ctx       context.Context
		ReleaseID string
		DeployID  string
	}
	mock.lockIncrementAttempts.RLock()
	calls = mock.calls.IncrementAttempts
	mock.lockIncrementAttempts.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *DeploymentsClientInterfaceMock) List(ctx context.Context, releaseID string) ([]deployments.ReleaseDeployment, error) {
	if mock.ListFunc == nil {
		panic("DeploymentsClientInterfaceMock.ListFunc: method is nil but DeploymentsClientInterface.List was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		ReleaseID string
	}{
		Ctx:       ctx,
		ReleaseID: releaseID,
	}
	mock.lockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	mock.lockList.Unlock()
	return mock.ListFunc(ctx, releaseID)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//
//	len(mockedDeploymentsClientInterface.ListCalls())
func (mock *DeploymentsClientInterfaceMock) ListCalls() []struct {
	Ctx       context.Context
	ReleaseID string
} {
	var calls []struct {
		Ctx       context.Context
		ReleaseID string
	}
	mock.lockList.RLock()
	calls = mock.calls.List
	mock.lockList.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *DeploymentsClientInterfaceMock) Update(ctx context.Context, releaseID string, deployment *deployments.ReleaseDeployment) (*deployments.ReleaseDeployment, error) {
	if mock.UpdateFunc == nil {
		panic("DeploymentsClientInterfaceMock.UpdateFunc: method is nil but DeploymentsClientInterface.Update was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		ReleaseID  string
		Deployment *deployments.ReleaseDeployment
	}{
		Ctx:        ctx,
		ReleaseID:  releaseID,
		Deployment: deployment,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(ctx, releaseID, deployment)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//
//	len(mockedDeploymentsClientInterface.UpdateCalls())
func (mock *DeploymentsClientInterfaceMock) UpdateCalls() []struct {
	Ctx        context.Context
	ReleaseID  string
	Deployment *deployments.ReleaseDeployment
} {
	var calls []struct {
		Ctx        context.Context
		ReleaseID  string
		Deployment *deployments.ReleaseDeployment
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}
