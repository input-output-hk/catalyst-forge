// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"sync"

	"github.com/input-output-hk/catalyst-forge/foundry/api/pkg/auth/github"
)

// GithubActionsOIDCClientMock is a mock implementation of github.GithubActionsOIDCClient.
//
//	func TestSomethingThatUsesGithubActionsOIDCClient(t *testing.T) {
//
//		// make and configure a mocked github.GithubActionsOIDCClient
//		mockedGithubActionsOIDCClient := &GithubActionsOIDCClientMock{
//			StartCacheFunc: func() error {
//				panic("mock out the StartCache method")
//			},
//			StopCacheFunc: func()  {
//				panic("mock out the StopCache method")
//			},
//			VerifyFunc: func(token string, audience string) (*github.TokenInfo, error) {
//				panic("mock out the Verify method")
//			},
//		}
//
//		// use mockedGithubActionsOIDCClient in code that requires github.GithubActionsOIDCClient
//		// and then make assertions.
//
//	}
type GithubActionsOIDCClientMock struct {
	// StartCacheFunc mocks the StartCache method.
	StartCacheFunc func() error

	// StopCacheFunc mocks the StopCache method.
	StopCacheFunc func()

	// VerifyFunc mocks the Verify method.
	VerifyFunc func(token string, audience string) (*github.TokenInfo, error)

	// calls tracks calls to the methods.
	calls struct {
		// StartCache holds details about calls to the StartCache method.
		StartCache []struct {
		}
		// StopCache holds details about calls to the StopCache method.
		StopCache []struct {
		}
		// Verify holds details about calls to the Verify method.
		Verify []struct {
			// Token is the token argument value.
			Token string
			// Audience is the audience argument value.
			Audience string
		}
	}
	lockStartCache sync.RWMutex
	lockStopCache  sync.RWMutex
	lockVerify     sync.RWMutex
}

// StartCache calls StartCacheFunc.
func (mock *GithubActionsOIDCClientMock) StartCache() error {
	if mock.StartCacheFunc == nil {
		panic("GithubActionsOIDCClientMock.StartCacheFunc: method is nil but GithubActionsOIDCClient.StartCache was just called")
	}
	callInfo := struct {
	}{}
	mock.lockStartCache.Lock()
	mock.calls.StartCache = append(mock.calls.StartCache, callInfo)
	mock.lockStartCache.Unlock()
	return mock.StartCacheFunc()
}

// StartCacheCalls gets all the calls that were made to StartCache.
// Check the length with:
//
//	len(mockedGithubActionsOIDCClient.StartCacheCalls())
func (mock *GithubActionsOIDCClientMock) StartCacheCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockStartCache.RLock()
	calls = mock.calls.StartCache
	mock.lockStartCache.RUnlock()
	return calls
}

// StopCache calls StopCacheFunc.
func (mock *GithubActionsOIDCClientMock) StopCache() {
	if mock.StopCacheFunc == nil {
		panic("GithubActionsOIDCClientMock.StopCacheFunc: method is nil but GithubActionsOIDCClient.StopCache was just called")
	}
	callInfo := struct {
	}{}
	mock.lockStopCache.Lock()
	mock.calls.StopCache = append(mock.calls.StopCache, callInfo)
	mock.lockStopCache.Unlock()
	mock.StopCacheFunc()
}

// StopCacheCalls gets all the calls that were made to StopCache.
// Check the length with:
//
//	len(mockedGithubActionsOIDCClient.StopCacheCalls())
func (mock *GithubActionsOIDCClientMock) StopCacheCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockStopCache.RLock()
	calls = mock.calls.StopCache
	mock.lockStopCache.RUnlock()
	return calls
}

// Verify calls VerifyFunc.
func (mock *GithubActionsOIDCClientMock) Verify(token string, audience string) (*github.TokenInfo, error) {
	if mock.VerifyFunc == nil {
		panic("GithubActionsOIDCClientMock.VerifyFunc: method is nil but GithubActionsOIDCClient.Verify was just called")
	}
	callInfo := struct {
		Token    string
		Audience string
	}{
		Token:    token,
		Audience: audience,
	}
	mock.lockVerify.Lock()
	mock.calls.Verify = append(mock.calls.Verify, callInfo)
	mock.lockVerify.Unlock()
	return mock.VerifyFunc(token, audience)
}

// VerifyCalls gets all the calls that were made to Verify.
// Check the length with:
//
//	len(mockedGithubActionsOIDCClient.VerifyCalls())
func (mock *GithubActionsOIDCClientMock) VerifyCalls() []struct {
	Token    string
	Audience string
} {
	var calls []struct {
		Token    string
		Audience string
	}
	mock.lockVerify.RLock()
	calls = mock.calls.Verify
	mock.lockVerify.RUnlock()
	return calls
}
