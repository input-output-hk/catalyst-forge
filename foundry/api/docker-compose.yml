services:
  auth:
    image: foundry-api:latest
    container_name: auth
    entrypoint: ["/usr/local/bin/entrypoint.sh"]
    volumes:
      - ./.auth:/data
      - ./test/step-ca/scripts/auth.sh:/usr/local/bin/entrypoint.sh:ro

  auth-jwt:
    image: foundry-api:latest
    container_name: auth-jwt
    entrypoint: ["/bin/sh", "-c", "/app/foundry-api auth generate -a -k /data/private.pem >/data/jwt.txt"]
    volumes:
      - ./.auth:/data
    depends_on:
      auth:
        condition: service_started

  api:
    image: foundry-api:latest
    container_name: api
    environment:
      HTTP_PORT: 5050
      AUTH_PRIVATE_KEY: /data/private.pem
      AUTH_PUBLIC_KEY: /data/public.pem
      DB_SUPER_USER: postgres
      DB_SUPER_PASSWORD: postgres
      DB_ROOT_NAME: postgres
      DB_INIT: "true"
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: foundry
      DB_PASSWORD: changeme
      DB_NAME: foundry
      DB_SSLMODE: disable
      K8S_ENABLED: "false"
      LOG_LEVEL: debug
      LOG_FORMAT: text
      STEPCA_BASE_URL: https://step-ca:9000
      STEPCA_INSECURE_SKIP_VERIFY: "true"
      STEPCA_TIMEOUT: 30s
      STEPCA_ROOT_CA: /ca/root_ca.crt
    ports:
      - "5050:5050"
      - "8080:8080"
    volumes:
      - ./.auth:/data
      - step-ca-ca:/ca
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5050/healthz"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    depends_on:
      auth:
        condition: service_started
      postgres:
        condition: service_healthy
      step-ca:
        condition: service_healthy
    restart: on-failure

  api-test:
    image: foundry-api-test:latest
    container_name: api-test
    environment:
      API_URL: http://api:5050
      JWT_TOKEN_PATH: /data/jwt.txt
    volumes:
      - ./.auth:/data
    depends_on:
      api:
        condition: service_healthy

  postgres:
    image: postgres:15-alpine
    container_name: db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: releases
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: on-failure

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@foundry.dev
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    ports:
      - "5051:80"
    volumes:
      - pgadmin-data:/var/lib/pgadmin
      - ./pgadmin-servers.json:/pgadmin4/servers.json
    depends_on:
      postgres:
        condition: service_healthy
    restart: on-failure

  step-ca:
    image: smallstep/step-ca:0.26.1
    container_name: step-ca
    environment:
      STEP_PATH: /home/step
      DOCKER_STEPCA_INIT_NAME: "Foundry Test CA"
      DOCKER_STEPCA_INIT_DNS_NAMES: "step-ca,localhost"
      DOCKER_STEPCA_INIT_REMOTE_MANAGEMENT: "false"
      DOCKER_STEPCA_INIT_ACME: "false"
      DOCKER_STEPCA_INIT_PASSWORD: "password123"
      STEPDEBUG: "1"
    volumes:
      - step-ca-data:/home/step
      - ./.auth:/foundry-keys:rw
      - ./test/step-ca/scripts/step-ca-entrypoint.sh:/usr/local/bin/entrypoint.sh:ro
      - step-ca-ca:/data
    ports:
      - "9000:9000"
    entrypoint: ["/usr/local/bin/entrypoint.sh"]
    healthcheck:
      test: ["CMD", "step", "ca", "health", "--ca-url", "https://localhost:9000", "--root", "/home/step/certs/root_ca.crt"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s
    depends_on:
      auth:
        condition: service_completed_successfully
    restart: on-failure

volumes:
  postgres-data:
  pgadmin-data:
  step-ca-data:
  step-ca-ca:
