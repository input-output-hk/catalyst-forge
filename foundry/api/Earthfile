VERSION 0.8

deps:
    FROM golang:1.24.2-bookworm

    WORKDIR /work

    RUN apt-get update && apt-get install -y file

    RUN mkdir -p /go/cache && mkdir -p /go/modcache
    ENV GOCACHE=/go/cache
    ENV GOMODCACHE=/go/modcache
    CACHE --persist --sharing shared /go

    # Copy local deps
    COPY ../../lib/foundry/auth+src/src /lib/foundry/auth
    COPY ../../lib/foundry/client+src/src /lib/foundry/client
    COPY ../../lib/tools+src/src /lib/tools

    COPY go.mod go.sum .
    RUN go mod download

src:
    FROM +deps

    CACHE --persist --sharing shared /go

    COPY --dir cmd docs internal pkg .
    RUN go generate ./...

    SAVE ARTIFACT . src

check:
    FROM +src

    RUN gofmt -l . | grep . && exit 1 || exit 0
    RUN go vet ./...

build:
    FROM +src

    ARG GOOS
    ARG GOARCH
    ARG version="0.0.0"

    ENV CGO_ENABLED=0
    RUN go build -ldflags="-extldflags=-static -X main.version=$version" -o bin/foundry-api cmd/api/main.go
    RUN file bin/foundry

    SAVE ARTIFACT bin/foundry-api foundry-api

test:
    FROM earthly/dind:ubuntu-24.04-docker-27.3.1-1

    COPY docker-compose.yml .

    WITH DOCKER \
        --load foundry-api:latest=(+docker) \
        --load foundry-api-test:latest=(+docker-test) \
        --compose docker-compose.yml \
        --service api \
        --service auth \
        --service auth-jwt \
        --service postgres
        RUN docker compose up api-test
    END

docker-test:
    FROM +src

    COPY --dir test .

    ENTRYPOINT ["/usr/local/go/bin/go", "test", "-v", "./test/..."]
    SAVE IMAGE foundry-api-test:latest

docker:
    FROM debian:latest
    WORKDIR /app

    ARG container="foundry-api"
    ARG tag="latest"
    ARG version="dev"

    ARG TARGETOS
    ARG TARGETARCH
    ARG TARGETPLATFORM

    RUN apt-get update && apt-get install -y curl postgresql-client

    COPY \
        --platform=$TARGETPLATFORM \
        (+build/foundry-api \
        --GOOS=$TARGETOS \
        --GOARCH=$TARGETARCH \
        --version=$version) foundry-api
    COPY --dir sql .
    COPY entrypoint.sh .

    ENTRYPOINT [ "/bin/bash", "/app/entrypoint.sh" ]
    SAVE IMAGE ${container}:${tag}

certs:
    FROM +build

    RUN ./bin/foundry-api auth init --output-dir /certs

    SAVE ARTIFACT /certs certs

jwt:
    FROM +build

    COPY --dir certs .

    RUN mkdir -p /jwt
    RUN ./bin/foundry-api auth generate -a -k ./certs/private.pem > /jwt/token.txt

    SAVE ARTIFACT /jwt jwt

swagger:
    FROM +src

    RUN go install github.com/swaggo/swag/cmd/swag@latest
    RUN swag init -g cmd/api/main.go -o docs

    SAVE ARTIFACT docs docs AS LOCAL docs

check-swagger:
    FROM +swagger

    COPY --dir docs /docs
    RUN diff -r docs ../docs