// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/input-output-hk/catalyst-forge/foundry/api/internal/models"
	"github.com/input-output-hk/catalyst-forge/lib/foundry/auth"
	"sync"
)

// GithubAuthServiceMock is a mock implementation of service.GithubAuthService.
//
//	func TestSomethingThatUsesGithubAuthService(t *testing.T) {
//
//		// make and configure a mocked service.GithubAuthService
//		mockedGithubAuthService := &GithubAuthServiceMock{
//			CreateAuthFunc: func(auth *models.GithubRepositoryAuth) error {
//				panic("mock out the CreateAuth method")
//			},
//			DeleteAuthFunc: func(id uint) error {
//				panic("mock out the DeleteAuth method")
//			},
//			GetAuthByIDFunc: func(id uint) (*models.GithubRepositoryAuth, error) {
//				panic("mock out the GetAuthByID method")
//			},
//			GetAuthByRepositoryFunc: func(repository string) (*models.GithubRepositoryAuth, error) {
//				panic("mock out the GetAuthByRepository method")
//			},
//			GetPermissionsForRepositoryFunc: func(repository string) ([]auth.Permission, error) {
//				panic("mock out the GetPermissionsForRepository method")
//			},
//			ListAuthsFunc: func() ([]models.GithubRepositoryAuth, error) {
//				panic("mock out the ListAuths method")
//			},
//			UpdateAuthFunc: func(authMoqParam *models.GithubRepositoryAuth) error {
//				panic("mock out the UpdateAuth method")
//			},
//		}
//
//		// use mockedGithubAuthService in code that requires service.GithubAuthService
//		// and then make assertions.
//
//	}
type GithubAuthServiceMock struct {
	// CreateAuthFunc mocks the CreateAuth method.
	CreateAuthFunc func(auth *models.GithubRepositoryAuth) error

	// DeleteAuthFunc mocks the DeleteAuth method.
	DeleteAuthFunc func(id uint) error

	// GetAuthByIDFunc mocks the GetAuthByID method.
	GetAuthByIDFunc func(id uint) (*models.GithubRepositoryAuth, error)

	// GetAuthByRepositoryFunc mocks the GetAuthByRepository method.
	GetAuthByRepositoryFunc func(repository string) (*models.GithubRepositoryAuth, error)

	// GetPermissionsForRepositoryFunc mocks the GetPermissionsForRepository method.
	GetPermissionsForRepositoryFunc func(repository string) ([]auth.Permission, error)

	// ListAuthsFunc mocks the ListAuths method.
	ListAuthsFunc func() ([]models.GithubRepositoryAuth, error)

	// UpdateAuthFunc mocks the UpdateAuth method.
	UpdateAuthFunc func(authMoqParam *models.GithubRepositoryAuth) error

	// calls tracks calls to the methods.
	calls struct {
		// CreateAuth holds details about calls to the CreateAuth method.
		CreateAuth []struct {
			// Auth is the auth argument value.
			Auth *models.GithubRepositoryAuth
		}
		// DeleteAuth holds details about calls to the DeleteAuth method.
		DeleteAuth []struct {
			// ID is the id argument value.
			ID uint
		}
		// GetAuthByID holds details about calls to the GetAuthByID method.
		GetAuthByID []struct {
			// ID is the id argument value.
			ID uint
		}
		// GetAuthByRepository holds details about calls to the GetAuthByRepository method.
		GetAuthByRepository []struct {
			// Repository is the repository argument value.
			Repository string
		}
		// GetPermissionsForRepository holds details about calls to the GetPermissionsForRepository method.
		GetPermissionsForRepository []struct {
			// Repository is the repository argument value.
			Repository string
		}
		// ListAuths holds details about calls to the ListAuths method.
		ListAuths []struct {
		}
		// UpdateAuth holds details about calls to the UpdateAuth method.
		UpdateAuth []struct {
			// AuthMoqParam is the authMoqParam argument value.
			AuthMoqParam *models.GithubRepositoryAuth
		}
	}
	lockCreateAuth                  sync.RWMutex
	lockDeleteAuth                  sync.RWMutex
	lockGetAuthByID                 sync.RWMutex
	lockGetAuthByRepository         sync.RWMutex
	lockGetPermissionsForRepository sync.RWMutex
	lockListAuths                   sync.RWMutex
	lockUpdateAuth                  sync.RWMutex
}

// CreateAuth calls CreateAuthFunc.
func (mock *GithubAuthServiceMock) CreateAuth(auth *models.GithubRepositoryAuth) error {
	if mock.CreateAuthFunc == nil {
		panic("GithubAuthServiceMock.CreateAuthFunc: method is nil but GithubAuthService.CreateAuth was just called")
	}
	callInfo := struct {
		Auth *models.GithubRepositoryAuth
	}{
		Auth: auth,
	}
	mock.lockCreateAuth.Lock()
	mock.calls.CreateAuth = append(mock.calls.CreateAuth, callInfo)
	mock.lockCreateAuth.Unlock()
	return mock.CreateAuthFunc(auth)
}

// CreateAuthCalls gets all the calls that were made to CreateAuth.
// Check the length with:
//
//	len(mockedGithubAuthService.CreateAuthCalls())
func (mock *GithubAuthServiceMock) CreateAuthCalls() []struct {
	Auth *models.GithubRepositoryAuth
} {
	var calls []struct {
		Auth *models.GithubRepositoryAuth
	}
	mock.lockCreateAuth.RLock()
	calls = mock.calls.CreateAuth
	mock.lockCreateAuth.RUnlock()
	return calls
}

// DeleteAuth calls DeleteAuthFunc.
func (mock *GithubAuthServiceMock) DeleteAuth(id uint) error {
	if mock.DeleteAuthFunc == nil {
		panic("GithubAuthServiceMock.DeleteAuthFunc: method is nil but GithubAuthService.DeleteAuth was just called")
	}
	callInfo := struct {
		ID uint
	}{
		ID: id,
	}
	mock.lockDeleteAuth.Lock()
	mock.calls.DeleteAuth = append(mock.calls.DeleteAuth, callInfo)
	mock.lockDeleteAuth.Unlock()
	return mock.DeleteAuthFunc(id)
}

// DeleteAuthCalls gets all the calls that were made to DeleteAuth.
// Check the length with:
//
//	len(mockedGithubAuthService.DeleteAuthCalls())
func (mock *GithubAuthServiceMock) DeleteAuthCalls() []struct {
	ID uint
} {
	var calls []struct {
		ID uint
	}
	mock.lockDeleteAuth.RLock()
	calls = mock.calls.DeleteAuth
	mock.lockDeleteAuth.RUnlock()
	return calls
}

// GetAuthByID calls GetAuthByIDFunc.
func (mock *GithubAuthServiceMock) GetAuthByID(id uint) (*models.GithubRepositoryAuth, error) {
	if mock.GetAuthByIDFunc == nil {
		panic("GithubAuthServiceMock.GetAuthByIDFunc: method is nil but GithubAuthService.GetAuthByID was just called")
	}
	callInfo := struct {
		ID uint
	}{
		ID: id,
	}
	mock.lockGetAuthByID.Lock()
	mock.calls.GetAuthByID = append(mock.calls.GetAuthByID, callInfo)
	mock.lockGetAuthByID.Unlock()
	return mock.GetAuthByIDFunc(id)
}

// GetAuthByIDCalls gets all the calls that were made to GetAuthByID.
// Check the length with:
//
//	len(mockedGithubAuthService.GetAuthByIDCalls())
func (mock *GithubAuthServiceMock) GetAuthByIDCalls() []struct {
	ID uint
} {
	var calls []struct {
		ID uint
	}
	mock.lockGetAuthByID.RLock()
	calls = mock.calls.GetAuthByID
	mock.lockGetAuthByID.RUnlock()
	return calls
}

// GetAuthByRepository calls GetAuthByRepositoryFunc.
func (mock *GithubAuthServiceMock) GetAuthByRepository(repository string) (*models.GithubRepositoryAuth, error) {
	if mock.GetAuthByRepositoryFunc == nil {
		panic("GithubAuthServiceMock.GetAuthByRepositoryFunc: method is nil but GithubAuthService.GetAuthByRepository was just called")
	}
	callInfo := struct {
		Repository string
	}{
		Repository: repository,
	}
	mock.lockGetAuthByRepository.Lock()
	mock.calls.GetAuthByRepository = append(mock.calls.GetAuthByRepository, callInfo)
	mock.lockGetAuthByRepository.Unlock()
	return mock.GetAuthByRepositoryFunc(repository)
}

// GetAuthByRepositoryCalls gets all the calls that were made to GetAuthByRepository.
// Check the length with:
//
//	len(mockedGithubAuthService.GetAuthByRepositoryCalls())
func (mock *GithubAuthServiceMock) GetAuthByRepositoryCalls() []struct {
	Repository string
} {
	var calls []struct {
		Repository string
	}
	mock.lockGetAuthByRepository.RLock()
	calls = mock.calls.GetAuthByRepository
	mock.lockGetAuthByRepository.RUnlock()
	return calls
}

// GetPermissionsForRepository calls GetPermissionsForRepositoryFunc.
func (mock *GithubAuthServiceMock) GetPermissionsForRepository(repository string) ([]auth.Permission, error) {
	if mock.GetPermissionsForRepositoryFunc == nil {
		panic("GithubAuthServiceMock.GetPermissionsForRepositoryFunc: method is nil but GithubAuthService.GetPermissionsForRepository was just called")
	}
	callInfo := struct {
		Repository string
	}{
		Repository: repository,
	}
	mock.lockGetPermissionsForRepository.Lock()
	mock.calls.GetPermissionsForRepository = append(mock.calls.GetPermissionsForRepository, callInfo)
	mock.lockGetPermissionsForRepository.Unlock()
	return mock.GetPermissionsForRepositoryFunc(repository)
}

// GetPermissionsForRepositoryCalls gets all the calls that were made to GetPermissionsForRepository.
// Check the length with:
//
//	len(mockedGithubAuthService.GetPermissionsForRepositoryCalls())
func (mock *GithubAuthServiceMock) GetPermissionsForRepositoryCalls() []struct {
	Repository string
} {
	var calls []struct {
		Repository string
	}
	mock.lockGetPermissionsForRepository.RLock()
	calls = mock.calls.GetPermissionsForRepository
	mock.lockGetPermissionsForRepository.RUnlock()
	return calls
}

// ListAuths calls ListAuthsFunc.
func (mock *GithubAuthServiceMock) ListAuths() ([]models.GithubRepositoryAuth, error) {
	if mock.ListAuthsFunc == nil {
		panic("GithubAuthServiceMock.ListAuthsFunc: method is nil but GithubAuthService.ListAuths was just called")
	}
	callInfo := struct {
	}{}
	mock.lockListAuths.Lock()
	mock.calls.ListAuths = append(mock.calls.ListAuths, callInfo)
	mock.lockListAuths.Unlock()
	return mock.ListAuthsFunc()
}

// ListAuthsCalls gets all the calls that were made to ListAuths.
// Check the length with:
//
//	len(mockedGithubAuthService.ListAuthsCalls())
func (mock *GithubAuthServiceMock) ListAuthsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockListAuths.RLock()
	calls = mock.calls.ListAuths
	mock.lockListAuths.RUnlock()
	return calls
}

// UpdateAuth calls UpdateAuthFunc.
func (mock *GithubAuthServiceMock) UpdateAuth(authMoqParam *models.GithubRepositoryAuth) error {
	if mock.UpdateAuthFunc == nil {
		panic("GithubAuthServiceMock.UpdateAuthFunc: method is nil but GithubAuthService.UpdateAuth was just called")
	}
	callInfo := struct {
		AuthMoqParam *models.GithubRepositoryAuth
	}{
		AuthMoqParam: authMoqParam,
	}
	mock.lockUpdateAuth.Lock()
	mock.calls.UpdateAuth = append(mock.calls.UpdateAuth, callInfo)
	mock.lockUpdateAuth.Unlock()
	return mock.UpdateAuthFunc(authMoqParam)
}

// UpdateAuthCalls gets all the calls that were made to UpdateAuth.
// Check the length with:
//
//	len(mockedGithubAuthService.UpdateAuthCalls())
func (mock *GithubAuthServiceMock) UpdateAuthCalls() []struct {
	AuthMoqParam *models.GithubRepositoryAuth
} {
	var calls []struct {
		AuthMoqParam *models.GithubRepositoryAuth
	}
	mock.lockUpdateAuth.RLock()
	calls = mock.calls.UpdateAuth
	mock.lockUpdateAuth.RUnlock()
	return calls
}
