// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/input-output-hk/catalyst-forge/foundry/api/internal/models"
	"github.com/input-output-hk/catalyst-forge/foundry/api/pkg/auth"
	"sync"
)

// GithubAuthRepositoryMock is a mock implementation of repository.GithubAuthRepository.
//
//	func TestSomethingThatUsesGithubAuthRepository(t *testing.T) {
//
//		// make and configure a mocked repository.GithubAuthRepository
//		mockedGithubAuthRepository := &GithubAuthRepositoryMock{
//			CreateFunc: func(auth *models.GithubRepositoryAuth) error {
//				panic("mock out the Create method")
//			},
//			DeleteFunc: func(id uint) error {
//				panic("mock out the Delete method")
//			},
//			GetByIDFunc: func(id uint) (*models.GithubRepositoryAuth, error) {
//				panic("mock out the GetByID method")
//			},
//			GetByRepositoryFunc: func(repository string) (*models.GithubRepositoryAuth, error) {
//				panic("mock out the GetByRepository method")
//			},
//			GetPermissionsForRepositoryFunc: func(repository string) ([]auth.Permission, error) {
//				panic("mock out the GetPermissionsForRepository method")
//			},
//			ListFunc: func() ([]models.GithubRepositoryAuth, error) {
//				panic("mock out the List method")
//			},
//			UpdateFunc: func(authMoqParam *models.GithubRepositoryAuth) error {
//				panic("mock out the Update method")
//			},
//		}
//
//		// use mockedGithubAuthRepository in code that requires repository.GithubAuthRepository
//		// and then make assertions.
//
//	}
type GithubAuthRepositoryMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(auth *models.GithubRepositoryAuth) error

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(id uint) error

	// GetByIDFunc mocks the GetByID method.
	GetByIDFunc func(id uint) (*models.GithubRepositoryAuth, error)

	// GetByRepositoryFunc mocks the GetByRepository method.
	GetByRepositoryFunc func(repository string) (*models.GithubRepositoryAuth, error)

	// GetPermissionsForRepositoryFunc mocks the GetPermissionsForRepository method.
	GetPermissionsForRepositoryFunc func(repository string) ([]auth.Permission, error)

	// ListFunc mocks the List method.
	ListFunc func() ([]models.GithubRepositoryAuth, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(authMoqParam *models.GithubRepositoryAuth) error

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Auth is the auth argument value.
			Auth *models.GithubRepositoryAuth
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// ID is the id argument value.
			ID uint
		}
		// GetByID holds details about calls to the GetByID method.
		GetByID []struct {
			// ID is the id argument value.
			ID uint
		}
		// GetByRepository holds details about calls to the GetByRepository method.
		GetByRepository []struct {
			// Repository is the repository argument value.
			Repository string
		}
		// GetPermissionsForRepository holds details about calls to the GetPermissionsForRepository method.
		GetPermissionsForRepository []struct {
			// Repository is the repository argument value.
			Repository string
		}
		// List holds details about calls to the List method.
		List []struct {
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// AuthMoqParam is the authMoqParam argument value.
			AuthMoqParam *models.GithubRepositoryAuth
		}
	}
	lockCreate                      sync.RWMutex
	lockDelete                      sync.RWMutex
	lockGetByID                     sync.RWMutex
	lockGetByRepository             sync.RWMutex
	lockGetPermissionsForRepository sync.RWMutex
	lockList                        sync.RWMutex
	lockUpdate                      sync.RWMutex
}

// Create calls CreateFunc.
func (mock *GithubAuthRepositoryMock) Create(auth *models.GithubRepositoryAuth) error {
	if mock.CreateFunc == nil {
		panic("GithubAuthRepositoryMock.CreateFunc: method is nil but GithubAuthRepository.Create was just called")
	}
	callInfo := struct {
		Auth *models.GithubRepositoryAuth
	}{
		Auth: auth,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(auth)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedGithubAuthRepository.CreateCalls())
func (mock *GithubAuthRepositoryMock) CreateCalls() []struct {
	Auth *models.GithubRepositoryAuth
} {
	var calls []struct {
		Auth *models.GithubRepositoryAuth
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *GithubAuthRepositoryMock) Delete(id uint) error {
	if mock.DeleteFunc == nil {
		panic("GithubAuthRepositoryMock.DeleteFunc: method is nil but GithubAuthRepository.Delete was just called")
	}
	callInfo := struct {
		ID uint
	}{
		ID: id,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(id)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//
//	len(mockedGithubAuthRepository.DeleteCalls())
func (mock *GithubAuthRepositoryMock) DeleteCalls() []struct {
	ID uint
} {
	var calls []struct {
		ID uint
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// GetByID calls GetByIDFunc.
func (mock *GithubAuthRepositoryMock) GetByID(id uint) (*models.GithubRepositoryAuth, error) {
	if mock.GetByIDFunc == nil {
		panic("GithubAuthRepositoryMock.GetByIDFunc: method is nil but GithubAuthRepository.GetByID was just called")
	}
	callInfo := struct {
		ID uint
	}{
		ID: id,
	}
	mock.lockGetByID.Lock()
	mock.calls.GetByID = append(mock.calls.GetByID, callInfo)
	mock.lockGetByID.Unlock()
	return mock.GetByIDFunc(id)
}

// GetByIDCalls gets all the calls that were made to GetByID.
// Check the length with:
//
//	len(mockedGithubAuthRepository.GetByIDCalls())
func (mock *GithubAuthRepositoryMock) GetByIDCalls() []struct {
	ID uint
} {
	var calls []struct {
		ID uint
	}
	mock.lockGetByID.RLock()
	calls = mock.calls.GetByID
	mock.lockGetByID.RUnlock()
	return calls
}

// GetByRepository calls GetByRepositoryFunc.
func (mock *GithubAuthRepositoryMock) GetByRepository(repository string) (*models.GithubRepositoryAuth, error) {
	if mock.GetByRepositoryFunc == nil {
		panic("GithubAuthRepositoryMock.GetByRepositoryFunc: method is nil but GithubAuthRepository.GetByRepository was just called")
	}
	callInfo := struct {
		Repository string
	}{
		Repository: repository,
	}
	mock.lockGetByRepository.Lock()
	mock.calls.GetByRepository = append(mock.calls.GetByRepository, callInfo)
	mock.lockGetByRepository.Unlock()
	return mock.GetByRepositoryFunc(repository)
}

// GetByRepositoryCalls gets all the calls that were made to GetByRepository.
// Check the length with:
//
//	len(mockedGithubAuthRepository.GetByRepositoryCalls())
func (mock *GithubAuthRepositoryMock) GetByRepositoryCalls() []struct {
	Repository string
} {
	var calls []struct {
		Repository string
	}
	mock.lockGetByRepository.RLock()
	calls = mock.calls.GetByRepository
	mock.lockGetByRepository.RUnlock()
	return calls
}

// GetPermissionsForRepository calls GetPermissionsForRepositoryFunc.
func (mock *GithubAuthRepositoryMock) GetPermissionsForRepository(repository string) ([]auth.Permission, error) {
	if mock.GetPermissionsForRepositoryFunc == nil {
		panic("GithubAuthRepositoryMock.GetPermissionsForRepositoryFunc: method is nil but GithubAuthRepository.GetPermissionsForRepository was just called")
	}
	callInfo := struct {
		Repository string
	}{
		Repository: repository,
	}
	mock.lockGetPermissionsForRepository.Lock()
	mock.calls.GetPermissionsForRepository = append(mock.calls.GetPermissionsForRepository, callInfo)
	mock.lockGetPermissionsForRepository.Unlock()
	return mock.GetPermissionsForRepositoryFunc(repository)
}

// GetPermissionsForRepositoryCalls gets all the calls that were made to GetPermissionsForRepository.
// Check the length with:
//
//	len(mockedGithubAuthRepository.GetPermissionsForRepositoryCalls())
func (mock *GithubAuthRepositoryMock) GetPermissionsForRepositoryCalls() []struct {
	Repository string
} {
	var calls []struct {
		Repository string
	}
	mock.lockGetPermissionsForRepository.RLock()
	calls = mock.calls.GetPermissionsForRepository
	mock.lockGetPermissionsForRepository.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *GithubAuthRepositoryMock) List() ([]models.GithubRepositoryAuth, error) {
	if mock.ListFunc == nil {
		panic("GithubAuthRepositoryMock.ListFunc: method is nil but GithubAuthRepository.List was just called")
	}
	callInfo := struct {
	}{}
	mock.lockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	mock.lockList.Unlock()
	return mock.ListFunc()
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//
//	len(mockedGithubAuthRepository.ListCalls())
func (mock *GithubAuthRepositoryMock) ListCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockList.RLock()
	calls = mock.calls.List
	mock.lockList.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *GithubAuthRepositoryMock) Update(authMoqParam *models.GithubRepositoryAuth) error {
	if mock.UpdateFunc == nil {
		panic("GithubAuthRepositoryMock.UpdateFunc: method is nil but GithubAuthRepository.Update was just called")
	}
	callInfo := struct {
		AuthMoqParam *models.GithubRepositoryAuth
	}{
		AuthMoqParam: authMoqParam,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(authMoqParam)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//
//	len(mockedGithubAuthRepository.UpdateCalls())
func (mock *GithubAuthRepositoryMock) UpdateCalls() []struct {
	AuthMoqParam *models.GithubRepositoryAuth
} {
	var calls []struct {
		AuthMoqParam *models.GithubRepositoryAuth
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}
